<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[通过teredo获取ipv6地址]]></title>
    <url>%2F2018%2F03%2F07%2Ftools%2Fteredo-ipv6-setting.html</url>
    <content type="text"><![CDATA[因为运营商的原因,我们普通民众家里是用不了ipv6的,但是有teredo这个大杀器可以解决这个问题. 那么,如何开启ipv6呢,下面针对不同的系统提供操作步骤 一、window下开启说明：12345netsh int ipv6 show int # 查看所有适配器netsh int ipv6 show teredo # 查看teredo适配器状态netsh int ipv6 show route # netsh int ter set state clientnetsh interface teredo set state server=teredo.remlab.net # 设置teredo服务器 1.1 win10开启ipv6123456789101112131415161718192021# 设置 Teredo 服务器，默认为：win10.ipv6.microsoft.comnetsh interface teredo set state enterpriseclient server=default# 测试 IPv6 连接，如果不能ping通则需要重置一下teredo试试ping -6 ipv6.test-ipv6.comping -6 [2001:470:1:18::125]netsh interface ipv6 reset # 重置 IPv6 配置， 需要重启系统-------------------- 重启后的分割线 -----ipconfig /all # 查看当前网络信息# 如果经过上面操作后仍无法启用 IPv6，可能是 Teredo 服务器无法正常连接，也可能是 Windows 自身配置问题，可尝试以下两种方法# 第一种：修改 Teredo 服务器为 teredo.remlab.netnetsh interface teredo set state server=teredo.remlab.net# 第二种：先卸载当前 Teredo 适配器再重新启用netsh interface Teredo set state disablenetsh interface Teredo set state type=defaultping -6 ipv6.test-ipv6.com 二、mac开启ipv6 安装miredo https://github.com/darconeous/miredo-osx 下载安装： https://sourceforge.net/projects/tuntaposx/ 注： 很多反馈Mac10.13 安装不了，是系统保护，关闭就好了：123command+Rcsrutil disablereboot 重新安装 分享：teredo服务器123win1710.ipv6.microsoft.comteredo.ipv6.microsoft.comteredo.remlab.net]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>ipv6</tag>
        <tag>teredo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac常用快捷键]]></title>
    <url>%2F2018%2F03%2F06%2Fmac-dev%2Fmac-shortcut-key.html</url>
    <content type="text"><![CDATA[自己常用的mac下快捷键整理,以免遗忘做个备份: 打开破解软件显示“软件包已损坏”: sudo spctl --master-(disable/enable) 启动词典默认取词功能快捷键: Command+Control+d 控制隐藏文件的显示与隐藏: Command+Shift+. 整理文件夹: Command+Option+1/2/3/4 拷贝文件内容: pbcopy &lt; 文件路径 显示端口占用情况: lsof -i:端口号]]></content>
  </entry>
  <entry>
    <title><![CDATA[Awesome Web Toolkit]]></title>
    <url>%2F2018%2F03%2F04%2Fawesome-tools%2Fawesome-web-toolkit.html</url>
    <content type="text"><![CDATA[在线工具合集: 下载地址转换 Youtube下载地址在线转换: 一个在线的youtube下载地址提取工具 APK Downloader: Google Play安卓应用下载地址提取]]></content>
  </entry>
  <entry>
    <title><![CDATA[CMD学习笔记]]></title>
    <url>%2F2018%2F03%2F03%2Fwindows%2Fwindows-cmd-usage.html</url>
    <content type="text"><![CDATA[windows下的cmd我们经常遇到编码问题，如果你是中文的操作系统，他默认的编码是936 。那么，如何解决命令行的乱码以及编码的问题?这就需要用到命令chcp了。 命令帮助 chcp [编码编号] 编码编号： 指系统字符集编码编号，该字符集在CONFIG.SYS文件中由COUNTRY命令定义,对应的编码编号如下: 1258 越南语 1257 波罗的语 1256 阿拉伯语 1255 希伯来语 1254 土耳其语 1253 希腊语 1252 拉丁 1 字符 (ANSI) 1251 西里尔语 1250 中欧语言 950 繁体中文 949 朝鲜语 936 简体中文（默认） 932 日语 874 泰国语 850 多语种 (MS-DOS Latin1) 437 MS-DOS 美国英语 dos指令: chcp 65001 就是换成UTF-8代码页 chcp 936 可以换回默认的GBK chcp 437 是美国英语]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux下VNC服务安装与配置]]></title>
    <url>%2F2018%2F03%2F01%2Flinux%2Flinux-vncserver-usage.html</url>
    <content type="text"><![CDATA[安装vnc12345678yum install -y tigervnc-server tigervnvncserversystemctl start vncserver@:1.service # or vncserver :1systemctl enable vncserver@:1.service # 设置开机启动systemctl stop vncserver@:1.service # 关闭 或 vncserver -kill :1firewall-cmd --permanent --add-port=5901/tcp # 防火墙配置service firewalld restart 卸载 tigervnc12345yum remove -y tigervnc-server tigervnsystemctl stop vncserver@:1.servicerm -rf ~\.vnc]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>fastdfs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[优秀产品推荐]]></title>
    <url>%2F2018%2F02%2F28%2Faffiliate%2Findex.html</url>
    <content type="text"><![CDATA[交易平台 ZB： 国人使用最多的区块链交易平台 VPS vultr: 国外云主机推荐，有日本东京机房，海外一般走CN2线路]]></content>
  </entry>
  <entry>
    <title><![CDATA[分布式文件系统FastDFS搭建]]></title>
    <url>%2F2018%2F02%2F13%2Flinux%2Fdeploy-fastdfs.html</url>
    <content type="text"></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>fastdfs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Awesome Windows]]></title>
    <url>%2F2018%2F02%2F12%2Fawesome-tools%2Fawesome-windows.html</url>
    <content type="text"><![CDATA[包管理工具 chocolatey: The package manager for Windows, 类似于mac下的brew]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows下共享WiFi]]></title>
    <url>%2F2018%2F02%2F12%2Fwindows%2Fwindow-share-wifi.html</url>
    <content type="text"><![CDATA[1234netsh wlan set hostednetwork mode=disallow # 关闭netsh wlan set hostednetwork mode=allow ssid=CMCC_free key=abc654321netsh wlan stop hostednetworknetsh wlan start hostednetwork]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[使用htpasswd设置web密码]]></title>
    <url>%2F2018%2F02%2F08%2Flinux%2Flinux-htpasswd-usage.html</url>
    <content type="text"><![CDATA[网页验证密码可以通过nginx的ngx_http_auth_basic_module模块进行配置，但生产账号和密码则需要用到htpasswd这个工具 一、安装htpasswd123yum -y install httpd-tools # centos安装htpasswd -c /usr/local/nginx/passwd $USER_NAME 二、使用htpasswd支持的参数如下： -c: 创建一个加密文件 -n: 不更新加密文件，只将htpasswd命令加密后的用户名密码显示在屏幕上 -m: 默认htpassswd命令采用MD5算法对密码进行加密 -d: htpassswd命令采用CRYPT算法对密码进行加密 -p: htpassswd命令不对密码进行进行加密，即明文密码 -s: htpassswd命令采用SHA算法对密码进行加密 -b: htpassswd命令行中一并输入用户名和密码而不是根据提示输入密码 -D: 删除指定的用户 2.1 htpasswd密码配置利用htpasswd命令添加用户： htpasswd -bc ./.passwd username pass在原有密码文件中增加下一个用户: htpasswd -b ./.passwd onlyzq pass利用 htpasswd 命令修改密码: htpasswd -D .passwd username 或指定密码 htpasswd -b .passwd username pass用htpasswd命令删除用户名和密码： htpasswd -D .passwd username 2.2 在nginx中启用密码访问12345678server &#123; listen 80; server_name localhost; ... ... auth_basic &quot;Please input password&quot;; auth_basic_user_file /usr/local/nginx/passwd; ...&#125;]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Resilio Sync使用]]></title>
    <url>%2F2018%2F02%2F07%2Ffgfw%2Frslsync-usage.html</url>
    <content type="text"><![CDATA[一、安装1.1 linux下安装rslsync123456# centosrpm --import https://linux-packages.resilio.com/resilio-sync/key.ascyum updateyum install resilio-syncllrslsync --webui.listen 0.0.0.0:8888]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux文件操作命令之获取当前目录]]></title>
    <url>%2F2018%2F02%2F05%2Flinux%2Flinux-get-cur-dir.html</url>
    <content type="text"><![CDATA[readlinkreadlink– help用法：readlink【选项】… 文件输出符号链接值或权威文件名。 -f, --canonicalize 递归跟随给出文件名的所有符号链接以标准化，除最后一个外所有组件必须存在 -e, -- canonicalize-existing 递归跟随给出文件名的所有符号链接以标准化，所有组件都必须存在 -m, -- canonicalize-missing 递归跟随给出文件名的所有符号链接以标准化，但不对组件存在性作出要求 -n, --nonewline 不输出尾随的新行 -q; quiet, -s, --silent 缩减大多数的错误消息 -v, --verbose 报告所有错误消息 --help 显示此帮助信息并退出 --version 显示版本信息并退出 123SHELL_FOLDER=$(dirname $(readlink -f "$0")) #最佳方案SHELL_FOLDER=$(cd "$(dirname "$0")";pwd) SHELL_FOLDER=$(dirname "$0") # 不一定是绝对路径]]></content>
  </entry>
  <entry>
    <title><![CDATA[PHP CURL使用]]></title>
    <url>%2F2018%2F02%2F01%2Fphp%2Fphp-curl-usage.html</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627282930313233343536373839curl_setopt($ch, CURLOPT_HTTPHEADER, array('X-FORWARDED-FOR:111.222.333.4', 'CLIENT-IP:111.222.333.4')); // 伪造IP curl_setopt($ch, CURLOPT_REFERER, "http://www.test.com"); // 伪造来源 curl_setopt($ch, CURLOPT_PROXY, "http://111.222.333.4:110"); // 使用代理访问curl_setopt($ch,CURLOPT_ENCODING , "gzip"); // 解开gzip网页文件 function gunzip($zipped) &#123; $offset = 0; if (substr($zipped,0,2) == "\x1f\x8b") $offset = 2; if (substr($zipped,$offset,1) == "\x08") &#123; # file_put_contents("tmp.gz", substr($zipped, $offset - 2)); return gzinflate(substr($zipped, $offset + 8)); &#125; return "Unknown Format"; &#125; $headers_enabled = 1; curl_setopt($c, CURLOPT_HEADER, $headers_enabled) $ret = curl_exec($c); if ($headers_enabled) &#123; # file_put_contents("preungzip.html", $ret); $sections = explode("\x0d\x0a\x0d\x0a", $ret, 2); while (!strncmp($sections[1], 'HTTP/', 5)) &#123; $sections = explode("\x0d\x0a\x0d\x0a", $sections[1], 2); &#125; $headers = $sections[0]; $data = $sections[1]; if (preg_match('/^Content-Encoding: gzip/mi', $headers)) &#123; printf("gzip header found\n"); return gunzip($data); &#125; &#125; return $ret; 参考 Decode gzipped web page retrieved via cURL in PHP curl_setopt]]></content>
      <categories>
        <category>php</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[PHP INI配置]]></title>
    <url>%2F2018%2F02%2F01%2Fphp%2Fphp-ini-setting.html</url>
    <content type="text"><![CDATA[ini_set相关配置时区 配置文件：date.timezone = Asia/Shanghai php文件中配置：date_default_timezone_set(&#39;Asia/Shanghai&#39;); 和 ini_set(&#39;date.timezone&#39;,&#39;Asia/Shanghai&#39;);;]]></content>
      <categories>
        <category>php</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Awesome PHP]]></title>
    <url>%2F2018%2F01%2F31%2Fawesome-tools%2Fawesome-php.html</url>
    <content type="text"><![CDATA[操作类DB操作类 PHP Mysqli 操作类 网络工具 php Ping 检查 开源系统 WeMall商城: wemall7.0 开源系统，基于thinkphp5开发，支持composer，优化核心，减少依赖，基于全新的架构思想和命名空间。同类的用node.js开发的如wemall]]></content>
  </entry>
  <entry>
    <title><![CDATA[Awesome API]]></title>
    <url>%2F2018%2F01%2F31%2Fawesome-tools%2Fawesome-api.html</url>
    <content type="text"><![CDATA[API标准API测试工具 RAP2: 阿里妈妈前端团队出品的开源接口管理工具RAP第二代 http://rap2.taobao.org]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux之文件查找find]]></title>
    <url>%2F2018%2F01%2F30%2Flinux%2Flinux-find.html</url>
    <content type="text"><![CDATA[find参数 -print0 : 不换行输出内容，也可以理解\0 是定界符 使用 查找某个字符串在目录下出现次数 1find &lt;directory&gt; -type f -name "*.php" | xargs grep "&lt;strings&gt;" 是你要找的文件夹；如果是当前文件夹可以省略-type f 说明，只找文件-name “*.c” 表示只找C语言写的代码，从而避免去查binary；也可以不写，表示找所有文件是你要找的某个字符串]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>find</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书《PHP实战》]]></title>
    <url>%2F2018%2F01%2F25%2Fbooks%2Fphp-in-action.html</url>
    <content type="text"><![CDATA[PreviewContent第一部分：工具和概念第一部分中的几章循序渐进，从 PHP 面向对象编程的具体细节讲到面向对象应用程序设计这个更抽象的主题。 第 1 章介绍并讨论了 PHP 和敏捷实践的利弊。 第 2 章和第 3 章解释 PHP 面向对象编程的机制和语法。尽管对象和类是难以分割的东西，但是第 2 章主要关注对象的特性，而第 3 章则重点关注类。 第 4 章讨论了对象和类的概念好在哪里，它们如何与现实世界产生联系，以及如何区分面向对象设计的优劣。 第 5 章讨论最基本的类的关系一继承、关联和组合，以及程序设计中接口的作用。 第 6 章开始我们正式探索面向对象设计，将面向对象理论作为设计的指导思想。 第 7 章介绍设计模式再现常见设计问题的解决方案，并且描述一些最常见的问题。 第 8 章介绍设计原则和模式在处理日期和时间时的另一种应用。 第一部分 工具和概念第1章 PHP与现代软件开发1.1作者写这本书时是php5.3版本，而现在php版本已经到7.2了，所以里面有不少东西是“过时”的，最大的特点是他在描述php的优点和缺点时，更加凸显出php社区变化之快。至少现在看，里面有不少观点是不可苟同的了。对于此我这边来整理下我所理解的PHP缺点： 缺少类型安全由于php的松散类型，导致了php写程序的时候要做很多安全的判断，不然就当韭菜了，典型的一个例子如, 在编程的时候不应该使用如下的这段代码：123if(intval($a)&gt;1000) &#123; mysql_query("select * from news where id=".$a)&#125; 这个时候$a的值有可能是1002 union….. 不像c、java那样需要严格定义好类型的php，注定写代码的时候多留点心眼咯！ 另外有其他缺点补充的欢迎评论区说明！ 1.2先引用问中的一段话把： 本节将简略介绍敏捷开发[^xp]和面向对象设计中最重要的思想。我们将介绍设计模式、重构和单元测试，了解它们的工作原理以及如何互相配合，并能开始看到如何在 PHP 中实现它们。 虽然有点不太通顺，但这句话感动了我，让我有看下去的冲动了！作者先是权衡了【敏捷开发】和 普通开发的思路，但这些都不是最解决问题的理想方法。他承诺了一句: 我们开出的成功处方是将最佳方法与最好的软件工具相结合，而在我们看来，最好的软件工具就是 PHP。下面我们看一下 PHP 5 是如何与方法论联系起来的。。好，让我们拭目以待！ 敏捷开发的一些基本元素之间的彼此依赖关系如下： ch1相关参考 浅析C++中的is-a和has-a关系（公有继承、包含、私有继承） Is-a 第2章 PHP中的对象 [^xp]敏捷方法论【如极限编程（Extreme Programming, XP）】尝试着用这样的方式来解决这个问题：只进行较少的前期设计，确保一直能够对设计进行更改，并使用重构（refactoring）这样一套系统的过程来不断改善代码的结构。[^TDD]TDD(test-driven development，测试驱动开发）或测试先行开发（test-first develop- pment）]]></content>
      <categories>
        <category>books</category>
      </categories>
      <tags>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux之文件操作]]></title>
    <url>%2F2018%2F01%2F17%2Flinux%2Flinux-files.html</url>
    <content type="text"><![CDATA[统计目录大小 du -hs * find . -maxdepth 1 -type d -mindepth 1 -exec du -hs {} \;]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[主机系统调研]]></title>
    <url>%2F2018%2F01%2F17%2Ftopic%2Fhost-system-research.html</url>
    <content type="text"><![CDATA[目前比较流行的主机管理系统有whmcs和IDCSystem，前者主要服务linux后者主要是用在windows系列的虚拟主机中。由于业务的需要，在没有盈利的情况下只能搞些第三方破解的主机管理系统了。 一、系统说明和版本WHMCS版本说明： v5.x v6.x v7.x 参考网站： ToSpeed IDCSystem 版本说明： 参考网站： 主机分享 - 众筹IDC组织 二、插件生态三、一些可行性计划]]></content>
      <categories>
        <category>research</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Awesome Tools]]></title>
    <url>%2F2018%2F01%2F16%2Fawesome-tools%2Findex.html</url>
    <content type="text"><![CDATA[All IN One 说明 表示 开源软件 ，点击进入 开源 仓库； 表示 免费 使用，或者个人 免费 ； 表示 热门 的软件； 表示 推荐 的软件； 表示 装机必备 的软件； 表示 App store 连接地址; 表示 强烈推荐 的必装神器，数量来表达强烈的程度；]]></content>
      <categories>
        <category>tools</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[MySQL密码重置]]></title>
    <url>%2F2018%2F01%2F16%2Fsql%2Fmysql-reset-password.html</url>
    <content type="text"><![CDATA[mysql忘记密码时需要用到参数skip-grant-tables，可以在配置文件中，也可以在mysqld执行的时候带上该参数。 操作步骤类似：vi /etc/my.cnf 在[mysqld]的段中加上一句：skip-grant-tables 保存并且退出vi。重启mysqld，就可以通过root无密码方式进入mysql报表，再进行密码重置： 1234567USE mysql;UPDATE user SET Password = password ( &apos;new-password&apos; ) WHERE User = &apos;root&apos;;flush privileges ; quit;-- mysql 5.7:SET PASSWORD FOR &apos;root&apos;@&apos;localhost&apos; = PASSWORD(&apos;root&apos;); 重置后，记得重启mysqld！ 还有更多方法，参考：http://blog.51cto.com/lxsym/477027]]></content>
      <categories>
        <category>mysql</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Linux安全日志操作]]></title>
    <url>%2F2018%2F01%2F16%2Flinux%2Flinux-system-logs.html</url>
    <content type="text"><![CDATA[last : 查看登录成功的用户信息 最新的登录记录在最前面，所以可以用 一下命令来查看。 last | less lastb:查看登录失败的用户信息 tail /var/log/secure: 查看登录日志]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Linux磁盘操作命令]]></title>
    <url>%2F2018%2F01%2F10%2Flinux%2Flinux-disk-manage.html</url>
    <content type="text"><![CDATA[查看硬盘分区: fdisk -l查看数据盘的文件系统类型: df -ihT 磁盘格式说明： ext4 ： centos6默认盘格式xfs : centos7默认盘格式 12345678910111213# 数据盘设置为ext4文件格式（CentOS6的默认文件系统格式）：mkfs -t ext4 /dev/vdb mount /dev/vdb /data/#编辑/etc/fstab，将对应配置写入fatab/dev/vdb /data ext4 defaults,noatime 0 0# 将数据盘设置为xfs格式（CentOS7的默认文件系统格式）：mkfs.xfs /dev/vdbmount -t xfs /dev/vdb /data# 编辑/etc/fstab，加入如下内容/dev/vdb /data xfs defaults,noatime 0 0# /dev/sdb /data xfs defaults,noatime 0 0 参考： https://docs.ucloud.cn/compute/uhost/guide/disk]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Awesome Spider]]></title>
    <url>%2F2018%2F01%2F05%2Fawesome-tools%2Fawesome-spider.html</url>
    <content type="text"><![CDATA[关于爬虫采集的一些好工具： Anti-Anti-Spider Discuz自动上传附件，发帖，注册用户，留言，顶帖等自动化工具 模拟登录wap版百度贴吧，定时刷新指定贴吧，抢先二楼回复;贴吧签到 百度贴吧工具类]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>spider</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Awesome Mac]]></title>
    <url>%2F2018%2F01%2F05%2Fawesome-tools%2Fawesome-mac.html</url>
    <content type="text"><![CDATA[Dock相关 HyperDock: 让Mac拥有 Windows 的窗口预览和管理体验。 媒体报道 参考 awesome-mac]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[feed订阅配置]]></title>
    <url>%2F2018%2F01%2F04%2Ftools%2Ffeed-setting.html</url>
    <content type="text"><![CDATA[mark: 12Feedly: https://www.feedly.com/home#subscription/feed/%sinoreader: http://www.inoreader.com/feed/%s]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>feed</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nextcloud折腾笔记]]></title>
    <url>%2F2018%2F01%2F04%2Ftools%2Fnextcloud-usage.html</url>
    <content type="text"><![CDATA[NextCloud是php开源的私有网盘管理工具，支持app和web，这里说下其安装及使用 一、安装Nextcloud1.1 服务端安装1.2 客户端安装 ios: https://itunes.apple.com/us/app/nextcloud/id1125420102?mt=8 andriod : &lt;&gt;]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>disk</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Composer Note]]></title>
    <url>%2F2017%2F12%2F26%2Fcomposer-note.html</url>
    <content type="text"><![CDATA[Composer 是 PHP 的一个依赖管理工具，类似于node.js的npm，相关收录的php包可以在packagist找到。下面是composer常用到的资源库，mark在笔记最前方便查阅 packagist version composer v1.5.5 : 截止2017-12-26前的最新版； composer v1.2: 一、安装composer123456789101112$ macbrew install composer$ linuxcurl -sS https://getcomposer.org/installer | phpsudo mv composer.phar /usr/local/bin/composer$ windows$ 下载安装 https://getcomposer.org/Composer-Setup.exe$ 或者下载phar文件php -r "readfile('https://getcomposer.org/installer');" | phpecho @php "%~dp0composer.phar" %*&gt;composer.bat 二、composer配置2.1 镜像的配置packagist 是 Composer 的主要资源库。 一个 Composer 的库基本上是一个包的源：记录了可以得到包的地方。Packagist 的目标是成为大家使用库资源的中央存储平台。由于国内网络的问题composer源可以替换回国内, 操作方法如下 设置为全局 composer config repo.packagist composer https://packagist.phpcomposer.com composer 全量中国镜像：http://pkg.phpcomposer.com/ 应用内设置 上述命令将会在当前项目中的 composer.json 文件的末尾自动添加镜像的配置信息（你也可以自己手工添加）： 123456"repositories": &#123; "packagist": &#123; "type": "composer", "url": "https://packagist.phpcomposer.com" &#125;&#125; 2.2 配置语法关于 require Key配置第一件事情（并且往往只需要做这一件事），你需要在 composer.json 文件中指定 require key 的值。你只需要简单的告诉 Composer 你的项目需要依赖哪些包。 12345&#123; "require": &#123; "monolog/monolog": "1.0.*" &#125;&#125; 关于包名称和包版本可以参考文章http://docs.phpcomposer.com/01-basic-usage.html#Package-Names 更多配置内容请参考 composer.json 架构 三、使用composer3.1 composer基础命令使用12345678910111213141516171819202122$ 一些帮助命令composer helpcomposer listcomposer help require$ composer 安装composer init$ 引入composercomposer require monolog/monolog$ 创建项目语法：composer create-project 名称 目录 版本 参数composer create-project slim/slim slim-2.6.2 2.6.2composer create-project laravel/laravel learnlaravel5 5.2.31 --prefer-dist # 使用composer安装laravel# 说明--prefer-dist：强制使用压缩包，而不是克隆源代码composer install --no-dev # 非开发环境，不执行require-dev的包安装php composer.phar update # 更新包 同 composer updatephp composer.phar update monolog/monolog [...] # 只更新指定的依赖包 跟多关于composer的命令可以在这里看：http://docs.phpcomposer.com/03-cli.html 3.2 php使用composer1) 自动加载对于库的自动加载信息，Composer 生成了一个 vendor/autoload.php 文件。你可以简单的引入这个文件，你会得到一个自由的自动加载支持。 1require 'vendor/autoload.php'; 这使得你可以很容易的使用第三方代码。例如：如果你的项目依赖 monolog，你就可以像这样开始使用这个类库，并且他们将被自动加载。1234$log = new Monolog\Logger('name');$log-&gt;pushHandler(new Monolog\Handler\StreamHandler('app.log', Monolog\Logger::WARNING));$log-&gt;addWarning('Foo'); 另外还有其他方法实现composer的自动加载，方法如下 可以在 composer.json 的 autoload 字段中增加自己的 autoloader。12345&#123; "autoload": &#123; "psr-4": &#123;"Acme\\": "src/"&#125; &#125;&#125; Composer 将注册一个 PSR-4 autoloader 到 Acme 命名空间。添加 autoload 字段后，你应该再次运行 install 命令来生成 vendor/autoload.php 文件。 将包含调用的返回值存储在变量中，并添加更多的命名空间。这对于在一个测试套件中自动加载类文件是非常有用的，例如:12$loader = require 'vendor/autoload.php';$loader-&gt;add('Acme\\Test\\', __DIR__); 3.3 升级composer123composer selfupdateUse composer self-update --rollback to return to version 66efc9af8601234b8ab3a5fb91cfa7a2f30e9bbd 3.4 卸载包 语法composer global remove {包名}，比如composer global remove phpunit/phpunit 四、composer实战4.1 使用composer配置laravel123# 安装指定版本的laravelcomposer create-project laravel/laravel=5.1.* myProject 参考 https://www.kancloud.cn/thinkphp/composer/35668 https://my.oschina.net/zhuyajie/blog/506025]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>composer</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[下载工具合集]]></title>
    <url>%2F2017%2F12%2F26%2Ftools%2Fdownload-tookit.html</url>
    <content type="text"><![CDATA[1、由于业务发展上的调整，“QQ旋风”将于2017年9月6日停止运营2、迅雷关闭远程离线下载 如上，很多之前提供下载的工具由于种种原因怕是要关闭的，下面是一些备用的推荐工具以供选择： 1、百度网盘2、free download manager 不支持ed2khttp://www.freedownloadmanager.org/ 3、Persepolis Download Manager 是一款即开即用的 aria2 客户端，用来下载网络上的文件，支持 HTTP / HTTPS，FTP，SFTP，BitTorrent 和 Metalink 等协议https://persepolisdm.github.io/https://github.com/persepolisdm/persepolis 4、https://webtorrent.io/ best of the worldhttps://instant.io/]]></content>
      <categories>
        <category>tools</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Windows常用工具快捷命令]]></title>
    <url>%2F2017%2F12%2F25%2Fwindows%2Fwindow-cli-usage.html</url>
    <content type="text"><![CDATA[Ctrl + r调用出此命令, 但里面常用的应用有: mstsc: 远程桌面 sysdm.cpl : 系统属性]]></content>
      <categories>
        <category>Journal</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[WHOIS查询]]></title>
    <url>%2F2017%2F12%2F22%2Ftools%2Fwhois.html</url>
    <content type="text"><![CDATA[1234567891011121314151617181920212223242526272829303132&lt;?php/** * whois查询接口 * * 参考: http://stackoverflow.com/questions/3072247/free-open-source-whois-api * http://www.cnblogs.com/case/articles/1883737.html * http://apidoc.chaxun.la/WHOIS%E6%9F%A5%E8%AF%A2API *//** * 查询域名可用 * url: http://panda.www.net.cn/cgi-bin/check.cgi?area_domain=&#123;$domian&#125; * 返回状态说明: * 200: *//** * whois info查询 * url: http://whois.hichina.com/whois/api_whois?host=&#123;$doname&#125;&amp;open=0 * post数据: *//** * http://whomsy.com/api/biaomeng.net * 说明文档:http://whomsy.com/apidoc */]]></content>
      <categories>
        <category>php</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[PHP使用SQLite扩展]]></title>
    <url>%2F2017%2F12%2F22%2Fphp%2Fphp-sqlite-usage.html</url>
    <content type="text"><![CDATA[开启sqlite一. Windows下开启sqlite: extension=php_pdo.dll extension=php_sqlite.dll 二. Unix/Linux下开启sqlite: 是编译的时候添加: --with-sqlite=shared 在安装后添加的编译: tar xvf php-your.version.here.tar.gz cd php-your.version.here/ext/sqlite/ phpize ./configure make make install ##]]></content>
      <categories>
        <category>php</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[PHP设计模式]]></title>
    <url>%2F2017%2F12%2F22%2Fphp%2Fphp-design-pattern.html</url>
    <content type="text"><![CDATA[我们常用的php设计模式有: 单例模式) 单例模式) Interpreter(解释器模式)Factory(工厂模式)Facade(外观模式)Decorator(装饰模式)Builder(建造者模式)Adapter(适配器模式)Template (模板模式)Command(命令模式)Singleton(单例模式)单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类我们称之为单例类。 单例模式的要点有三个： 是某个类只能有一个实例； 是它必须自行创建这个实例； 是它必须自行向整个系统提供这个实例。 为什么要使用PHP单例模式？ 多数 人都是从单例模式的字面上的意思来理解它的用途, 认为这是对系统资源的节省, 可以避免重复实例化, 是一种”计划生育”. 而PHP每次执行完页面都是会从内存中清理掉所有的资源. 因而PHP中的单例实际每次运行都是需要重新实例化的, 这样就失去了单例重复实例化的意义了. 单单从这个方面来说, PHP的单例的确有点让各位失望. 但是单例仅仅只有这个功能和应用吗? 答案是否定的,我们一起来看看。 php的应用主要在于数据库应用, 所以一个应用中会存在大量的数据库操作, 在使用面向对象的方式开发时(废话), 如果使用单例模式, 则可以避免大量的new 操作消耗的资源。 如果系统中需要有一个类来全局控制某些配置信息, 那么使用单例模式可以很方便的实现. 这个可以参看zend Framework的FrontController部分。 在一次页面请求中, 便于进行调试, 因为所有的代码(例如数据库操作类db)都集中在一个类中, 我们可以在类中设置钩子, 输出日志，从而避免到处var_dump, echo。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;?php /*** 设计模式之单例模式* $_instance必须声明为静态的私有变量* 构造函数和析构函数必须声明为私有,防止外部程序new* 类从而失去单例模式的意义* getInstance()方法必须设置为公有的,必须调用此方法* 以返回实例的一个引用* ::操作符只能访问静态变量和静态函数* new对象都会消耗内存* 使用场景:最常用的地方是数据库连接。 * 使用单例模式生成一个对象后，* 该对象可以被其它众多对象所使用。 */class Example&#123;//保存例实例在此属性中private static $_instance;//构造函数声明为private,防止直接创建对象private function __construct()&#123;echo 'I am Construceted';&#125;//单例方法public static function singleton()&#123;if(!isset(self::$_instance))&#123;$c=__CLASS__;self::$_instance=new $c;&#125;return self::$_instance;&#125; //阻止用户复制对象实例public function __clone()&#123;trigger_error('Clone is not allow' ,E_USER_ERROR);&#125;function test()&#123;echo("test");&#125;&#125;// 这个写法会出错，因为构造方法被声明为private$test = new Example;// 下面将得到Example类的单例对象$test = Example::singleton();$test-&gt;test();// 复制对象将导致一个E_USER_ERROR.$test_clone = clone $test;?&gt; Observer(观察者模式)Strategy(策略模式)Visitor (访问者模式)Memento (备忘录模式)Prototype (原型模式)Mediator (中介者模式)FlyWeight (享元模式)Chain Of Responsibility (职责链模式)Bridge (桥接模式)Proxy (代理模式)State (状态模式)Composite (组合模式)Interator (迭代器模式) 解释 参考文章 php设计模式 (总结) PHP单例模式（转载） PHP设计模式笔记：使用PHP实现单例模式]]></content>
      <categories>
        <category>php</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[PHP使用redis]]></title>
    <url>%2F2017%2F12%2F22%2Fphp%2Fphp-redis-usage.html</url>
    <content type="text"><![CDATA[Redis简介: 是一个key-value存储系统,和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)和zset(有序集 合)。这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步. window下安装使用redis需要文件: PHP官方Redis扩展下载 win下Redis程序(32位,在目录/bin中) Win下Redis程序(64位) 解压下redis,有如下文件: redis-server.exe：服务程序 redis-check-dump.exe：本地数据库检查 redis-check-aof.exe：更新日志检查 redis-benchmark.exe：性能测试，用以模拟同时由N个客户端发送M个 SETs/GETs 查询 (类似于 Apache 的ab 工具). windows下 使用redis安装好redis后可以在cmd中运行{dir}\redis-server.exe运行redis服务.运行后redis服务端后,可以在cmd通过redis-cli.exe -h 127.0.0.1 -p 6379来运行客户端 简单测试: 1234redis 127.0.0.1:6379&gt; set mykey somevalueOKredis 127.0.0.1:6379&gt; get mykey"somevalue" 如何添加值到list: 123456789101112131415redis 127.0.0.1:6379&gt; lpush mylist val1(integer) 1redis 127.0.0.1:6379&gt; lpush mylist val2(integer) 2redis 127.0.0.1:6379&gt; lpush mylist val3(integer) 3redis 127.0.0.1:6379&gt; lpush mylist val4(integer) 4redis 127.0.0.1:6379&gt; lrange mylist 0 -1 1&gt; val1 2&gt; val2 3&gt; val3 4&gt; val4redis 127.0.0.1:6379&gt; rpop mylist "val1" redis-benchmark.exe：性能测试，用以模拟同时由N个客户端发送M个 SETs/GETs 查询 (类似于 Apache 的 ab 工具). 1D:\wnmp\redis&gt;redis-benchmark -n 100000 –c 50 linux下安装使用redis 参考 http://my.oschina.net/lujianing/blog/204103]]></content>
      <categories>
        <category>php</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[PHP正则使用]]></title>
    <url>%2F2017%2F12%2F22%2Fphp%2Fphp-preg.html</url>
    <content type="text"><![CDATA[正则中的一些概念元字符12345678910111213. 匹配除换行符意外的任意字符\w 匹配字母或数字或下划线\s 匹配任意的空白符\d 匹配数字\b 匹配单词的开始或结束^ 匹配字符串的开始$ 匹配字符串的结束[x] 匹配x字符，如匹配字符串中的 a、b 和 c 字符\W \w的反义，即匹配任意非字母，数字，下划线和汉字的字符\S \s的反义，即匹配任意非空白符的字符\D \d的反义，即匹配任意非数字的字符\B \b的反义，即不是单词开头或结束的位置[^x] 匹配除了 x 意外的任意字符，如 [^abc] 匹配除了 abc 这几个字母之外的任意字符 重复123456* 重复零次或更多次+ 重复 1 次或更多次? 重复零次或 1 次&#123;n&#125; 重复 n 次&#123;n,&#125; 重复 n 次或更多次&#123;n,m&#125; 重复 n 到 m 次 模式修正符123456789i 模式中的字符将同时匹配大小写字母m 字符串视为多行s 将字符串视为单行，换行符作为普通字符x 将模式中的空白忽略e preg_replace() 函数在替换字符串中对逆向引用作正常的替换，将其作为 PHP 代码求值，并用其结果来替换所搜索的字符串。A 强制仅从目标字符串的开头开始匹配D 模式中的 $ 元字符仅匹配目标字符串的结尾U 匹配最近的字符串u 模式字符串被当成 UTF-8 PHP正则函数在 PHP 应用中，正则表达式主要用于： 正则匹配：根据正则表达式匹配相应的内容 正则替换：根据正则表达式匹配内容并替换 正则分割：根据正则表达式分割字符串 PHP 正则表达式匹配 preg_match 与 preg_match_all 函数preg_match()preg_match() 函数用于进行正则表达式匹配，成功返回 1 ，否则返回 0 。 语法： int preg_match( string pattern, string subject [, array matches ] ) 参数说明： pattern 正则表达式 subject 需要匹配检索的对象 matches 可选，存储匹配结果的数组， $matches[0] 将包含与整个模式匹配的文本，$matches[1] 将包含与第一个捕获的括号中的子模式所匹配的文本，以此类推 preg_match_all()preg_match_all() 函数用于进行正则表达式全局匹配，成功返回整个模式匹配的次数（可能为零），如果出错返回 FALSE 。 语法： int preg_match_all( string pattern, string subject, array matches [, int flags ] ) 参数说明:pattern: 正则表达式subject: 需要匹配检索的对象matches: 存储匹配结果的数组flags: 可选，指定匹配结果放入 matches 中的顺序，可供选择的标记有： 1. PREG_PATTERN_ORDER：默认，对结果排序使 $matches[0] 为全部模式匹配的数组，$matches[1] 为第一个括号中的子模式所匹配的字符串组成的数组，以此类推 2. PREG_SET_ORDER：对结果排序使 $matches[0] 为第一组匹配项的数组，$matches[1] 为第二组匹配项的数组，以此类推 3. PREG_OFFSET_CAPTURE：如果设定本标记，对每个出现的匹配结果也同时返回其附属的字符串偏移量 部分实例1234567891011121314151617//1，过滤所有html标签的正则表达式：&lt;/?[^&gt;]+&gt;//2，过滤所有html标签的属性的正则表达式：$html = preg_replace("/&lt;([a-zA-Z]+)[^&gt;]*&gt;/","&lt;\\1&gt;",$html);//3，过滤部分html标签的正则表达式的排除式（比如排除&lt;p&gt;，即不过滤&lt;p&gt;）：&lt;/?[^pP/&gt;]+&gt;//4，过滤部分html标签的正则表达式的枚举式（比如需要过滤&lt;a&gt;&lt;p&gt;&lt;b&gt;等）：&lt;/?[aApPbB][^&gt;]*&gt;//5，过滤部分html标签的属性的正则表达式的排除式（比如排除alt属性，即不过滤alt属性）：\s(?!alt)[a-zA-Z]+=[^\s]*//6，过滤部分html标签的属性的正则表达式的枚举式（比如alt属性）：(\s)alt=[^\s]* 正则表达式中排除不需要匹配的字符串或字符(1)排除不需要匹配的某个字符： 例： [^\w] 排除匹配中的一个数字或字符串 (2) 排除匹配中不需要的字符串：例：(?!元宝商城|游戏特权|图说新游|多玩策划|新游视频|娱乐视频|多玩演播室|多玩画报) 加上|用于或选择。上面列出的字符串都不会参与匹配 常用正则 删除空行: \r\n\r\n =&gt; \r\n\ 删除有空格的空行: ^ +$ =&gt;]]></content>
      <categories>
        <category>php</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Python语言]]></title>
    <url>%2F2017%2F12%2F22%2Fpython%2Flearn-python.html</url>
    <content type="text"><![CDATA[Python笔记 变量类型数字字符串123456789101112my_var= "string"str(1.2)len(my_var)my_var.lower()my_var.upper()my_var.isalpha() # 是否是字母(纯字母)word = my_var + len(my_var) # 字符串拼接# 字符串索引 word = "python"print word[2] # 输出tprint word[1:4] # 输出ytho 时间处理库首先要引入时间处理库才能使用其相关的函数: from datetime import datetime 123456789now = datetime.now() # 获取当前时间格式如: 2014-05-30 07:44:47.352977# 获取指定时间print now.year # 输出年 2014print now.month # 输出月 5, 没有前导0print now.day # 输出日期 30print now.hour # print now.minute # print now.second # print '%s/%s/%s %s:%s:%s' % ( now.month, now.day, now.year, now.hour, now.minute, now.second) # Grand Finale Datetime 控制结构布尔操作(Boolean Operators)比较运算(comparators): ==, !=, &gt;, &gt;=, &lt;, 和 &lt;=12bool_1 = 100 == (2*50) # Truebool_2 = 99!=(98+1) # False not|and|or 逻辑判断优先级: not &gt; and &gt; or True or not False and False # returns True. if流程控制12345678910111213# 判断一if 8 &gt; 9: print "I don't printed!"else: print "I get printed!"# 判断二if 8 &gt; 9: print "I don't get printed!"elif 8 &lt; 9: print "I get printed!"else: print "I also don't get printed!" 一些测试范例12 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253class Handler: ''' ''' def callback(self, prefix, name, *args): method = getattr(self,prefix+name,None) if callable(method): return method(*args) def start(self, name): self.callback('start_', name) def end(self, name): self.callback('end_', name) def sub(self, name): def substitution(match): result = self.callback('sub_', name, match) if result is None: match.group(0) return result return substitutionclass HTMLRenderer(Handler): ''' ''' def start_document(self): print '&lt;html&gt;&lt;head&gt;&lt;title&gt;...&lt;/title&gt;&lt;/head&gt;&lt;body&gt;' def end_document(self): print '&lt;/body&gt;&lt;/html&gt;' def start_paragraph(self): print '&lt;p&gt;' def end_paragraph(self): print '&lt;/p&gt;' def start_heading(self): print '&lt;h2&gt;' def end_heading(self): print '&lt;/h2&gt;' def start_list(self): print '&lt;ul&gt;' def end_list(self): print '&lt;/ul&gt;' def start_listitem(self): print '&lt;li&gt;' def end_listitem(self): print '&lt;/li&gt;' def start_title(self): print '&lt;h1&gt;' def end_title(self): print '&lt;/h1&gt;' def sub_emphasis(self, match): return '&lt;em&gt;%s&lt;/em&gt;' % match.group(1) def sub_url(self, match): return '&lt;a href="%s"&gt;%s&lt;/a&gt;' % (match.group(1),match.group(1)) def sub_mail(self, match): return '&lt;a href="mailto:%s"&gt;%s&lt;/a&gt;' % (match.group(1),match.group(1)) def feed(self, data): print data 计划安排学习时间安排： Python基础 2014/5/30 ~ 2014/6/30 学习Python主要参考资料: https://docs.python.org/2/ http://www.codecademy.com/zh/tracks/python http://www.pythondoc.com/pythontutorial27/index.html http://sebug.net/paper/python/ http://www.w3cschool.cc/python/python-tutorial.html 一. Python基础教程1.1 调用python解析器1). 在windows中运行pytion脚本 设置环境变量: set path=%path%;C:\python27 2). 在unix中运行pytion脚本 首行添加:#! /usr/bin/env python然后执行shellchmod +x myscript.py运行 ./myscript.py 就可以编译python脚本. 二、多行语句Python语句中一般以新行作为为语句的结束符。 但是我们可以使用斜杠（ \）将一行的语句分为多行显示，如下所示：123total = item_one + \ item_two + \ item_three 语句中包含[], {} 或 () 括号就不需要使用多行连接符。如下实例：12days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'] Python 引号Python 接收单引号(‘ )，双引号(“ )，三引号(‘’’ “””) 来表示字符串，引号的开始与结束必须的相同类型的。 其中三引号可以由多行组成，编写多行文本的快捷语法，常用语文档字符串，在文件的特定地点，被当做注释。1234word = 'word'sentence = "This is a sentence."paragraph = """This is a paragraph. It ismade up of multiple lines and sentences.""" Python注释python中单行注释采用 # 开头。python没有块注释，所以现在推荐的多行注释也是采用的 # ##Python空行函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。 空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。 记住：空行也是程序代码的一部分。 等待用户输入raw_input函数按回车键后就会等待用户输入： raw_input(“\n\nPress the enter key to exit.”) 同一行显示多条语句Python可以在同一行中使用多条语句，语句之间使用分号(;)分割，以下是一个简单的实例： import sys; x = ‘foo’; sys.stdout.write(x + ‘\n’) 变量类型变量存储在内存中的值。这就意味着在创建变量时会在内存中开辟一个空间。基于变量的数据类型，解释器会分配指定内存，并决定什么数据可以被存储在内存中。因此，变量可以指定不同的数据类型，这些变量可以存储整数，小数或字符。 python允许同时为多个变量赋值: 为多个变量赋同个值: a = b = c = 1 多个对象指定多个变量: a, b, c = 1, 2, “john” Python有五个标准的数据类型： Numbers（数字） String（字符串） List（列表） Tuple（元组） Dictionary（字典） 数字字符串123456789101112my_var= "string"str(1.2)len(my_var)my_var.lower()my_var.upper()my_var.isalpha() # 是否是字母(纯字母)word = my_var + len(my_var) # 字符串拼接# 字符串索引 word = "python"print word[2] # 输出tprint word[1:4] # 输出ytho 函数函数的定义由3部分组成: header头, 包含 def函数定义关键字, 函数名 和 参数(parameters): def tax(bill): 注释,说明函数作用, 在函数header头第二行 函数主体(body), 必须使用缩进 1234567def tax(bill): """Adds 8% tax to a restaurant bill.""" bill *= 1.08 print "With tax: %f" % bill return billmeal_with_tax = tax(100) 时间处理库首先要引入时间处理库才能使用其相关的函数: from datetime import datetime 123456789now = datetime.now() # 获取当前时间格式如: 2014-05-30 07:44:47.352977# 获取指定时间print now.year # 输出年 2014print now.month # 输出月 5, 没有前导0print now.day # 输出日期 30print now.hour # print now.minute # print now.second # print '%s/%s/%s %s:%s:%s' % ( now.month, now.day, now.year, now.hour, now.minute, now.second) # Grand Finale Datetime 控制结构布尔操作(Boolean Operators)比较运算(comparators): ==, !=, &gt;, &gt;=, &lt;, 和 &lt;=12bool_1 = 100 == (2*50) # Truebool_2 = 99!=(98+1) # False not|and|or 逻辑判断优先级: not &gt; and &gt; or True or not False and False # returns True. if流程控制12345678910111213# 判断一if 8 &gt; 9: print "I don't printed!"else: print "I get printed!"# 判断二if 8 &gt; 9: print "I don't get printed!"elif 8 &lt; 9: print "I get printed!"else: print "I also don't get printed!" while语句]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Linux文件操作命令之局域共享samba]]></title>
    <url>%2F2017%2F12%2F22%2Flinux%2Flinux-samba.html</url>
    <content type="text"><![CDATA[samba简写smb, 是linux下局域网共享服务. 安装samba12345678yum -y install samba # yum安装smbrpm -qa | grep samba # 查看smb是否安装whereis samba # 查看smb目录目录chkconfig smb on # 开机自启smb服务chkconfig --list smb # 确认 Samba 启动标签，确认 2-5 为 on 的状态/etc/rc.d/init.d/smb start # 启动 Samba 服务 添加防火墙规则: vi /etc/sysconfig/iptables # 写入: -A INPUT -m state --state NEW -m tcp -p tcp --dport 139 -j ACCEPT -A INPUT -m state --state NEW -m tcp -p tcp --dport 445 -j ACCEPT -A INPUT -p udp -m udp --dport 137 -j ACCEPT -A INPUT -p udp -m udp --dport 138 -j ACCEPT samba配置 vi /etc/samba/smb.conf [global]workgroup = 工作组server string = 描述log file = 日志位置max log size = 日志最大大小 KBsecurity = user 安全等级user 使用samba用户登录。注意：samba用户由系统用户转变过来。要把用户生成为samba用户，此用户必须已经是系统用户share 不用密码server 使用验证服务器验证domain 域控制器验证 ·share definitions 共享设置 [共享目录名]commetn = 目录描述browseable = yes 目录是否对没有权限的用户可见writeable = yes 可写（要与系统目录权限相与）valid users = 用户名 用户限制（目录是哪个用户所有）path = /www 指定共享目录位置 添加samba用户smbpasswd -a username # 添加samba用户, 用户名必须存在系统用户名中 smbpasswd -x username # 删除samba用户 pdbedit -L 查看samba用户 添加用户和目录后,确认目录下用户的权限: mkdir /pub mkdir /soft chmod 777 /pub chmod 700 /soft chown aa /soft service smb restart 注意: samba权限和系统权限取最严格权限 samba用户必须是系统用户 启动的服务名是smb 客户端使用 windows： 文件夹地址栏: \\192.168.56.220\www 如果修改了密码或用户后,验证信息错误,可以在dos下删除缓存 net use * /del 删除缓存 net use * /del /y 或 net use \\{servename} /del /y net use \\{servername} /user:{username} {password} linux客户端： smbclient //192.168.140.253/soft -U aa]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[MySQL数据备份&导入]]></title>
    <url>%2F2017%2F12%2F22%2Fsql%2Fmysql-dump-and-source.html</url>
    <content type="text"><![CDATA[mysqldump语法： mysqldump按条件查找：mysqldump按条件查找的参数是 -where/-w，例子如： mysqldump -uroot -p123456 dbname table_name -where “id&gt;90” &gt; ~/db.sql 常见问题: 在win下导入sql文件乱码问题中文cmd中默认的编码格式是gbk,直接导入linux下导出的utf8编码的文件会出现乱码,故需要特别指定下编码的格式. 1234567# 在cmd下导出mysqldump -uroot -p --default-character-set=utf8 mo（dbname） &gt; E://xxxx.sql# 在cmd下导入mysql -u root -p --default-character-set=utf8 use dbname source /root/newsdata.sql 而且需要注意,在linux中要配置默认编码为:default-character-set=utf8]]></content>
      <categories>
        <category>mysql</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Linux下用户管理sudo]]></title>
    <url>%2F2017%2F12%2F22%2Flinux%2Flinux-sudo.html</url>
    <content type="text"><![CDATA[添加sudo用户chmod u+w /etc/sudoers vim /etc/sudoers # 找到 root ALL=(ALL) ALL 在这行下边添加 dituhui ALL=(ALL) ALL (ps:dituhui代表是你要添加sudo权限的用户名) chmod u-w /etc/sudoers]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Linux下内存管理相关命令]]></title>
    <url>%2F2017%2F12%2F22%2Flinux%2Flinux-manage-ram.html</url>
    <content type="text"><![CDATA[linux下手动清理内存－缓存12345free -m# 释放内存/bin/sync /bin/echo "1"&gt;/proc/sys/vm/drop_cachesfree -m 使用sync命令以确保文件系统的完整性，sync 命令运行 sync 子例程，将所有未写的系统缓冲区写到磁盘中，包含已修改的 i-node、已延迟的块 I/O 和读写映射文件。 /proc是一个虚拟文件系统，我们可以通过对它的读写操作作为与kernel实体间进行通信的一种手段。也就是说可以通过修改/proc中的文件，来对当前kernel的行为做出调整。也就是说我们可以通过调整/proc/sys/vm/drop_caches来释放内存。]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Linux文件操作命令之包管理rpm]]></title>
    <url>%2F2017%2F12%2F22%2Flinux%2Flinux-rpm.html</url>
    <content type="text"><![CDATA[Linux RPM安装与卸载命令 RPM（Red Hat Package Manager）命令：rpm1、查询、检查软件包rpm {-q|–query} [select-options] [query-options]rpm {-V|–verify} [select-options] [verify-options]2、安装、升级、删除软件包rpm {-i|–install} [install-options] PACKAGE_FILE …rpm {-U|–upgrade} [install-options] PACKAGE_FILE …rpm {-F|–freshen} [install-options] PACKAGE_FILE …rpm {-e|–erase} [–allmatches] [–nodeps] [–noscripts] [–notriggers] [–repackage] [–test] PACKAGE_NAME …3、其他rpm {–initdb|–rebuilddb}rpm {–addsign|–resign} PACKAGE_FILE …rpm {–querytags|–showrc}rpm {–setperms|–setugids} PACKAGE_NAME …RPM（Red Hat Package Manager）命令：rpmselect-options [PACKAGE_NAME] [-a,–all] [-f,–file FILE] [-g,–group GROUP] {-p,–package PACKAGE_FILE] [–fileid MD5] [–hdrid SHA1] [–pkgid MD5] [–tid TID] [–querybynumber HDRNUM] [–triggeredby PACKAGE_NAME] [–whatprovides CAPABILITY] [–whatrequires CAPABILITY]query-options [–changelog] [-c,–configfiles] [-d,–docfiles] [–dump] [–filesbypkg] [-i,–info] [–last] [-l,–list] [–provides] [–qf,–queryformat QUERYFMT] [-R,–requires] [–scripts] [-s,–state] [–triggers,–triggerscripts]verify-options [–nodeps] [–nofiles] [–noscripts] [–nodigest] [–nosignature] [–nolinkto] [–nomd5] [–nosize] [–nouser] [–nogroup] [–nomtime] [–nomode] [–nordev]RPM（Red Hat Package Manager）命令：rpminstall-options [–aid] [–allfiles] [–badreloc] [–excludepath OLDPATH] [–excludedocs] [–force] [-h,–hash] [–ignoresize] [–ignorearch] [–ignoreos] [–includedocs] [–justdb] [–nodeps] [–nodigest] [–nosignature] [–nosuggest] [–noorder] [–noscripts] [–notriggers] [–oldpackage] [–percent] [–prefix NEWPATH] [–relocate OLDPATH=NEWPATH] [–repackage] [–replacefiles] [–replacepkgs] [–test] 【示例】rpm -v 显示rpm程序的详细信息rpm –version 显示rpm的版本号rpm -qa 显示系统中安装的所有软件包rpm -q gcc 查询指定软件包是否已安装rpm -qi gcc 显示指定软件包的详细信息RPM（Red Hat Package Manager）命令：rpmrpm -ql gcc 显示指定软件包所包含的文件列表rpm -qf /usr/lib/bash 查看指定文件所属的软件包rpm -qp /tmp/webmin.rpm 查询RPM包文件中的文件信息rpm -i webmin-1.290-1.noarch.rpm 安装指定的RPM包rpm -ivh webmin-1.290-1.noarch.rpm 安装并显示详信息rpm -ivh –test webmin-1.290-1.noarch.rpm 对安装进行测试，并不是安装rpm -ivh –replacepkgs webmin-1.290-1.noarch.rpm软件包重复安装将会失败，若仍需要安装必须加–replacepkgsrpm -ivh –replacefiles webmin-1.290-1.noarch.rpm软件包的某个文件已在安装其他软件包时安装过，则安装将会失败，若仍需要安装必须加–replacefilesrpm -ivh –nodeps webmin-1.290-1.noarch.rpm软件包所依赖的软件包未安装，则安装将会失败，若仍需要安装必须加—nodepsrpm -ivh –force webmin-1.290-1.noarch.rpm 强制安装指定软件包 （忽略软件包依赖性和文件冲突，不建议）RPM（Red Hat Package Manager）命令：rpmrpm –U webmin-1.29 升级指定的软件包rpm –Uvh webmin-1.29 升级指定的软件包（显示详细信息） rpm -e webmin-1.29 删除指定的软件包rpm -V webmin 验证软件包webminrpm -Vf /bin/vi 验证包含指定文件的软件包是否正确rpm -Va 验证所有已经安装的软件包rpm -Vp webmin.rpm 利用RPM文件验证软件包注：如校验正确将没有任何输出（.表示验证通过）5 MD5校验S 文件尺寸L 符号链接T 文件修改日期D 设备U 用户G 用户组M 模式（包括权限和文件类型）]]></content>
  </entry>
  <entry>
    <title><![CDATA[Git如何永久删除文件(包括历史记录)]]></title>
    <url>%2F2017%2F12%2F22%2Ftools%2Fgit-remove-history-files.html</url>
    <content type="text"><![CDATA[步骤一: 从你的资料库中清除文件123git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch *.gz' --prune-empty --tag-name-filter cat -- --allgit filter-branch --force --index-filter 'git rm --cached --ignore-unmatch *.tgz' --prune-empty --tag-name-filter cat -- --allgit filter-branch --force --index-filter 'git rm --cached --ignore-unmatch *.zip' --prune-empty --tag-name-filter cat -- --all ##步骤二: 推送我们修改后的repo 以强制覆盖的方式推送你的repo, 命令如下: 1git push origin master --force 步骤三: 清理和回收空间 虽然上面我们已经删除了文件, 但是我们的repo里面仍然保留了这些objects, 等待垃圾回收(GC), 所以我们要用命令彻底清除它, 并收回空间. 命令如下: 1234rm -rf .git/refs/original/git reflog expire --expire=now --allgit gc --prune=nowgit gc --aggressive --prune=now 设置完成之后, 你可以使用命令du -s .git查看仓库地址空间大小是否有明显减少了. 参考: https://help.github.com/articles/remove-sensitive-data http://www.cnblogs.com/shines77/p/3460274.html]]></content>
      <categories>
        <category>coding</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[C++语言基础]]></title>
    <url>%2F2017%2F12%2F22%2Fcpp%2Flearn-cpp.html</url>
    <content type="text"><![CDATA[C++ Note参考文档:http://see.xidian.edu.cn/cpp/biancheng/cpp/jichu/ 12345678#include&lt;stdio.h&gt;int main(void)&#123; /* code */ printf("Hello World!\n"); return 0;&#125; 1234567891011121314151617#include "stdio.h"void main()&#123;int x,y;for(x=1,y=1;y&lt;50;y++)&#123;if(x&gt;=10)break;if(x%3==1)&#123;x+=5;continue;&#125;x+=3;&#125;printf("x=%d,y=%d\n",x,y);&#125; 123456789101112131415161718#include "stdio.h"void main()&#123; int x,y; for(x=1,y=1;y&lt;50;y++) &#123; if(x&gt;=10) break; if(x%3==1) &#123; x+=5; continue; &#125; x+=3; &#125; printf("x=%d,y=%d\n",x,y); return x,y;&#125;]]></content>
      <categories>
        <category>coding</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[C语言基础]]></title>
    <url>%2F2017%2F12%2F22%2Fc%2Flearn-c.html</url>
    <content type="text"><![CDATA[C语言基础123456#include &lt;stdio.h&gt;int main()&#123; printf("hello\n");&#125; C程序构成一个基本的C程序是由头文件和主函数构成的, 头文件一般在程序的第一行, 通过#include预处理标识符来加载. 程序的主体部分则是通过main()主函数来实现. 头文件 头文件一般在程序的第一行, 通过一个包含指令#include来实现. c编译器遇到包含.h头文件时, 会去找指定的函数声明. 2中不同的包含语句: 12#include &lt;math.h&gt; // 从标准头文件目录中直接找math.h#include "math.h" // 制定编译器先从当前目录查找math.h, 若当前目录没有找到该头文件,再从标准头文件目录中找起 主函数 主程序是程序代码的核心部分,也是main()函数. 在c程序中, 有且只有一个名为main()的函数. 123void main( void ) // 表示main()主函数没有返回值也没有参数.此时,也可以省略参数列表中的voidint main( void ) // main()中返回值为int类型,此时需要在程序中使用return语句返回一个整型值. 这种形式同样不接受参数, 也可以省略参数列表中的voidint main( int argc, char *argv[] ) 数据类型常用数据类型: 整型(int), 浮点型(float), 字符型(char), 指针型(*), 无值型(void)自定义数据类型:结构体(struct), 联合体(union) 整型 int###]]></content>
      <categories>
        <category>coding</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[画图工具 之 原型、流程图、思维导图]]></title>
    <url>%2F2017%2F12%2F12%2Ftools%2Fdraw-tools-for-prototype-uml-mind.html</url>
    <content type="text"><![CDATA[跟程序打交道最经常遇到的图类型有： 原型工具、流程图 和 思维导图。 一、画图分类 原型图 流程图UML 思维导图 甘特图 鱼骨图 在线画图工具 processon: 由免费走向了收费，免费用户只可创建6张图 draw.io ### TikZ and PGF 在线画图的模板 TikZ入门教程 overleaf Online Draw graphviz 付费GUI画图 Enterprise Architect]]></content>
      <categories>
        <category>tools</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>%2F2017%2F12%2F03%2Fphp%2Fphp-v8js-usage.html</url>
    <content type="text"><![CDATA[mac安装12brew install v8brew install php71-v8js v8在php中的使用先查看v8是否正常安装：12345$ v8V8 version 5.1.281.47 [sample shell]&gt; var a = 1;&gt; a + 1&gt; 2 php中应用实例: 12$v8 = new \V8Js();$v8-&gt;executeString('print("hello v8js!")');]]></content>
  </entry>
  <entry>
    <title><![CDATA[DirectAdmin面板设置]]></title>
    <url>%2F2017%2F11%2F24%2Ftools%2Fdirectadmin-usage.html</url>
    <content type="text"><![CDATA[一、安装默认皮肤为Capri，界面为 中文，如果要修改可以修改文件：/usr/local/directadmin/data/users/admin/user.conf 如果你安装完成后改为使用 Nginx + php-fpm 需要修改文件：/usr/local/directadmin/data/admin将 httpd=ON 改成 nginx=ON 上面两步都需要重启DA:service directadmin restart 二、配置修改2.1 密码修改默认mysql密码，管理员密码等地址：文件位置: /usr/local/directadmin/scripts/setup.txt 2.2 设置时区1） 修改系统时间12mv /etc/localtime /etc/localtime.movedln -s /usr/share/zoneinfo/Asia/Chongqing /etc/localtime 2） 修改php时间12/usr/local/bin/php -i | grep 'Loaded Configuration File' #查看php.ini位置vim /usr/local/lib/php.ini 编辑如下内容 date.timezone = &quot;Asia/Shanghai&quot;执行重载service directadmin reload 3） 修改mysql时间使用root账号执行: SET GLOBAL time_zone = &#39;+08:00&#39;;然后执行select now()查看当前时间 三、个性优化配置使用php-cgi模式运行php为什么要用cgi模式呢，主要是方便多用户控制，这里列下修改的方式： 12345678#!/bin/sh# from http://www.zrblog.net/10237.htmlcd /usr/local/directadmin/custombuild./build update./build cleansed -i 's/php5_cli=yes/php5_cli=no/g' options.confsed -i 's/php5_cgi=no/php5_cgi=yes/g' options.conf./build php n directadmin软件包管理查看软件版本:vim /usr/local/directadmin/custombuild/options.conf 重新安装服务:/usr/local/directadmin/custombuild/build mysql|php|软件名 版本变更./build set php_ver 5.2/usr/local/directadmin/custombuild/build set mysql 5.6 升级Mysql有时候mysql安装错误会默认安装mysql 4, 这个版本太低,很多数据不支持,故有升级的需求,具体操作方法如下: 123456#MySQL Settingsmysql=5.6mysql_inst=yes # 需要修改成yes,不然无法升级到5.6mysql_backup=yesmysql_backup_dir=/usr/local/directadmin/custombuild/mysql_backupsmysql_force_compile=no 默认mysql密码文件位置: /usr/local/directadmin/scripts/setup.txt 设置时区1. 修改系统时间 12mv /etc/localtime /etc/localtime.movedln -s /usr/share/zoneinfo/Asia/Chongqing /etc/localtime 2. 修改php时间 12/usr/local/bin/php -i | grep 'Loaded Configuration File' #查看php.ini位置vim /usr/local/lib/php.ini 编辑如下内容 date.timezone = &quot;Asia/Shanghai&quot;执行重载service directadmin reload 3. 修改mysql时间 使用root账号执行: SET GLOBAL time_zone = &#39;+08:00&#39;;然后执行select now()查看当前时间 使用phpmyadmin出错使用root执行： /usr/local/directadmin/scripts/phpMyAdmin.sh参考：https://forum.directadmin.com/showthread.php?t=13372]]></content>
  </entry>
  <entry>
    <title><![CDATA[网络检查常用命令杂锦]]></title>
    <url>%2F2017%2F11%2F24%2Ftools%2Fnetwork-check.html</url>
    <content type="text"><![CDATA[检测 https: telnet {IP} 443 查询dns解析ip: nslookup {domain} 8.8.8.8]]></content>
  </entry>
  <entry>
    <title><![CDATA[域名查询接口]]></title>
    <url>%2F2017%2F11%2F24%2Fapi%2Fdomain-api.html</url>
    <content type="text"><![CDATA[2017-11-24 日检查可用接口： 【功能】：查询域名可用【地址】： http://panda.www.net.cn/cgi-bin/check.cgi?area_domain={$domian}【说明】返回状态说明:200:]]></content>
  </entry>
  <entry>
    <title><![CDATA[Windows下CMD命令]]></title>
    <url>%2F2017%2F11%2F24%2Fwindows%2Fwindow-cmd-usage.html</url>
    <content type="text"><![CDATA[Boxcore的CMD常用命令手册。 进入指定目录 切换盘： &gt; D:\dir\dir 切目录： cd dir\dir\ ##环境变量 set path=%path%;C:\python27说明，windows中添加环境变量后可以直接在cmd窗口中敲其快捷的命令，一般设置命令的目录为环境变量即可。 添加环境变量设置生效： set PATH=dir （需要重开cmd窗口） 查看环境变量： echo %PATH%]]></content>
  </entry>
  <entry>
    <title><![CDATA[PHOTOSHOP使用]]></title>
    <url>%2F2017%2F11%2F24%2Ftools%2Fphotoshop-usage.html</url>
    <content type="text"><![CDATA[一、安装二、基本操作使用三、进阶操作四、配置4.1 语言包配置PS设置英文：将C:\Program Files\Adobe\Adobe Photoshop CC (64 Bit)\Locales\zh_CN\Support Files\tw10428.dat文件改名即可。如果需要回复中文界面，只要将该文件改名回去就行。不需要语言包。photoshop不管什么语言版本，其内核都是英文的，多国语言版无非是增加了对应语言的资源文件，如果没有资源文件，或者系统找不到资源文件，系统就按照英文的方式显示界面。 五、常见案例]]></content>
  </entry>
  <entry>
    <title><![CDATA[Sublime编辑器使用]]></title>
    <url>%2F2017%2F11%2F24%2Fsublime-text-usage.html</url>
    <content type="text"><![CDATA[一、安装1.1 ubuntu安装sublime text1234sudo add-apt-repository ppa:webupd8team/sublime-text-2sudo apt-get updatesudo apt-get install sublime-text # or use `sudo apt-get install sublime-text-dev` for install Sublime Text 2 development build 参考地址： http://www.webupd8.org/2011/03/sublime-text-2-ubuntu-ppa.html]]></content>
  </entry>
  <entry>
    <title><![CDATA[Talk About i18n]]></title>
    <url>%2F2017%2F11%2F24%2Fsa%2Ftalk-about-i18n.html</url>
    <content type="text"><![CDATA[什么是i18n参考文章 http://quivi.sourceforge.net/languagecodes.html 我们常用的国际编码有:zh_cn, zh_tw 和 en_gb 目标在ThinkPHP等MVC框架下实现i18n的功能。]]></content>
  </entry>
  <entry>
    <title><![CDATA[CSS Hack基础笔记]]></title>
    <url>%2F2017%2F11%2F24%2Fsa%2Fcss-hack-note.html</url>
    <content type="text"><![CDATA[常用css hack知识1. !important浏览器兼容IE7以上对!important是支持的,但IE6对!important只支持单个的类，比如： 12.className&#123;color:#ffff00!important&#125;.className&#123;color:green;&#125; 但有多个类是不支持的: 1.className&#123;color:#ffff00; color:green&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Node.js Note]]></title>
    <url>%2F2017%2F11%2F24%2Fsa%2Fnodejs-note.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Linux网络命令之lsof]]></title>
    <url>%2F2017%2F11%2F24%2Flinux%2Flinux-lsof.html</url>
    <content type="text"><![CDATA[实例通过list open file命令可以查看到当前打开文件，在linux中所有事物都是以文件形式存在，包括网络连接及硬件设备。 lsof -i:80 -i 参数表示网络链接， :80 指明端口号，该命令会同时列出PID，方便kill 查看所有进程监听的端口: sudo lsof -i -P | grep -i “listen”]]></content>
  </entry>
  <entry>
    <title><![CDATA[Docker Note]]></title>
    <url>%2F2017%2F11%2F23%2Fsa%2Fdocker-note.html</url>
    <content type="text"><![CDATA[一、docker的一些基础概念1.1 配置Docker使用中国镜像镜像地址合集：12http://ac8437da.m.daocloud.iohttps://registry.docker-cn.com bash下一般执行这个语句就可以：dockerd --registry-mirror=https://registry.docker-cn.com 如果你的是linux系统，可以通过下面这个命令一键切换docker镜像：curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://ac8437da.m.daocloud.io 参考:https://www.daocloud.io/mirror#accelerator-doc 二、使用镜像通用命令： 删除本地镜像:docker rmi [选项] &lt;镜像1&gt; [&lt;镜像2&gt; ...], 在 Docker 1.13+ 版本中推荐使用 docker image 来管理镜像 docker image rm 删除虚悬镜像的指令: docker rmi $(docker images -q -f dangling=true) 删除所有仓库名为 redis 的镜像: docker rmi $(docker images -q redis) 删除所有在 mongo:3.2 之前的镜像：docker rmi $(docker images -q -f before=mongo:3.2) 从 Docker Registry 获取镜像的命令是 docker pull。其命令格式为： docker pull [选项] [Docker Registry地址]&lt;仓库名&gt;:&lt;标签&gt; 具体的选项可以通过 docker pull --help 命令看到，这里我们说一下镜像名称的格式。 Docker Registry 地址：地址的格式一般是 &lt;域名/IP&gt;[:端口号]。默认地址是 Docker Hub。仓库名：如之前所说，这里的仓库名是两段式名称，即 &lt;用户名&gt;/&lt;软件名&gt;。对于 Docker Hub，如果不给出用户名，则默认为 library，也就是官方镜像。 例子：12345678docker pull ubuntu:14.04 # 获取ubuntu 14.04 镜像docker pull ubuntu:latest # 获取ubuntu 最新LTS版docker image pull ubunut:17.10 # 在 Docker 1.13+ 版本中推荐使用 docker image 来管理镜像。docker container run -it --rm \ ubuntu:17.10 \ bash 运行镜像1234docker run -it --rm ubuntu:14.04 bashcat /etc/os-releaseexit docker run 就是运行容器的命令，具体格式我们会在后面的章节讲解，我们这里简要的说明一下上面用到的参数。 -it：这是两个参数，一个是 -i：交互式操作，一个是 -t 终端。我们这里打算进入 bash 执行一些命令并查看返回结果，因此我们需要交互式终端。 --rm：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 docker rm。我们这里只是随便执行个命令，看看结果，不需要排障和保留结果，因此使用 –rm 可以避免浪费空间。 ubuntu:14.04：这是指用 ubuntu:14.04 镜像为基础来启动容器。 bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 bash。 进入容器后，我们可以在 Shell 下操作，执行任何所需的命令。这里，我们执行了 cat /etc/os-release，这是 Linux 常用的查看当前系统版本的命令，从返回的结果可以看到容器内是 Ubuntu 14.04.5 LTS 系统。 最后我们通过 exit 退出了这个容器。 列出镜像 docker images : 查看所有的镜像 docker system df ： 查看镜像的体积 查看虚悬镜像 docker images -f dangling=true： 查看虚悬镜像 由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为 的镜像。这类无标签镜像也被称为 虚悬镜像(dangling image) ，可以用docker images -f dangling=true命令专门显示这类镜像. 一般来说，虚悬镜像已经失去了存在的价值，是可以随意删除的，可以用下面的命令删除: docker rmi $(docker images -q -f dangling=true) 在 Docker 1.13+ 版本中你可以便捷的使用以下命令来删除虚悬镜像: docker image prune 中间层镜像为了加速镜像构建、重复利用资源，Docker 会利用 中间层镜像。所以在使用一段时间后，可能会看到一些依赖的中间层镜像。默认的 docker images 列表中只会显示顶层镜像，如果希望显示包括中间层镜像在内的所有镜像的话，需要加 -a 参数。 docker images -a 这样会看到很多无标签的镜像，与之前的虚悬镜像不同，这些无标签的镜像很多都是中间层镜像，是其它镜像所依赖的镜像。这些无标签镜像不应该删除，否则会导致上层镜像因为依赖丢失而出错。实际上，这些镜像也没必要删除，因为之前说过，相同的层只会存一遍，而这些镜像是别的镜像的依赖，因此并不会因为它们被列出来而多存了一份，无论如何你也会需要它们。只要删除那些依赖它们的镜像后，这些依赖的中间层镜像也会被连带删除。 更多列出镜像的方法请参考：https://yeasy.gitbooks.io/docker_practice/content/image/list.html docker commit使用Dockerfile 定制镜像12345678mkdir mynginxcd mynginxtouch Dockerfilecat &gt; Dockerfile &lt;&lt;EOFFROM nginxRUN echo '&lt;h1&gt;Hello, Docker!&lt;/h1&gt;' &gt; /usr/share/nginx/html/index.htmlEOFdocker build -t nginx:v3 . docker build 命令进行镜像构建。其格式为： docker build [选项] &lt;上下文路径/URL/-&gt; 在这里我们指定了最终镜像的名称 -t nginx:v3，构建成功后，我们可以像之前运行 nginx:v2 那样来运行这个镜像，其结果会和 nginx:v2 一样。 在 Docker 1.13+ 版本中推荐使用 docker image 来管理镜像。 docker image build 三、容器使用进入容器交互模式： docker exec -it {容器名称} bash 范例docker run -d -p 8081:80 --name webserver nginx - `-p` 指定端口转发，将容器的80端口转发到本机的8081端口 - `--name webserver` 给容器取别名webserver docker run -it --rm ubuntu:14.04 bash - `--rm` 退出后删除 - `-it` 交互模式 - `bash` 使用bash作为交互模式 laravel docker使用12345composer create-project --prefer-dist laravel/laravel blogdocker pull laraedit/laraeditdocker run -d --name laravel -p 8082:80 -p 3307:3306 -v &#123;blog对应的目录&#125;:/var/www/html/app laraedit/laraeditdocker exec -it laravel /bin/bash 进入docker container后可以执行这个命令链接mysql 1mysql -u homestead -h 192.168.99.100 -P 3307 -p # 預設帳號為 homestead 密碼為 secret]]></content>
  </entry>
  <entry>
    <title><![CDATA[谈谈并发的一些基础概念]]></title>
    <url>%2F2017%2F11%2F22%2Fsa%2Ftalk-about-tps-and-qps.html</url>
    <content type="text"><![CDATA[pv 是指页面被浏览的次数，比如你打开一网页，那么这个网站的pv就算加了一次； tps是每秒内的事务数，比如执行了dml操作，那么相应的tps会增加。 qps是指每秒内查询次数，比如执行了select操作，相应的qps会增加。QPS = req/sec = 请求数/秒 TPS：Transactions Per Second（每秒传输的事物处理个数），即服务器每秒处理的事务数。TPS包括一条消息入和一条消息出，加上一次用户数据库访问。（业务TPS = CAPS × 每个呼叫平均TPS）TPS是软件测试结果的测量单位。一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数。一般的，评价系统性能均以每秒钟完成的技术交易的数量来衡量。系统整体处理能力取决于处理能力最低模块的TPS值。 QPS：每秒查询率QPS是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准，在因特网上，作为域名系统服务器的机器的性能经常用每秒查询率来衡量。对应fetches/sec，即每秒的响应请求数，也即是最大吞吐能力。 其他的解释： 上面李大头给出了详细的英文解释pv 是指页面被浏览的次数，比如你打开一网页，那么这个网站的pv就算加了一次；tps是每秒内的事务数，比如执行了dml操作，那么相应的tps会增加；qps是指每秒内查询次数，比如执行了select操作，相应的qps会增加。 不同的应用系统tps,qps是没有可对比性的。例如：应用A，每个select查询需要1ms, 一个connection的话，一直不停的执行，1S内 可执行1000次，也就是1000qps应用B，每个select查询需要100ms, 一个connection的话，一直不停的执行，1S内 可执行10次，也就是10qps上面不同系统的两个qps是无法对比的，不能说哪个好哪个坏。满足业务要求才是王道。 术语说明：QPS = req/sec = 请求数/秒 【QPS计算PV和机器的方式】QPS统计方式 [一般使用 http_load 进行统计]QPS = 总请求数 / ( 进程总数 * 请求时间 )QPS: 单个进程每秒请求服务器的成功次数 单台服务器每天PV计算公式1：每天总PV = QPS 3600 6公式2：每天总PV = QPS 3600 8 服务器计算服务器数量 = ceil( 每天总PV / 单台服务器每天总PV ) 【峰值QPS和机器计算公式】原理：每天80%的访问集中在20%的时间里，这20%时间叫做峰值时间公式： ( 总PV数 80% ) / ( 每天秒数 20% ) = 峰值时间每秒请求数(QPS)机器：峰值时间每秒QPS / 单台机器的QPS = 需要的机器 问：每天300w PV 的在单台机器上，这台机器需要多少QPS？答：( 3000000 0.8 ) / (86400 0.2 ) = 139 (QPS)问：如果一台机器的QPS是58，需要几台机器来支持？答：139 / 58 = 3]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux流程控制语句之expect]]></title>
    <url>%2F2017%2F11%2F20%2Flinux%2Flinux-expect.html</url>
    <content type="text"><![CDATA[我们通过Shell可以实现简单的控制流功能，如：循环、判断等。但是对于需要交互的场合则必须通过人工来干预，有时候我们可能会需要实现和交互程序如telnet服务器等进行交互的功能。而expect就使用来实现这种功能的工具。 expect是一个免费的编程工具语言，用来实现自动和交互式任务进行通信，而无需人的干预。expect是不断发展的，随着时间的流逝，其功能越来越强大，已经成为系统管理员的的一个强大助手。expect需要Tcl编程语言的支持，要在系统上运行expect必须首先安装Tcl。 安装expect1yum install expect 使用123456#!/usr/bin/expect set timeout 30 spawn ssh -l username 192.168.1.1 expect "password:" send "ispass/r" interact 参考 http://www.cnblogs.com/meitian/p/5134797.html]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux文件操作命令之文件处理xargs]]></title>
    <url>%2F2017%2F11%2F20%2Flinux%2Flinux-xargs.html</url>
    <content type="text"><![CDATA[xargs命令是给其他命令传递参数的一个过滤器，也是组合多个命令的一个工具。它擅长将标准输入数据转换成命令行参数，xargs能够处理管道或者stdin并将其转换成特定命令的命令参数。xargs也可以将单行或多行文本输入转换为其他格式，例如多行变单行，单行变多行。xargs的默认命令是echo，空格是默认定界符。这意味着通过管道传递给xargs的输入将会包含换行和空白，不过通过xargs的处理，换行和空白将被空格取代。xargs是构建单行命令的重要组件之一。 xargs参数和使用 -n : 选项多行输出 -d : 选项可以自定义一个定界符, mac中不可用（暂未找到实现方法） -I : 使用-I指定一个替换字符串{}，这个字符串在xargs扩展时会被替换掉，当-I与xargs结合使用，每一个参数命令都会被执行一次! -0 : 使用0作为边界符，一般在find后面有跟-print0不换行的参数时可以使用； xargs用作替换工具，读取输入数据重新格式化后输出。下面作一些测试：123456789cat &gt;&gt; test.txt &lt;&lt;EOFa b c d e f gh i j k l m no p qr s tu v w x y zEOF;cat test.txt | xargs # 输出 a b c d e f g h i j k l m n o p q r s t u v w x y z 1ls *.tar.gz |xargs -n1 tar zxvf # 遍历解压当前目录所有tar.gz压缩包 参考 xargs命令]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux文件操作命令之文件同步rsync]]></title>
    <url>%2F2017%2F11%2F20%2Flinux%2Flinux-rsync.html</url>
    <content type="text"><![CDATA[--exclude : 排除文件或者文件夹]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux之字符串处理echo]]></title>
    <url>%2F2017%2F11%2F20%2Flinux%2Flinux-echo.html</url>
    <content type="text"><![CDATA[echo显示带颜色，需要使用参数-e格式如下:echo -e “\033[字背景颜色;文字颜色m字符串\033[0m”例如:echo -e “\033[41;37m TonyZhang \033[0m”其中41的位置代表底色, 37的位置是代表字的颜色 注：1、字背景颜色和文字颜色之间是英文的“”””2、文字颜色后面有个m3、字符串前后可以没有空格，如果有的话，输出也是同样有空格下面看几个例子：echo -e “\033[30m 黑色字 \033[0m”echo -e “\033[31m 红色字 \033[0m”echo -e “\033[32m 绿色字 \033[0m”echo -e “\033[33m 黄色字 \033[0m”echo -e “\033[34m 蓝色字 \033[0m”echo -e “\033[35m 紫色字 \033[0m”echo -e “\033[36m 天蓝字 \033[0m”echo -e “\033[37m 白色字 \033[0m” echo -e “\033[40;37m 黑底白字 \033[0m”echo -e “\033[41;37m 红底白字 \033[0m”echo -e “\033[42;37m 绿底白字 \033[0m”echo -e “\033[43;37m 黄底白字 \033[0m”echo -e “\033[44;37m 蓝底白字 \033[0m”echo -e “\033[45;37m 紫底白字 \033[0m”echo -e “\033[46;37m 天蓝底白字 \033[0m”echo -e “\033[47;30m 白底黑字 \033[0m”控制选项说明 ：\33[0m 关闭所有属性\33[1m 设置高亮度\33[4m 下划线\33[5m 闪烁\33[7m 反显\33[8m 消隐\33[30m – \33[37m 设置前景色\33[40m – \33[47m 设置背景色\33[nA 光标上移n行\33[nB 光标下移n行\33[nC 光标右移n行\33[nD 光标左移n行\33[y;xH设置光标位置\33[2J 清屏\33[K 清除从光标到行尾的内容\33[s 保存光标位置\33[u 恢复光标位置\33[?25l 隐藏光标\33[?25h 显示光标]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux下kill、pkill、killall使用]]></title>
    <url>%2F2017%2F11%2F16%2Flinux%2Flinux-kill-pid-usage.html</url>
    <content type="text"><![CDATA[终止一个进程或终止一个正在运行的程序，一般是通过 kill 、killall、pkill、xkill 等进行。比如一个程序已经死掉，但又不能退出，这时就应该考虑应用这些工具。 kill: kill的应用是和ps 或pgrep 命令结合在一起使用的； pkill: pkill 和killall 应用方法差不多，也是直接杀死运行中的程序；如果您想杀掉单个进程，请用kill 来杀掉 killall: killall 通过程序的名字，直接杀死所有进程 xkill: xkill 是在桌面用的杀死图形界面的程序 用法kill 的用法kill ［信号代码］ 进程ID（kill -pid）－s：指定发送的信号。－p：模拟发送信号。－l：指定信号的名称列表。pid：要中止进程的ID号。Signal：表示信号。注：信号代码可以省略；我们常用的信号代码是-9 ，表示强制终止；对于僵尸进程，可以用kill -9 来强制终止退出； killall killall 通过程序的名字，直接杀死所有进程。用法：killall 正在运行的程序名killall 也和ps或pgrep 结合使用，比较方便；通过ps或pgrep 来查看哪些程序在运行 pkill pkill 和killall 应用方法差不多，也是直接杀死运行中的程序；如果您想杀掉单个进程，请用kill 来杀掉。用法：pkill 正在运行的程序名 xkill xkill 是在桌面用的杀死图形界面的程序。比如当firefox 出现崩溃不能退出时，点鼠标就能杀死firefox 。当xkill运行时出来和个人脑骨的图标，哪个图形程序崩溃一点就OK了。如果您想终止xkill ，就按右键取消；xkill 调用方法：[root@localhost ~]# xkill 1pkill -uroot # root是你要杀死的用户名]]></content>
  </entry>
  <entry>
    <title><![CDATA[vultr主机推荐]]></title>
    <url>%2F2017%2F11%2F08%2Faffiliate%2Fvultr-vps-affiliate.html</url>
    <content type="text"><![CDATA[https://www.vultr.com/?ref=7229300]]></content>
  </entry>
  <entry>
    <title><![CDATA[RESILIO SYNC激活和激活失效修复]]></title>
    <url>%2F2017%2F11%2F08%2Ftools%2Fresilio-sync-license-crack.html</url>
    <content type="text"><![CDATA[分享一个Resilio Sync永久的授权文件, 可以任意的选择性同步，使用所有 Resilio Sync 的高级功能。目前对所有版本有效，测试到最高版本 2.5.9 版本。 一、安装 Resilio Sync去官网下载，不过官网可能被ban，需要自行百度一下 二、授权新安装的resilio sync授权步骤： 打开resilio sync 双击安装授权文件Resilio_Sync_Personal.btskey，如果授权成功接着执行下一步，授权失败则需要删除用户配置文件 配置hosts，添加记录 127.0.0.1 license.resilio.com 配置授权文件目录不可写入，具体方法参考下面的2.1 和2.2 2.1 windows下配置授权找到安装目录 可以删除 License 目录和.SyncUserxxxxxx 目录 禁止写入权限 2.2 mac下配置授权打开terminal工具 12345678cd ~/Library/Application\ Support/Resilio\ Syncls -a # 查看所有文件找到 .SyncUserxxx 类似的目录（我的是.SyncUser1510108713） 和License目录chmod -R -w .SyncUser1510108713chmod -R -w Licensesudo rm -rf ~/Library/Application\ Support/Resilio\ Sync/.SyncUser1510129113 ~/Library/Application\ Support/Resilio\ SyncLicensechmod -R -w ~/Library/Application\ Support/Resilio\ Sync/.SyncUser1510129113 ~/Library/Application\ Support/Resilio\ SyncLicense]]></content>
  </entry>
  <entry>
    <title><![CDATA[MySQL多开]]></title>
    <url>%2F2017%2F11%2F03%2Fsql%2Fmultiple-mysql-instances.html</url>
    <content type="text"><![CDATA[在服务器中开启mysql服务一般是用 service mysql start, 但在系统里面他都执行了那些命令吗，通过ps -ef|grep mysql 我们可以看到目标的任务有如： 12345/usr/local/Cellar/mysql/5.7.11/bin/mysqld --basedir=/usr/local/Cellar/mysql/5.7.11 --datadir=/usr/local/var/mysql --plugin-dir=/usr/local/Cellar/mysql/5.7.11/lib/plugin --bind-address=127.0.0.1 --log-error=/usr/local/var/mysql/mysql-error.log --pid-file=/usr/local/var/mysql/mysql.pid或者可能是： /usr/local/mysql/bin/mysqld --defaults-file=/data/mysql/3306/my.cnf --basedir=/usr/local/mysql --datadir=/data/mysql/3306/data --plugin-dir=/usr/local/mysql/lib/plugin --user=mysql --log-error=/data/mysql/3306/mysql_run.err --open-files-limit=65536 --pid-file=/data/mysql/3306/pid_mysql.pid --socket=/data/mysql/3306/mysqltmp/mysql.sock --port=3306 如果我们需要多开，只需要按照这种格式允许下不就好了？ 这是个经过优化，在后台多开一个mysql实例的demo： 1234567891011121314mysql_install_db --datadir=/Volumes/Edu/DB/mysql # mysql 5.7 前使用mysqld --initialize --datadir=/Volumes/Edu/DB/mysql # mysql 5.7后使用这个初始化mysqld --user=mysql --basedir=/usr/local/Cellar/mysql/5.7.11 --datadir=/Volumes/Edu/DB/mysql --initial --initialize-insecure --defaults-file=/usr/local/etc/my-3307.cnf --socket=/data/mysql/3306/mysqltmp/mysql.sock --port=3307--plugin-dir=/usr/local/Cellar/mysql/5.7.11/lib/plugin --bind-address=127.0.0.1 --log-error=/usr/local/var/mysql/mysql-error-3307.log --pid-file=/usr/local/var/mysql/mysql-3307.pid#需要先确保 datadir 目标目录下是空的，避免误操作破坏已有数据。#另外，在初始化时如果加上 –initial-insecure，则会创建空密码的 root@localhost 账号，否则会创建带密码的 root@localhost 账号，密码直接写在 log-error 日志文件中（在5.6版本中是放在 ~/.mysql_secret 文件里，更加隐蔽，不熟悉的话可能会无所适从）/usr/local/Cellar/mysql/5.7.11/bin/mysqld --basedir=/usr/local/Cellar/mysql/5.7.11 --datadir=/Volumes/Edu/DB/mysql --plugin-dir=/usr/local/Cellar/mysql/5.7.11/lib/plugin --bind-address=127.0.0.1 --log-error=/usr/local/var/mysql/mysql-error-3307.log --pid-file=/usr/local/var/mysql/mysql.pid --port=3307 launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.mysql-3307.plist]]></content>
  </entry>
  <entry>
    <title><![CDATA[Google Drive 服务器应用指南]]></title>
    <url>%2F2017%2F10%2F25%2Flinux-dev%2Fgoogle-drive-usage-for-linux.html</url>
    <content type="text"><![CDATA[一、gdrive cli命令安装这个是比较通用的命令，centos7以下的推荐使用。 12345#下载命令工具wget -O /usr/sbin/gdrive https://docs.google.com/uc?id=0B3X9GlR6EmbnQ0FtZmJJUXEyRTAchmod 755 /usr/sbin/gdrive#验证终端gdrive about 参考项目：https://github.com/prasmussen/gdrive#downloads 1.1 怎么使用gdrive123456#gdrive 上传 tar 包到目录 0B2_oloQ2sUujdzFiYkNtOGhNMkU(用gdrive list查询google drive对应的目录地址)，成功后删除 tar 包/usr/sbin/gdrive upload -p 0B2_oloQ2sUujdzFiYkNtOGhNMkU --delete "/tmp/seonoco.com.tar.gz"#上传目录gdrive upload -p 0B1AsrnTQB-6rZ1JNWTBlMDFHdGs --recursive "/home/wwwroot/tmp"gdrive download --recursive 0B1AsrnTQB-6rZ1JNWTBlMDFHdGs 另外，可使用gdrive help 与对应的命令 比如gdrive help upload查询详细的用法 同步上传gdrive upload -p 1tGnCrN4XCaKI17oNW1UUwBMjextHwxpI –recursive “/home/wwwroot/sync/ebookplan” gdrive [global] sync upload [options] Sync local directory to drive 12345gdrive sync upload "/home/wwwroot/sync/ebookplan" 1tGnCrN4XCaKI17oNW1UUwBMjextHwxpIgdrive sync upload '/home/wwwroot/sync/kindlemate' 1mtcRv-OZTD8y05LUdBMlx2MNB88NzpKogdrive sync upload '/home/wwwroot/sync' 1PtAwU94atg4jJJKoV757yM9ncL0WBI4t]]></content>
  </entry>
  <entry>
    <title><![CDATA[LNMP1.4脚本分析]]></title>
    <url>%2F2017%2F10%2F25%2Flinux-dev%2Flnmp1.4-analisys.html</url>
    <content type="text"><![CDATA[/bin/lnmp 分析12#获取vhost列表：ls /usr/local/nginx/conf/vhost/ | grep ".conf$" | sed 's/.conf//g']]></content>
  </entry>
  <entry>
    <title><![CDATA[JAVA基础]]></title>
    <url>%2F2017%2F10%2F15%2Fjava%2Fjava-basic.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[编程语言学习]]></title>
    <url>%2F2017%2F10%2F15%2Flearn-language.html</url>
    <content type="text"><![CDATA[今天心血来潮想复习java了，毕竟好久忘记了，这里有个编译语言的分类，用来记录复习的每一章java吧。 也给自己一个期限，2017年前完成（20171015 ~ 20171231）]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux网络命令之ssh安全控制fail2ban]]></title>
    <url>%2F2017%2F10%2F12%2Flinux%2Flinux-fail2ban.html</url>
    <content type="text"><![CDATA[一、安装12sudo yum install fail2ban # CentOS/RHEL/Fedora上安装fail2bansudo apt-get install fail2ban # ubuntu，Debian 或 Linux Mint 二、配置新建文件/etc/fail2ban/jail.local 用来配置其安全规则 sudo vi /etc/fail2ban/jail.local 123456789101112131415161718192021222324252627[DEFAULT]# 以空格分隔的列表，可以是 IP 地址、CIDR 前缀或者 DNS 主机名# 用于指定哪些地址可以忽略 fail2ban 防御ignoreip = 127.0.0.1 172.31.0.0/24 10.10.0.0/24 192.168.0.0/24 # 客户端主机被禁止的时长（秒）bantime = 86400 # 客户端主机被禁止前允许失败的次数 maxretry = 5 # 查找失败次数的时长（秒）findtime = 600 mta = sendmail [ssh-iptables]enabled = truefilter = sshdaction = iptables[name=SSH, port=ssh, protocol=tcp]sendmail-whois[name=SSH, dest=your@email.com, sender=fail2ban@email.com]# Debian 系的发行版 logpath = /var/log/auth.log# Red Hat 系的发行版logpath = /var/log/secure# ssh 服务的最大尝试次数 maxretry = 3 三、常用命令123456789101112sudo service fail2ban restart # Debian, Ubuntu 或 CentOS/RHEL 6 sudo systemctl restart fail2ban # 在 Fedora 或 CentOS/RHEL 7:sudo fail2ban-client status # 检验fail2ban状态sudo fail2ban-client status ssh-iptables # 检验一个特定监狱的状态,会显示出被禁止IP地址列表sudo fail2ban-client ping # 验证fail2ban成功运行,你可以看到“pong（嘭）”作为响应sudo tail -f /var/log/fail2ban.log # 该文件记录在fail2ban中发生的任何敏感事件sudo iptables --list -n # 检测当前iptables来验证禁止规则sudo iptables -D fail2ban-SSH -s 192.168.1.8 -j DROP # 从fail2ban中解锁某个IP地址 注意，如果你停止了Fail2ban 服务，那么所有的IP地址都会被解锁。当你重启 Fail2ban，它会从/etc/log/secure(或 /var/log/auth.log)中找到异常的IP地址列表，如果这些异常地址的发生时间仍然在禁止时间内，那么Fail2ban会重新将这些IP地址禁止。 3.1 设置 Fail2ban 自动启动12sudo chkconfig fail2ban onsudo systemctl enable fail2ban]]></content>
  </entry>
  <entry>
    <title><![CDATA[压缩命令之rar、unrar]]></title>
    <url>%2F2017%2F10%2F12%2Flinux%2Frar-and-unrar-usage.html</url>
    <content type="text"><![CDATA[rar是一个商业软件，但有时候我们需要在linux 下做批量操作，这时候就需要用到命令，下面我们来说说rar、unrar在命令行下的一些操作，希望对你们有所帮助！ 一、安装winrarwinrar从v5开始，只提供window和linux版的，而linux版只提供二进制文件，这样我们就可以直接在命令行进行操作。比如在terminal下压缩文件a.xls到文件 a.xls.rar中，语法如下： rar a ‘a.xls.rar’ ‘a.xls’ # 使用起来非常简单，类似linux下的tar 参考： http://blog.csdn.net/randomlife/article/details/113102 二、配置2.1 key配置WinRAR, RAR for Unix and OS X now use the same registration key format, so you can use the same key with current WinRAR and RAR versions for all mentioned platforms.so Yes, it is possible. Further, it also states where to copy the key: If you use RAR/Unix and RAR for OS X, you should copy rarreg.key to your home directory or to one of the following directories: /etc, /usr/lib, /usr/local/lib, /usr/local/etc. You may rename it to .rarreg.key or .rarregkey, if you wish, but rarreg.key is also valid. 参考：https://superuser.com/questions/1089501/how-to-transfer-winrar-key-to-linux 分享我的rarreg.key: 1234567891011RAR registration dataAdminUnlimited Company LicenseUID=1d7426b0b166c91c21ab641221225021abd0925f7c70456ecd71f724a7f5a00b0a0f7d19ee45c5e20951dae2857c2960fce6cb5ffde62890079861be576387177131ced835ed65cc743d9777f2ea71a8e32c7e593cf66794343565b41bcf56929486b8bcdac33d50ecf773996076c281ccab247f6153ed97a3e4a4cb9bffbf35ed364a5cc6908fd2cdc84e9f53a33cf4639d85cd75291397987399f5159745c84654dfd11e471ec7a360b22abbaf66105e62e8afa2d5d154b0c164b1f5377d2975460025531542 然后复制或添加软链接到配置目录，你可能要执行这样的命令：1ln -sfv /workspace/bin/winrar/rarreg.key /usr/local/etc/rarreg.key # mac]]></content>
  </entry>
  <entry>
    <title><![CDATA[homebrew的安装与使用]]></title>
    <url>%2F2017%2F10%2F12%2Fmac-dev%2Fhomebrew-usage.html</url>
    <content type="text"><![CDATA[homebrew是mac下非常不错的包管理软件，类似centos下的yum吧，下面说说他的安装及基础使用。 一、安装homebrew二、配置homebrew2.1 修改homebrew镜像默认的，homebrew是使用github作为代码源，同步的时候会比较慢，所以就有了备选方案 - 使用USTC提供的homebrew镜像。具体操作可以看这篇文章《替换及重置Homebrew默认源》 12345678910111213141516替换brew.git:cd "$(brew --repo)"git remote set-url origin https://mirrors.ustc.edu.cn/brew.git替换homebrew-core.git:cd "$(brew --repo)/Library/Taps/homebrew/homebrew-core"git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git重置brew.git:cd "$(brew --repo)"git remote set-url origin https://github.com/Homebrew/brew.git重置homebrew-core.git:cd "$(brew --repo)/Library/Taps/homebrew/homebrew-core"git remote set-url origin https://github.com/Homebrew/homebrew-core.git 三、常用homebrew工具 brew install inetutils: inetutils里面包含ftp工具，具体可以看一看GNU软件包列表，里面介绍了inetutils网络工具组包含了ftp,telnet,rsh,rlogin,tftp。所以，mac只要安装inetutils就可以了。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux文件操作命令之文件属性chattr]]></title>
    <url>%2F2017%2F10%2F10%2Flinux%2Flinux-chattr.html</url>
    <content type="text"><![CDATA[Linux chattr命令用于改变文件属性。通过chattr命令修改属性能够提高系统的安全性，但是它并不适合所有的目录。chattr命令不能保护/、/dev、/tmp、/var目录。lsattr命令是显示chattr命令设置的文件属性。 这项指令可改变存放在ext2文件系统上的文件或目录属性，这些属性共有以下8种模式： a：让文件或目录仅供附加用途。 b：不更新文件或目录的最后存取时间。 c：将文件或目录压缩后存放。 d：将文件或目录排除在倾倒操作之外。 i：不得任意更动文件或目录。 s：保密性删除文件或目录。 S：即时更新文件或目录。 u：预防以外删除。 语法 chattr [-RV][-v&lt;版本编号&gt;][+/-/=&lt;属性&gt;][文件或目录…] 参数 -R 递归处理，将指定目录下的所有文件及子目录一并处理。 -v&lt;版本编号&gt; 设置文件或目录版本。 -V 显示指令执行过程。 +&lt;属性&gt; 开启文件或目录的该项属性。 -&lt;属性&gt; 关闭文件或目录的该项属性。 =&lt;属性&gt; 指定文件或目录的该项属性。 实例 用chattr命令防止系统中某个关键文件被修改：chattr +i /etc/resolv.conflsattr /etc/resolv.conf会显示如下属性—-i——– /etc/resolv.conf 让某个文件只能往里面追加数据，但不能删除，适用于各种日志文件：chattr +a /var/log/messages 参考 （总结）Linux的chattr与lsattr命令详解]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux网络命令之防火墙控制iptables]]></title>
    <url>%2F2017%2F10%2F10%2Flinux%2Flinux-iptables.html</url>
    <content type="text"><![CDATA[配置防火墙规则文件: /etc/sysconfig/iptables 启动和关闭防火墙: service iptables restart|start|stop 在防火墙中，来往的数据流被称为IP压缩（本文下面也称数据流为IP压缩）。防火墙有三条缺省规则链来过滤IP压缩，分别为： INPUT：所有以主机为目的地的IP压缩 OUTPUT：所有以主机为源的IP压缩 FORWARD：所有经过主机，但是既不是以主机为源，也不是以主机为目的地的压缩 而我们最关注的是INPUT规则，这样可以屏蔽一些黑客行为，或者局域网共享。下面以centOS 6.5的默认规则为例子，讲解下各条规则大概的意思： -A INPUT -m state –state ESTABLISHED,RELATED -j ACCEPT -m 选项: 装入一个模块（state）。state 模块能够查看一个压缩并判断它的状态是 NEW、ESTABLISHED 还是 RELATED。NEW 指內进的压缩属于不是由主机主导的新增连接。ESTABLISHED 及 RELATED 指內进的压缩隶属于一条现存的连接，或者与现存的连接有关系。 这条规则的意思是：以本主机为目的地的IP压缩，如果隶属于现有的连接，则接受（accept） -A INPUT -p icmp -j ACCEPT 表示接受icmp协议的IP压缩，icmp协议主要是ping，很多同学在局域网能ping通一台机器，但是无法通过web访问，就是因为开启了icmp协议，但是http等协议没有开，后面会讲解如何解决这个问题 -A INPUT -i lo -j ACCEPT 这条规则表示接受那些来自本机（localhost或者127.0.0.1的IP压缩） -A INPUT -m state –state NEW -m tcp -p tcp –dport 22 -j ACCEPT 表示表示接受不是由本机引导的新增的，基于端口号22的连接（句子有点长，仔细体会哈）。22端口是ssh连接用的，所以如果你想远程操作机器，需要开启端口22 -A INPUT -j REJECT –reject-with icmp-host-prohibited 表示拒绝来自已经被禁止的主机的icmp的IP压缩 -A FORWARD -j REJECTED –reject-with icmp-host-prohibited 表示拒绝经过本机且源自那些已经被禁止的主机的icmp的IP压缩 下面再详细说说各个参数的意思： -A：表示添加一条规则(add) 相应的还有：-P（设置规则的缺省值，比如-P INPUT ACCEPT表示没有以本机为目的地的IP压缩默认是接受的） -F（清楚所有存在的规则，好添加新的规则） -j：表示满足规则执行的相应的操作，意为jump，比如 ……-j ACCEPT就表示满足相应的规则就接受 -i：界面的意思（interface），lo是本机的意思（localhost） 注意，编辑完iptables文件之后，使用service iptables restart重启防火墙，可以使用命令：iptables -L查看规则是否生效 或者使用命令行 （1）重启后永久性生效： 开启：chkconfig iptables on 关闭：chkconfig iptables off （2）即时生效，重启后失效： 开启：service iptables start 关闭：service iptables stop 比如局域网中搭建了一台centOS作为服务器，并且建立了LAMP或者LNMP环境，想让局域网中的其他人都能通过web访问该机器，那么先得固定机器的IP地址，将BOOTPROTO改成static，然后将IPADDR设置一个固定的IP（比如192.168.1.22），在设置子网掩码NETMASK（比如255.255.255.0），NETWORK和GATAWAY和DNS等也设置好，然后就是信任来自本局域网的访问了，添加下面的规则到iptables中，再重启防火墙即可。具体如何配置网络看这里：CentOS网络配置详解 -A INPUT -i eth0 -j ACCEPT #eth0是你的网卡号，用ifconfig -a命令查看你自己的网卡号 或者你想信任来自一系列IP的访问，可以用斜线记法规定IP的范围，比如： -A INPUT -s 192.168.1.0/24 -j ACCEPT #即接受来自192.168.1.0-192.168.1.255的ip区段的IP压缩 或者为每一个IP添加一条规则，但是当IP比较多时会很麻烦，比如 -A INPUT -s 192.168.1.22 -j ACCEPT 打开80端口的规则 -A INPUT -p tcp –dport 80 -j ACCEPT 参考 https://www.awaimai.com/1650.html]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux查看服务器基础信息]]></title>
    <url>%2F2017%2F10%2F10%2Flinux%2Flinux-basic.html</url>
    <content type="text"><![CDATA[who: 查看服务器当前登陆的用户 who /var/log/wtmp arp: 查看服务器mac信息 cat /var/log/secure : 查看最近有谁登陆过服务器，也可以看ssh登陆失败日志 finger： 需要安装该命令才可以使用，用于查看并显示指定帐号的用户相关信息 lastlogcat /var/log/lastlog lastlog文件在每次有用户登录时被查询。可以使用lastlog命令检查某特定用户上次登录的时间，并格式化输出上次登录日志/var/log/lastlog的内容 另外，可加一些参数，例如，”last -u 102”命令将报告UID为102的用户;”last -t 7”命令表示限制为上一周的报告。 修改主机名称centos修改主机名称 hostnamectl set-hostname fastdfs-1要永久修改主机名，你可以修改静态主机名：hostnamectl --static set-hostname [主机名] 通过文件配置主机名:需要修改2个文件: /etc/hostsname 和 /etc/hosts]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux流程控制语句之if]]></title>
    <url>%2F2017%2F10%2F10%2Flinux%2Flinux-if.html</url>
    <content type="text"><![CDATA[语法： if ….; then ….elif ….; then ….else ….fi [ -f “somefile” ] ：判断是否是一个文件[ -x “/bin/ls” ] ：判断/bin/ls是否存在并有可执行权限[ -n “$var” ] ：判断$var变量是否有值[ “$a” = “$b” ] ：判断$a和$b是否相等 -r file 用户可读为真 -w file 用户可写为真 -x file 用户可执行为真 -f file 文件为正规文件为真 -d file 文件为目录为真 -c file 文件为字符特殊文件为真 -b file 文件为块特殊文件为真 -s file 文件大小非0时为真 -t file 当文件描述符(默认为1)指定的设备为终端时为真 含条件选择的shell脚本 对于不含变量的任务简单shell脚本一般能胜任。但在执行一些决策任务时，就需要包含if/then的条件判断了。shell脚本编程支持此类运算，包括比较运算、判断文件是否存在等。基本的if条件命令选项有： - eq —比较两个参数是否相等（例如，if [ 2 –eq 5 ]）-ne —比较两个参数是否不相等-lt —参数1是否小于参数2-le —参数1是否小于等于参数2-gt —参数1是否大于参数2-ge —参数1是否大于等于参数2-f — 检查某文件是否存在（例如，if [ -f “filename” ]）-d — 检查目录是否存在几乎所有的判断都可以用这些比较运算符实现。脚本中常用-f命令选项在执行某一文件之前检查它是否存在。 ##################################################################判断文件是否存在 #!/bin/shYACCESS=date -d yesterday +%Y%m%dFILE=”access_$YACCESS.log.tgz”cd /data/nginx/logsif [ -f “$FILE” ];thenecho “OK”elseecho “error $FILE” &gt; error.logmail -s “$FILE backup fail” xxxx@yyyy.com &lt;error.logfi ############### #!/bin/sh #DIR=/data/img_cacheDAY=date +&quot;%Y-%m-%d %H:%M&quot;NUM=ls $DIR |wc -lDIRNAME=ls $DIR| grep leveldb | head -n 1 | awk &#39;{print $NF}&#39;if [[ $NUM -gt 3 ]];then rm -rf $DIR/$DIRNAME echo “———$DAY—-($DIR)———————–” &gt;&gt; /tmp/img_cache.log echo “$DIRNAME Deleted successful” &gt;&gt; /tmp/img_cache.logfi补充：文件测试操作：返回true，如果：-e 文件存在-a 文件存在（已被弃用）-f 被测文件是一个regular文件（正常文件，非目录或设备）-s 文件长度不为0-d 被测对象是目录-b 被测对象是块设备-c 被测对象是字符设备-p 被测对象是管道-h 被测文件是符号连接-L 被测文件是符号连接-S(大写) 被测文件是一个socket-t 关联到一个终端设备的文件描述符。用来检测脚本的stdin[-t0]或[-t1]是一个终端-r 文件具有读权限，针对运行脚本的用户-w 文件具有写权限，针对运行脚本的用户-x 文件具有执行权限，针对运行脚本的用户-u set-user-id(suid)标志到文件，即普通用户可以使用的root权限文件，通过chmod +s file实现-k 设置粘贴位-O 运行脚本的用户是文件的所有者-G 文件的group-id和运行脚本的用户相同-N 从文件最后被阅读到现在，是否被修改f1 -nt f2 文件f1是否比f2新f1 -ot f2 文件f1是否比f2旧f1 -ef f2 文件f1和f2是否硬连接到同一个文件二元比较操作符，比较变量或比较数字整数比较：-eq 等于 if [ “$a” -eq “$b” ]-ne 不等于 if [ “$a” -ne “$b” ]-gt 大于 if [ “$a” -gt “$b” ]-ge 大于等于 if [ “$a” -ge “$b” ]-lt 小于 if [ “$a” -lt “$b” ]-le 小于等于 if [ “$a” -le “$b” ]&lt; 小于（需要双括号） (( “$a” &lt; “$b” ))&lt;= 小于等于(…) (( “$a” &lt;= “$b” )) 大于(...) (( "$a" &gt; "$b" )) = 大于等于(…) (( “$a” &gt;= “$b” ))字符串比较：= 等于 if [ “$a” = “$b” ]== 与=等价!= 不等于 if [ “$a” = “$b” ]&lt; 小于，在ASCII字母中的顺序： if [[ “$a” &lt; “$b” ]] if [ “$a” \&lt; “$b” ] #需要对&lt;进行转义 大于-z 字符串为null，即长度为0-n 字符串不为null，即长度不为0 二、语法在“判断条件”这个字段里可以直接写入bash下的命令、也可以写成条件测试在判断条件中要进行条件测试： 条件测试方式：“[ expression ]”一个中括弧里写表达式， “[[ expression ]]”两个中括弧里写上表达式 “test expression” “bash命令” 条件测试的类型：整数测试 expression:[ 数值1 比较符 数值2 ] 比较符一般有以下几种： 大于：-gt(greater than)，大于等于：-ge(greater equal)，小于：-lt(less than)，小于等于：le(less equal)，不等于：-ne(not equal) 字符测试 "\&gt;"：大于 "\&lt;"：小于 "=="或者"="：等于 "=~"：判断左边的字符串能否被右边的模式所匹配，通常用于[[ expression ]] 单目测试： -z：格式为"[ -z $STRING ]"，表示为空值时则为真，不为空值时则为假 -n：格式为"[ -n $STRING ]"，表示为空值时则为假，不为空值时则为真 文件、目录测试 -d：测试目录是否存在 -f：测试档案是否存在 组合条件测试：当有多个测试条件时，我们可以把这些测试条件组合起来使用： -a：逻辑与 -o：逻辑或 ！：逻辑非，这是单目操作 当是bash命令之间组合测试时，则： &amp;&amp;：逻辑与 ||：逻辑或 ！：逻辑非 三、例子1、写一个脚本来测试一个用户是不是管理员，如果是管理员则显示“用户名 is admin”,如果是系统用户刚显示“用户名 is system user”,否则显示“用户名 is common user”1234567891011121314#!/bin/bash#Uid=`id -u $1 &amp;&gt; /dev/null`if [ -z $Uid ];then echo "No such user $1;" exit 8fiif [ $Uid -eq '0' ];then echo "$1 is admin."elif [ $Uid -gt '0' -a $Uid -lt '500' ];then //这里用到了逻辑与运算 echo "$1 is system user."elif [ $Uid -ge '500' ];then echo "$1 is common user."fi 2、写一个脚本测试一个用户的shell是不是/bin/bash，如果是那输出“用户名 is bash user.”,否则输出“用户名 is no bash user.”123456789101112#!/bin/bash#Bash=`grep "^$1\&gt;" /etc/passwd | cut -d: -f7`if [ -z $Bash ];then echo "No such user $1." exit 9fiif [ $Bash == "/bin/bash" ];then echo "$1 is bash user."else echo "$1 is not bash user."fi 3、写一个备份脚本，传递参数“gzip,bzip2,xz”给脚本，让脚本调用相应的压缩工具对备份文件进行压缩，当用户没有给定参数时，则调用gzip进行压缩。把/etc目录下的所有文件归档压缩后备份到/backup目录下，备份的文件名为”etc-日期-时间”的形式，1234567891011121314151617181920#!/bin/bash#Com=$1[ -z /backup ] || mkdir /backup &amp;&gt; /dev/null //当无/backup时则建立if [ -z $Com ];then Com=gzipfiif [ $Com == 'gzip' ];then tar zcf /backup/etc-`date +%F-%H:%M:%S.tar.gz` /etc/* &amp;&gt; /dev/null [ $? == 0 ] &amp;&amp; echo "Backup etc finished.(gzip)."elif [ $Com == 'bzip2' ];then tar jcf /backup/etc-`date +%F-%H:%M:%S.tar.bz2` /etc/* &amp;&gt; /dev/null [ $? == 0 ] &amp;&amp; echo "Backup etc finished.(bz2)."elif [ $Com == 'xz' ];then tar Jcf /backup/etc-`date +%F-%H:%M:%S.tar.xz` /etc/* &amp;&gt; /dev/null [ $? == 0 ] &amp;&amp; echo "Backup etc finished.(xz)."else echo "Usage:`basename $0` &#123;[gzip|bzip2|xz]&#125;" exit=7fi 此脚本在centos5.8上不tar不能调用xz压缩工具进行工作，man tar发现选项里没有“J”选项，但在centos 6.2上能正常工作，应该是tar版本问题。 4 判断上一个语句是否正常执行]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux网络命令之ssh]]></title>
    <url>%2F2017%2F10%2F10%2Flinux%2Flinux-ssh.html</url>
    <content type="text"><![CDATA[一、基础12345678usage: ssh [-1246AaCfgKkMNnqsTtVvXxYy] [-b bind_address] [-c cipher_spec] [-D [bind_address:]port] [-e escape_char] [-F configfile] [-I pkcs11] [-i identity_file] [-L [bind_address:]port:host:hostport] [-l login_name] [-m mac_spec] [-O ctl_cmd] [-o option] [-p port] [-R [bind_address:]port:host:hostport] [-S ctl_path] [-W host:port] [-w local_tun[:remote_tun]] [user@]hostname [command] 主要参数说明： -l 指定登入用户 -p 设置端口号 -f 后台运行，并推荐加上 -n 参数 -n 将标准输入重定向到 /dev/null，防止读取标准输入 -N 不执行远程命令，只做端口转发 -q 安静模式，忽略一切对话和错误提示 -T 禁用伪终端配置 二、常用案例2.1 远程执行bash命令 ssh -l www-online 192.168.110.34 “cat /proc/cpuinfo” 不过一般执行后，可以写这样的语句来判断执行有无异常 ssh 调用远程命令后不能自动退出解决方法可以将标准输出与标准错误输出重定向到/dev/null，这样就不会一直处于等待状态。 ssh -l www-online 192.168.110.34 “/home/www-online/uptimelog.sh &gt; /dev/null 2&gt;&amp;1 &amp;” 实际上，想ssh退出，我们可以在ssh执行完成后kill掉ssh这个进程来实现。首先，创建一个sh执行ssh的命令,这里需要用到ssh的 -f 与 -n 参数，因为我们需要ssh也以后台方式运行，这样才可以获取到进程号进行kill操作。创建ssh_uptimelog.sh，脚本如下 1234567891011#!/bin/bashssh -f -n -l www-online 192.168.110.34 "/home/www-online/uptimelog.sh &amp;" # 后台运行sshpid=$(ps aux | grep "ssh -f -n -l www-online 192.168.110.34 /home/www-online/uptimelog.sh" | awk '&#123;print $2&#125;' | sort -n | head -n 1) # 获取进程号echo "ssh command is running, pid:$&#123;pid&#125;"sleep 3 &amp;&amp; kill $&#123;pid&#125; &amp;&amp; echo "ssh command is complete" # 延迟3秒后执行kill命令，关闭ssh进程，延迟时间可以根据调用的命令不同调整exit 0 三、SSH配置修改3.1 加速ssh登陆ssh默认开启GSSAPIAuthentication登陆验证，将其设置为no就可以了，配置文件在/etc/ssh/ssh_config,修改重启sshd即可 说明如： GSSAPI：Generic Security Services Application Program Interface，GSSAPI 本身是一套 API，由 IETF 标准化。其最主要也是著名的实现是基于 Kerberos 的。一般说到 GSSAPI 都暗指 Kerberos 实现。GSSAPI 是一套通用网络安全系统接口。该接口是对各种不同的客户端服务器安全机制的封装，以消除安全接口的不同，降低编程难度。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux网络命令之端口扫描nmap]]></title>
    <url>%2F2017%2F10%2F10%2Flinux%2Flinux-nmap.html</url>
    <content type="text"><![CDATA[Nmap是一款用于网络发现和安全审计的安全工具，常用于端口扫描。 一、Nmap介绍 扫描类型 -sT TCP 连接扫描，会在目标主机中记录大量的链接请求和错误信息 -sS SYN扫描，只完成三次握手前两次，很少有系统记入日志，默认使用，需要root(admin)权限 -sP Ping扫描，默认使用，只有能Ping得通才会继续扫描 -P0 扫描之前不需要Ping，用于绕过防火墙禁Ping功能 -sA 高级的扫描方式，用来穿过防火墙的规则集 -sV 探测端口号版本 -sU UDP扫描，扫描主机开启的UDP的服务，速度慢，结果不可靠 -sX -sN 秘密的FIN数据包扫描，圣诞树(Xmas Tree)和空模式，针对Unix和Linux主机，系统要求遵循TCP RFC文档 扫描参数 -v 显示扫描过程，推荐使用 -h 帮助文档 -p 指定端口号，如[1-65535],[22,135,1433,3306,]等格式 -O 启动远程操作系统监测，存在误报 -A 全面系统监测，使用脚本检测，扫描等 -T4 针对TCP端口禁止动态扫描延迟超过10ms -iL 批量扫描，读取主机列表，如[-iL C:\ip.txt] 二、扫描案例2.1. 扫描C段（局域网）存活主机nmap -sP www.XXX.com/24 nmap -sP 192.168.1.* （注释：“*”为通配符） 2.2. 扫描指定IP开放端口号nmap -sS -p- -v 192.168.1.100 -p-为全端口扫描，和[1-65535]一样，建议使用 不使用默认Nmap认为危险的100个端口号 2.3. 扫描指定IP所开端口及服务版本nmap -sV -v 192.168.1.100 2.4. 探测主机操作系统nmap -O www.XXX.com 扫描准确度以百分比显示，未必准确 2.5. 穿透防火墙扫描nmap -P0 www.XXX.com 2.6. 全面探测，-A包含OS 探测，版本探测，脚本扫描，traceroutenmap -A www.XXX.com 2.7. 使用脚本扫描，nmap --script="脚本名称" www.XXX.com 如在局域网上扫找 Conficker 蠕虫病毒 nmap -PN -T4 -p139,445 -n -v --script=smb-check-vulns --script-args safe=1 192.168.0.1-254 脚本放在Nmap安装目录script下，官网可查各个脚本功能]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux之文件和目录操作]]></title>
    <url>%2F2017%2F10%2F09%2Flinux%2Flinux-file-dir.html</url>
    <content type="text"><![CDATA[dirname $0，取得当前执行的脚本文件的父目录 cd dirname $0，进入这个目录(切换当前工作目录) pwd，显示当前工作目录(cd执行后的) 由此，我们获得了当前正在执行的脚本的存放路径。 bash循环读入文件的每一行并处理 cat afile | while read onelinedo echo $onelinedone这只是个简单例子，把文件afile的每一行读入，然后显示出来。 也可以这样(如果行中有空格或者tab则无法使用此方法,不好意思啊,呵呵):for i in cat afiledoecho $idone 逐行处理文件内容12345678910111213141516171819202122232425262728$ 通过read命令完成cat data.dat | while read linedo echo "File:$&#123;line&#125;"donewhile read linedo echo "File:$&#123;line&#125;"done &lt; data.dat$ 使用awk命令完成cat data.dat | awk '&#123;print $0&#125;'cat data.dat | awk 'for(i=2;i&lt;NF;i++) &#123;printf $i&#125; printf "\n"&#125;'$ 使用for var in file 命令完成for line in $(cat data.dat)do echo "File:$&#123;line&#125;"donefor line in `cat data.dat`do echo "File:$&#123;line&#125;"done 补充： 如果输入文本每行中没有空格，则line在输入文本中按换行符分隔符循环取值． 如果输入文本中包括空格或制表符，则不是换行读取，line在输入文本中按空格分隔符或制表符或换行符特环取值． 可以通过把IFS设置为换行符来达到逐行读取的功能．]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux网络命令之netstat]]></title>
    <url>%2F2017%2F10%2F09%2Flinux%2Flinux-netstat.html</url>
    <content type="text"><![CDATA[netstat是linux下网络情况命令，同样的window下也是一样，下面说说他的基础使用和常用情景。 一、命令帮助二、常见案例2.1 查看端口是否被占用例如查询8080端口是否被占用，并可以查看pid/程序名 netstat -apn | grep 8080 一般找到端口使用的PID后可以执行如下进行关闭：12ps -ef | grep PID # 查看详细信息kill -9 PID # 终止该进程 附录window下使用： 1234567891、查询端口占用情况cmd &gt; netstat -ano2、查询8080端口是否被占用cmd &gt; netstat -ano|findstr 80803、查询哪个程序占用了端口cmd &gt; tasklist|findstr PID进程号通过2查询可以得到4、终止该占用进程cmd &gt; ntsd -c q -p PID 2.2 mac下网络查看 netstat -an | grep 3306 通过list open file命令可以查看到当前打开文件，在linux中所有事物都是以文件形式存在，包括网络连接及硬件设备。 lsof -i:80 -i参数表示网络链接，:80指明端口号，该命令会同时列出PID，方便kill 查看所有进程监听的端口 sudo lsof -i -P | grep -i “listen”]]></content>
  </entry>
  <entry>
    <title><![CDATA[MySQL时间处理]]></title>
    <url>%2F2017%2F09%2F21%2Fsql%2Fmysql-date-function.html</url>
    <content type="text"><![CDATA[mysql关于时间的函数有date_format,datediff等，这里整理一波。 DATE_FORMAT() DATEDIFF() TIMESTAMPDIFF() NOW()：输出当前时间，格式 Y-m-d H:i:s CURDATE(): 当前日期，格式 Y-m-d date_sub(): FROM_UNIXTIME(): select from_UNIXTIME(1505985895, &#39;%Y-%m-%d&#39;); to_days(): period_diff() : period_diff(date_format(now() , &#39;%Y%m&#39;) , date_format(&#39;2017-08-01&#39;, &#39;%Y%m&#39;)); str_to_date(): str_to_date(&quot;2010-11-23 14:39:51&quot;,&#39;%Y-%m-%d %H:%i:%s&#39;) 提醒： to_days() 不用于阳历出现(1582)前的值，原因是当日历改变时，遗失的日期不会被考虑在内。因此对于1582 年之前的日期(或许在其它地区为下一年 ), 该函数的结果实不可靠的。 MySQL”日期和时间类型”中的规则是将日期中的二位数年份值转化为四位。因此对于’1997-10-07’和’97-10-07’将被视为同样的日期]]></content>
  </entry>
  <entry>
    <title><![CDATA[GIT使用手册]]></title>
    <url>%2F2017%2F09%2F08%2Ftools%2Fgit-usage.html</url>
    <content type="text"><![CDATA[一、基本命令1.1 版本回退12345git reset --hard # 回退到当前版本（放弃所有修改）git checkout &#123;file_name&#125; # 放弃某个文件的修改git reset &#123;UUID&#125; # 回退到某一版本但保存自该版本起的修改git reset --hard &#123;UUID&#125; # 回退到某一版本并且放弃所有的修改git reset --hard origin/master # 回退到和远程版本一样, origin代表你远程仓库的名字，master代表分支名 1.2 git submodule使用这其实是 git 的子模块功能,作用是为了在项目中引入另一个项目的部分或全部内容，但是这两个项目是分开开发或管理的,这样直接使用 git submodule 就可以不必要将另一个项目复制一份直接引用即可。 常用 git submodule命令 12345678910111213git submodule add repourl # 添加 git 子模块git submodule init # 初次clone带有子模块的仓库如果想查看子模块的内容git submodule update # 或者 git submodule update --init --recursivevi .gitmodules # 更新子模块地址git submodule sync # 然后提交更改即可git rm --cached &#123;submodule_path&#125; # submodule_path即子模块在仓库下的路径(这之前需要删除删除 .gitsubmodule中对应submodule的条目 和 删除 .Git/config 中对应submodule的条目)git commit -m 'xxx'git push 具体的关于 git submodule 的说明以及使用，请点击这里 1.3 分支合并分支合并分为两种情况,一种是本地分支合并,一种是远程分支合并到本地分支 12git merge 分支名称 # 本地分支合并git pull origin master # 远程分支合并到本地分支 1.4 代码提交1.4.1 如何从众多提交中保留只需要的提交如果说在众多提交中,已某个提交为基准,只保留上游众多提交中的某个或者某几个,可以使用 cherry-pick命令,具体是: git cherry-pick 如果没有冲突,则回显示如下: 123Finished one cherry-pick.# On branch dev# Your branch is ahead of 'origin/dev' by 3 commits. 如果存在冲突,则需要解决冲突然后继续,关于如何冲突,请查看如何处理代码冲突小节 1.4.2 修改最后一次提交更多参考：http://git.mydoc.io/?t=83152 1.4.5 改写历史，去除大文件123git filter-branch --tree-filter 'rm -f path/to/large/files' --tag-name-filter cat -- --allgit push origin --tags --forcegit push origin --all --force 并告知所有组员，push 代码前需要 pull rebase，而不是 merge，否则会从该组员的本地仓库再次引入到远程库中 1.4.6 恢复已经被删除文件git checkout commit_id -- path_to_file可以试一下使用git ls-files -d | xargs -i git checkout {} 不过新的版本开始不支持了！ 二、配置http(s)方式自动记住密码123git config --global credential.helper cache # 记住密码十五分钟git config credential.helper 'cache --timeout=3600' # 这里记住的是一个小时，如需其他时间，请修改3600为你想修改的时间，单位是秒git config --global credential.helper store # 设置长期记住密码 或者，比如http://yourname:password@git.oschina.net/name/project.git //注意，码云平台同时支持个性地址与邮箱，当使用邮箱时，请对@符号使用%40替换 如果你原本使用的 ssh 地址想更换成 http(s) 地址，可以执行以下命令: 12git remote rm origin # 删除原本的ssh仓库地址 origin 代表你原本ssh地址的仓库的别名 git remote add origin http://git.oschina.net/username/project.git # 新增http地址的仓库 输入问题（git 出现warning crlf will be replaced by…）后面经常带 ^M 的时候是windows上传文件导致的，需要这样进行处理 1git config --global core.autocrlf input # Configure Git on OS X to properly handle line endings 产生这个问题的原因是，windows、Linux和Mac在处理文件换行时的标示符是不一致的。windows使用CRLF作为结束符，而Linux和Mac使用LF作为结束符。 同时呢，Git 有两种模式来对待换行符，你可以通过下面这行代码查看你的git配置。 123# 作为Linux和Mac开发者，这个配置应当为false，而windows开发者，则应当设置为true。git config core.autocrlf # 针对项目配置 - windows为主要开发环境git config --global core.autocrlf false #]]></content>
  </entry>
  <entry>
    <title><![CDATA[mpv播放器安装和使用]]></title>
    <url>%2F2017%2F09%2F04%2Ftools%2Fmpv-usage.html</url>
    <content type="text"><![CDATA[mpv是一个跨平台开源播放器。 一、安装二、使用三、配置3.1 默认快捷方式 左/右方向键 : 快进/后退5秒钟。shift+左右方向键可以以1秒为进度调节; 上/下方向键 : 快进/后退1分钟。shift+左右方向键可以以5秒为进度调节; [ 和 ] : 载入上一个/下一个字幕。受到一些限制，可能不会总是好使。; { 和 } : 半倍/双倍速度播放; BACKSPACE : 重制正常播放速度; &lt; 和 &gt; : 播放列表后一个/前一个; ENTER : 播放列表后一个。（Ps：播放列表只有选中播放多个视频时才有的功能，单独播放一个视频没有） p / SPACE : 暂停。再按一下继续播放; . : 按下一次会暂停，再次按下会进入到下一帧画面，视频依然是暂停状态。（考据党的最爱）; , : 按下一次会暂停，再次按下会进入到上一帧画面，视频依然是暂停状态。; q : 停止播放并立即退出; Q : 也是停止播放并立即退出。但是可以记录上次视频播放位置; **/ 和 * ** : 增大/减小音量; 9 和 0 : 增大/减小音量; m : 静音; 还有其他常用的很多，码字很辛苦，这里不一一列出，具体参考下官方文档吧！ 3.2 自定义配置]]></content>
  </entry>
  <entry>
    <title><![CDATA[aria2远程下载利器]]></title>
    <url>%2F2017%2F08%2F31%2Ftools%2Faria2-usage.html</url>
    <content type="text"><![CDATA[安装aria2路程很颠簸，最好不用全部依赖包都编译，太耗时间了。所以，就有本文了，下面是我个人vps在centos 6.8 下安装成功的范例，免费拿去吧！ 一、aria2安装12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#!/bin/bash# install aria2 for centos 6.8# author: boxcore# aria2 docs：https://github.com/aria2/aria2# more gnu project for download : http://ftp.gnu.org/gnu/ ; ftp://gcc.gnu.org/pub/gcc/infrastructure/# # aria2 gui tools:# for mac: https://github.com/yangshun1029/aria2gui/releases# yum install bison libssh2-devel expat-devel gmp-devel nettle-devel libuv-devel libssh2-devel zlib-devel c-ares-devel cppunit-devel gnutls-devel libgcrypt-devel libxml2-devel sqlite-devel gettext lzma-devel xz-devel gperftools gperftools-devel gperftools-libs jemalloc-devel## install gcc 4.8##wget http://people.centos.org/tru/devtools-2/devtools-2.repo -O /etc/yum.repos.d/devtools-2.repoyum install devtoolset-2-gcc devtoolset-2-binutils devtoolset-2-gcc-c++ln -s /opt/rh/devtoolset-2/root/usr/bin/* /usr/local/bin/hash -rg++ --version## install libuv, see https://github.com/libuv/libuvwget https://dist.libuv.org/dist/v1.9.1/libuv-v1.9.1.tar.gztar vxf libuv-v1.9.1.tar.gzcd libuv-v1.9.1sh autogen.sh./configuremakemake checkmake install## install jemalloc, see: http://jemalloc.net/wget https://github.com/jemalloc/jemalloc/releases/download/5.0.1/jemalloc-5.0.1.tar.bz2tar vxf jemalloc-5.0.1.tar.bz2cd jemalloc-5.0.1./configuremakemake checkmake installcd /optwget https://github.com/aria2/aria2/releases/download/release-1.27.1/aria2-1.27.1.tar.gztar xzf aria2-1.27.1.tar.gzcd aria2-1.27.1./configure --enable-static=yes --enable-shared=no --with-libuv --with-jemalloc --with-ca-bundle='/etc/pki/tls/certs/ca-bundle.crt' ARIA2_STATIC=yesmake &amp;&amp; make check &amp;&amp; make install 然后，你就可以使用aria2c命令试一下咯。。。 二、aria2使用2.1 基本说明-c: 断点续传 -s: 使用线程数 当源地址存在诸如 &amp;, * 等 shell 的特殊字符，请使用单引号或双引号把 URI 包含起来。 2.2 常见命令123456aria2c -c -s 5 http://example.org/mylinux.isoaria2c http://a/f.iso ftp://b/f.iso # Download from 2 sourcesaria2c -x2 http://a/f.iso # Download using 2 connections per hostaria2c 'magnet:?xt=urn:btih:248D0A1CD08284299DE78D5C1ED359BB46717D8C' # BitTorrent Magnet URI 三、aria2前端管理工具 webui-aria2: https://github.com/ziahamza/webui-aria2.git AriaNg: https://github.com/mayswind/AriaNg.git 四、aria2相关工具 https://github.com/mayswind/AriaNg, https://doub.io/wlzy-30/ https://doub.io/wlzy-30/ https://github.com/ziahamza/webui-aria2 https://github.com/binux/yaaw https://dy.ghostry.cn/ 参考 http://skypegnu1.blog.51cto.com/8991766/1637168 http://moflying.com/2016/06/05/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8aria2%E5%8F%8Awebui-aria2%E4%B8%8B%E8%BD%BD%E7%99%BE%E5%BA%A6%E4%BA%91%E8%B5%84%E6%BA%90/]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>下载</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP设计模式]]></title>
    <url>%2F2017%2F08%2F27%2Fphp%2Fphp-design-patterns.html</url>
    <content type="text"><![CDATA[笔记内容来自慕课 大话PHP设计模式。 一、面向对象的高级特性这里主要是学习 第三章、命名空间和Autoload 和 第四章、PHP面向对象 2章的内容笔记 命名空间 namespace类自动载入旧的方法 123456789101112Test1::test();Test2::test();function __autoload($class)&#123; require __DIR__ . '/' . $class . '.php';&#125;spl_autoload_register('autoload2');function autoload2()&#123; require __DIR__ . '/' . $class . '.php';&#125; PSR-0规范内容： 命名空间必须与绝对路径一致 类名首字母必须大写 除入口文件外，其他.php必须只有一个类 开发符合psr-0规范的基础框架 全部使用命名空间 所有php文件必须自动载入，不能有include/require 单一入口 SPL库的使用（php标准库）主要参考文档：php标准库 SplStack、SplQueue、SplHeap、SplFixedArray等数据结构类 ArrayIterator、AppendIterator、Countable、ArrayObject SPL提供的函数 123456789101112131415161718192021222324$stack = new SplStack();$stack-&gt;push("data1\n");$stack-&gt;push("data2\n");echo $stack-&gt;pop(); // data2echo $stack-&gt;pop(); // data1$queue = new SplQueue();$queue-&gt;enqueue("data1\n");$queue-&gt;enqueue("data2\n");echo $queue-&gt;dequeue(); // data1echo $queue-&gt;dequeue(); // data2// 堆 （最小结构堆）$heap = new SplMinHeap();$heap-&gt;insert("data1\n");$heap-&gt;insert("data2\n");echo $heap-&gt;extract(); // data1echo $heap-&gt;extract(); // data2// 固定尺寸（长度）的数组$array = new SplFixedArray(10);$array[0] = 123;$array[9] = 1234; php链式操作链式操作实现： $db-&gt;where()-&gt;get(); 每个方法有返回值 php魔术方法的使用 get/set: call/callstatic: __toString: __invoke: 将一个php对象当做一个函数执行 二、设计模式3种基本设计模式 工厂模式：工厂方法或者类生产对象，而不是在代码中直接new 单例模式：使某个类的对象仅允许创建一个 注册模式：全局共享和交换对象 其他设计模式 适配器模式策略模式数据对象映射模式观察者模式原型模式装饰器模式迭代器模式代理模式 一、工厂模式]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux下载工具curl使用]]></title>
    <url>%2F2017%2F08%2F23%2Flinux%2Fcurl-usage.html</url>
    <content type="text"><![CDATA[curl是一个开源的用于数据传输的命令行工具与库，它使用URL语法格式，支持众多传输协议，包括：HTTP、HTTPS、FTP、FTPS、GOPHER、TFTP、SCP、SFTP、SMB、TELNET、DICT、LDAP、LDAPS、FILE、IMAP、SMTP、POP3、RTSP和RTMP。curl库提供了很多强大的功能，你可以利用它来进行HTTP/HTTPS请求、上传/下载文件等，且支持Cookie、认证、代理、限速等。 一、CURL使用常用的一些参数 -e,--referer &lt;URL&gt;: 指定来源的网页 -v: 显示http握手过程 -i: 显示header信息 -I: 只显示header信息 --trace,--trace-ascii &lt;FILE&gt; : 查看更详细的通信过程 -X POST --data &quot;data=xxx&quot;,--data-urlencode &quot;date=April 1&quot;：POST参数，使用–data-urlencode配置时会对参数进行urlencode --form upload=&lt;localfilename&gt; --form press=OK：文件上传 --user-agent &quot;[User Agent]&quot;：UA参数 -c &lt;cookie file&gt;: 保存服务器返回的COOKIE文件 -b &lt;cookie file&gt;: 使用COOKIE文件 -H,--header &#39;&lt;param&gt;&#39;：自定义头信息，上面其他的参数都可以在这里写完整的header头信息； 1.1 URL访问下面是curl常用的一些方法：12345curl boxcore.xxx # 访问网页curl -L itbilu.com # 跟踪URL重定向curl -o [文件名] itbilu.com # 页面保存curl -i itbilu.com # 查看头信息使用-i或--include参数，添加-i参数后，页面响应头会和页面源码（响应体）一块返回curl -I itbilu.com # 只想查看响应头，可以使用-I或--head参数： 1.2 表单提交和文件上传123456curl https://itbilu.com/?keyword=linux&amp;page=3 curl -X POST --data 'keyword=linux' itbilu.com # -X参数指定请求方法，--data参数添加提交数据curl -X DELETE itbilu.com/examlple.html # 其它HTTP请求方法，比如使用DELETE请求curl -X PUT --data 'keyword=linux' itbilu.com # 使用PUT请求，并指定请求数据curl -T ./index.html www.uploadhttp.com/receive.cgi # curl支持文件上传，上传文件时使用-T或--upload-file参数 1.3 HTTPS支持12curl https://itbilu.comcurl -E mycert.pem https:/itbilu.com # 如果使用的本地ssl证书认证的HTTPS，可以通过-E或--cert参数指定本地证书 1.4 添加请求头1curl -H 'Content-Type:application/json' -H 'Authorization: account pswd' itbilu.com # 指定Content-Type及Authorization请求头： 1.5 Cookie支持Cookie是一种常用的保持服务端会话信息的方法，crul也支持使用Cookie。可以通过–cookie参数指定发送请求时的Cookie值，也可以通过-b [文件名]来指定一个存储了Cookie值的本地文件：curl -b stored_cookies_in_file itbilu.com Cookie值可能会被服务器所返回的值所修改，并应用于下次HTTP请求。这时，可以能过-c参数指定存储服务器返回Cookie值的存储文件：curl -b cookies.txt -c newcookies.txt itbilu.com 除以上用法外，curl还可以设置用户代理（客户端）信息、使用代理服务器、指定认证用户名／密码等。详见：curl语法及选项 二、curl语法及选项语法curl语法结构如下： curl [options…] 参数选项curl（7.29.0）所支持的选项（options）参数如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157在以下选项中，(H) 表示仅适用 HTTP/HTTPS ，(F) 表示仅适用于 FTP --anyauth 选择 &quot;any&quot; 认证方法 (H)-a, --append 添加要上传的文件 (F/SFTP) --basic 使用HTTP基础认证（Basic Authentication）(H) --cacert FILE CA 证书，用于每次请求认证 (SSL) --capath DIR CA 证书目录 (SSL)-E, --cert CERT[:PASSWD] 客户端证书文件及密码 (SSL) --cert-type TYPE 证书文件类型 (DER/PEM/ENG) (SSL) --ciphers LIST SSL 秘钥 (SSL) --compressed 请求压缩 (使用 deflate 或 gzip)-K, --config FILE 指定配置文件 --connect-timeout SECONDS 连接超时设置-C, --continue-at OFFSET 断点续转-b, --cookie STRING/FILE Cookies字符串或读取Cookies的文件位置 (H)-c, --cookie-jar FILE 操作结束后，要写入 Cookies 的文件位置 (H) --create-dirs 创建必要的本地目录层次结构 --crlf 在上传时将 LF 转写为 CRLF --crlfile FILE 从指定的文件获得PEM格式CRL列表-d, --data DATA HTTP POST 数据 (H) --data-ascii DATA ASCII 编码 HTTP POST 数据 (H) --data-binary DATA binary 编码 HTTP POST 数据 (H) --data-urlencode DATA url 编码 HTTP POST 数据 (H) --delegation STRING GSS-API 委托权限 --digest 使用数字身份验证 (H) --disable-eprt 禁止使用 EPRT 或 LPRT (F) --disable-epsv 禁止使用 EPSV (F)-D, --dump-header FILE 将头信息写入指定的文件 --egd-file FILE 为随机数据设置EGD socket路径(SSL) --engine ENGINGE 加密引擎 (SSL). &quot;--engine list&quot; 指定列表-f, --fail 连接失败时不显示HTTP错误信息 (H)-F, --form CONTENT 模拟 HTTP 表单数据提交（multipart POST） (H) --form-string STRING 模拟 HTTP 表单数据提交 (H) --ftp-account DATA 帐户数据提交 (F) --ftp-alternative-to-user COMMAND 指定替换 &quot;USER [name]&quot; 的字符串 (F) --ftp-create-dirs 如果不存在则创建远程目录 (F) --ftp-method [MULTICWD/NOCWD/SINGLECWD] 控制 CWD (F) --ftp-pasv 使用 PASV/EPSV 替换 PORT (F)-P, --ftp-port ADR 使用指定 PORT 及地址替换 PASV (F) --ftp-skip-pasv-ip 跳过 PASV 的IP地址 (F) --ftp-pret 在 PASV 之前发送 PRET (drftpd) (F) --ftp-ssl-ccc 在认证之后发送 CCC (F) --ftp-ssl-ccc-mode ACTIVE/PASSIVE 设置 CCC 模式 (F) --ftp-ssl-control ftp 登录时需要 SSL/TLS (F)-G, --get 使用 HTTP GET 方法发送 -d 数据 (H)-g, --globoff 禁用的 URL 队列 及范围使用 &#123;&#125; 和 []-H, --header LINE 要发送到服务端的自定义请求头 (H)-I, --head 仅显示响应文档头-h, --help 显示帮助-0, --http1.0 使用 HTTP 1.0 (H) --ignore-content-length 忽略 HTTP Content-Length 头-i, --include 在输出中包含协议头 (H/F)-k, --insecure 允许连接到 SSL 站点，而不使用证书 (H) --interface INTERFACE 指定网络接口／地址-4, --ipv4 将域名解析为 IPv4 地址-6, --ipv6 将域名解析为 IPv6 地址-j, --junk-session-cookies 读取文件中但忽略会话cookie (H) --keepalive-time SECONDS keepalive 包间隔 --key KEY 私钥文件名 (SSL/SSH) --key-type TYPE 私钥文件类型 (DER/PEM/ENG) (SSL) --krb LEVEL 启用指定安全级别的 Kerberos (F) --libcurl FILE 命令的libcurl等价代码 --limit-rate RATE 限制传输速度-l, --list-only 只列出FTP目录的名称 (F) --local-port RANGE 强制使用的本地端口号-L, --location 跟踪重定向 (H) --location-trusted 类似 --location 并发送验证信息到其它主机 (H)-M, --manual 显示全手动 --mail-from FROM 从这个地址发送邮件 --mail-rcpt TO 发送邮件到这个接收人(s) --mail-auth AUTH 原始电子邮件的起始地址 --max-filesize BYTES 下载的最大文件大小 (H/F) --max-redirs NUM 最大重定向数 (H)-m, --max-time SECONDS 允许的最多传输时间 --metalink 处理指定的URL上的XML文件 --negotiate 使用 HTTP Negotiate 认证 (H)-n, --netrc 必须从 .netrc 文件读取用户名和密码 --netrc-optional 使用 .netrc 或 URL; 将重写 -n 参数 --netrc-file FILE 设置要使用的 netrc 文件名-N, --no-buffer 禁用输出流的缓存 --no-keepalive 禁用 connection 的 keepalive --no-sessionid 禁止重复使用 SSL session-ID (SSL) --noproxy 不使用代理的主机列表 --ntlm 使用 HTTP NTLM 认证 (H)-o, --output FILE 将输出写入文件，而非 stdout --pass PASS 传递给私钥的短语 (SSL/SSH) --post301 在 301 重定向后不要切换为 GET 请求 (H) --post302 在 302 重定向后不要切换为 GET 请求 (H) --post303 在 303 重定向后不要切换为 GET 请求 (H)-#, --progress-bar 以进度条显示传输进度 --proto PROTOCOLS 启用/禁用 指定的协议 --proto-redir PROTOCOLS 在重定向上 启用/禁用 指定的协议-x, --proxy [PROTOCOL://]HOST[:PORT] 在指定的端口上使用代理 --proxy-anyauth 在代理上使用 &quot;any&quot; 认证方法 (H) --proxy-basic 在代理上使用 Basic 认证 (H) --proxy-digest 在代理上使用 Digest 认证 (H) --proxy-negotiate 在代理上使用 Negotiate 认证 (H) --proxy-ntlm 在代理上使用 NTLM 认证 (H)-U, --proxy-user USER[:PASSWORD] 代理用户名及密码 --proxy1.0 HOST[:PORT] 在指定的端口上使用 HTTP/1.0 代理-p, --proxytunnel 使用HTTP代理 (用于 CONNECT) --pubkey KEY 公钥文件名 (SSH)-Q, --quote CMD 在传输开始前向服务器发送命令 (F/SFTP) --random-file FILE 读取随机数据的文件 (SSL)-r, --range RANGE 仅检索范围内的字节 --raw 使用原始HTTP传输，而不使用编码 (H)-e, --referer Referer URL (H)-J, --remote-header-name 从远程文件读取头信息 (H)-O, --remote-name 将输出写入远程文件 --remote-name-all 使用所有URL的远程文件名-R, --remote-time 将远程文件的时间设置在本地输出上-X, --request COMMAND 使用指定的请求命令 --resolve HOST:PORT:ADDRESS 将 HOST:PORT 强制解析到 ADDRESS --retry NUM 出现问题时的重试次数 --retry-delay SECONDS 重试时的延时时长 --retry-max-time SECONDS 仅在指定时间段内重试-S, --show-error 显示错误. 在选项 -s 中，当 curl 出现错误时将显示-s, --silent Silent模式。不输出任务内容 --socks4 HOST[:PORT] 在指定的 host + port 上使用 SOCKS4 代理 --socks4a HOST[:PORT] 在指定的 host + port 上使用 SOCKSa 代理 --socks5 HOST[:PORT] 在指定的 host + port 上使用 SOCKS5 代理 --socks5-hostname HOST[:PORT] SOCKS5 代理，指定用户名、密码 --socks5-gssapi-service NAME 为gssapi使用SOCKS5代理服务名称 --socks5-gssapi-nec 与NEC Socks5服务器兼容-Y, --speed-limit RATE 在指定限速时间之后停止传输-y, --speed-time SECONDS 指定时间之后触发限速. 默认 30 --ssl 尝试 SSL/TLS (FTP, IMAP, POP3, SMTP) --ssl-reqd 需要 SSL/TLS (FTP, IMAP, POP3, SMTP)-2, --sslv2 使用 SSLv2 (SSL)-3, --sslv3 使用 SSLv3 (SSL) --ssl-allow-beast 允许的安全漏洞，提高互操作性(SSL) --stderr FILE 重定向 stderr 的文件位置. - means stdout --tcp-nodelay 使用 TCP_NODELAY 选项-t, --telnet-option OPT=VAL 设置 telnet 选项 --tftp-blksize VALUE 设备 TFTP BLKSIZE 选项 (必须 &gt;512)-z, --time-cond TIME 基于时间条件的传输-1, --tlsv1 使用 =&gt; TLSv1 (SSL) --tlsv1.0 使用 TLSv1.0 (SSL) --tlsv1.1 使用 TLSv1.1 (SSL) --tlsv1.2 使用 TLSv1.2 (SSL) --trace FILE 将 debug 信息写入指定的文件 --trace-ascii FILE 类似 --trace 但使用16进度输出 --trace-time 向 trace/verbose 输出添加时间戳 --tr-encoding 请求压缩传输编码 (H)-T, --upload-file FILE 将文件传输（上传）到指定位置 --url URL 指定所使用的 URL-B, --use-ascii 使用 ASCII/text 传输-u, --user USER[:PASSWORD] 指定服务器认证用户名、密码 --tlsuser USER TLS 用户名 --tlspassword STRING TLS 密码 --tlsauthtype STRING TLS 认证类型 (默认 SRP) --unix-socket FILE 通过这个 UNIX socket 域连接-A, --user-agent STRING 要发送到服务器的 User-Agent (H)-v, --verbose 显示详细操作信息-V, --version 显示版本号并退出-w, --write-out FORMAT 完成后输出什么 --xattr 将元数据存储在扩展文件属性中-q .curlrc 如果作为第一个参数无效 三、我的实战操作post数据curl -d &quot;username=xxx&amp;password=abc&amp;secret=true&quot; &quot;URL&quot; 上传文件通过脚本发送post请求，顺便附带文本数据，比如通过”浏览”选择本地的card.txt并上传发送post请求：curl -F &quot;blob=@card.txt;type=text/plain&quot; &quot;http://172.16.102.208:8089/wiapi/score?leaderboard_id=7778a8143f111272&amp;score=40&amp;app_key=8d49f16fe034b98b&amp;_test_user=test01&quot; 其中-F 为带文件的形式发送post请求， blob为文本框中的name元素对应的属性值。 指定hosts访问 curl -H “Host:jp.laikansha.com” “http://216.239.32.21/time.php“ 参考 https://itbilu.com/linux/man/4yZ9qH_7X.html]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Linux下载工具wget使用]]></title>
    <url>%2F2017%2F08%2F23%2Flinux%2Fwget-usage.html</url>
    <content type="text"><![CDATA[一、wget应用场景批量下载或递归下载网页中的所有文件： wget -r http://site.com/content_dir指定下载编码后再重命名: wget --restrict-file-names=ascii -m www.xxx.com/ 下载为ascii的文件名, 可以使用软件RenamePro8.0在“高级文件名变”更里面有一个“文件名编码与解码”，“ANSI编码URL字符串转换为文字” 参考 http://moper.me/wget-download-the-file-name-garbled.html http://rubyer.me/blog/111/]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux下载工具axel使用]]></title>
    <url>%2F2017%2F08%2F23%2Flinux%2Faxel-usage.html</url>
    <content type="text"><![CDATA[二、axelaxel tools是多线程下载工具 1234567891011121314$ 编译安装wget http://mirrors.boxcore.org/lnmp/axel-1.0b.tar.gztar zxvf axel-1.0b.tar.gzcd axel-1.0b./configuremake &amp;&amp; make installcd ../$ CentOS rpm包安装wget -c http://pkgs.repoforge.org/axel/axel-2.4-1.el5.rf.i386.rpm # 64bit:http://pkgs.repoforge.org/axel/axel-2.4-1.el5.rf.x86_64.rpmrpm -ivh axel-2.4-1.el5.rf.i386.rpm$ ubuntuapt-get install axel Axel命令使用方法axel 参数 文件下载地址可选参数： -n 指定线程数 -o 指定另存为目录 -s 指定每秒的最大比特数 -q 静默模式 如从Diahosting下载lnmp安装包指定10个线程，存到/tmp/：axel -n 10 -o /tmp/ http://soft.vpser.net/lnmp/lnmp0.7-full.tar.gz 如果下载过程中下载中断可以再执行下载命令即可恢复上次的下载进度。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Google Chrome使用]]></title>
    <url>%2F2017%2F08%2F22%2Fchrome-usage.html</url>
    <content type="text"><![CDATA[使用场景1. Chrome修改UserAgentChrome修改UserAgent1C:\Users\boxcore\AppData\Local\Google\Chrome\Application\chrome.exe —user-agent=”iPad” —profile-directory=”Profile 1” 其他的ua比如： —user-agent=”iPhone”Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_0 like Mac OS X; en-us) AppleWebKit/532.9 (KHTML, like Gecko) Version/4.0.5 Mobile/8A293 Safari/6531.22.7 2. Chrome关闭强制跳转https chrome://net-internals/#hstsDelete domain security policies栏的输入框中输入：xxx.com -&gt; 点击delete按钮，即可完成配置。 地址栏中输入 chrome://net-internals/#hsts 在 Delete domain 中输入项目的域名，并Delete 删除 可以在 Query domain 测试是否删除成功]]></content>
  </entry>
  <entry>
    <title><![CDATA[Vagrant配置笔记]]></title>
    <url>%2F2017%2F08%2F22%2Fvagrant-note.html</url>
    <content type="text"><![CDATA[一、vagrant入门1.1 安装123$ mac下使用brew安装brew cask install vagrantbrew cask install vagrant-manager 二、实战三、常用配置3.1 使用vagrant配置laravel开发环境（homestead）网络状况好的话执行vagrant box add laravel/Homestead即可完成安装，但由于国内网络种种原因，会导致断线，所以我们需要进行离线安装 参考 Laravel 虚拟开发环境 Homestead]]></content>
  </entry>
  <entry>
    <title><![CDATA[PHP环境配置]]></title>
    <url>%2F2017%2F08%2F21%2Fphp-env.html</url>
    <content type="text"><![CDATA[一、更新 2017-08-21：mac 配置php 7.1 作为系统默认php，配置nginx 多php版本支持 这里主要是说明自己机器php环境配置相关问题，涵盖了windows、unix和mac多平台。 二、内容2.1 2017-08-21更新： mac php 7.1 配置安装php71通过系统默认命令brew install php71后php提醒libpng库问题，在执行php --version时报错内容大致如下： 123dyld: Library not loaded: /usr/local/opt/libpng/lib/libpng16.16.dylibReferenced from: /usr/local/bin/phpReason: Incompatible library version: php requires version 45.0.0 or later, but libpng16.16.dylib provides version 38.0.0 解决方法： 执行命令brew reinstall -s php71可以解决参考：https://github.com/Homebrew/homebrew-php/issues/3961 配置多端口访问配置端口及对应的php服务如下 php（默认）: nginx端口80,php-fpm端口9007 php54: nginx端口8054,php-fpm端口9004 php56: nginx端口8065,php-fpm端口9000 php71: nginx端口8071,php-fpm端口9007 也就是说后面一旦访问域名:端口即可使用对应php版本的服务。下面附上部分nginx fastcgi配置：123456789101112131415161718# # use php5.6 for php# location ~ \.php$ &#123;# try_files $uri = 404;# fastcgi_pass 127.0.0.1:9000;# fastcgi_index index.php;# fastcgi_intercept_errors on;# include /usr/local/etc/nginx/fastcgi.conf;# &#125;# use php7 for phplocation ~ \.php$ &#123; try_files $uri = 404; fastcgi_pass 127.0.0.1:9007; # fastcgi_pass unix:/tmp/php-fpm.sock; fastcgi_index index.php; fastcgi_intercept_errors on; include /usr/local/etc/nginx/fastcgi.conf;&#125; 修改配置后需要执行以下命令重新加载相关服务： 1234brew services restart homebrew/php/php54brew services restart homebrew/php/php56brew services restart homebrew/php/php71brew services restart nginx]]></content>
  </entry>
  <entry>
    <title><![CDATA[2017-08-17 正则浅析]]></title>
    <url>%2F2017%2F08%2F17%2Ftalk-about-regular.html</url>
    <content type="text"><![CDATA[本文只探讨正则在php中的一些使用，小白用户还是先了解下正则相关的基础概念：正则表达式30分钟入门教程 一、正则基础函数12345678910111213141516171819202122232425262728&lt;?php/** * 函数参数说明 * $pattern = 正则表达式 * $subject = 匹配的目标数据 * */// 只将第一个匹配到的结果赋值给$matches，$matches为一维数组。preg_match返回值为匹配到的次数，0或1.preg_match($pattern, $subject); // 将所有匹配到的结果赋值给$matches,$matches为二维数组。preg_match_all返回值为匹配到的次数。preg_match_all($pattern, $subject, $matches);// preg_filter()和preg_replace()区别：在对数组方面替换的时候，preg_replace()会返回所有结果，preg_filter()只会返回替换到的结果。preg_replace($pattern, $replacement, $subject);preg_filter($pattern, $replacement, $subject);// 只匹配，不替换，返回匹配到的数组值preg_grep($pattern, array $input);// 区别explode(…)preg_split($pattern, $subject);// 它会将正则表达式中的特殊字符进行转义。// regex的运算符： . \ + * ? [ ^ ] $ ( ) &#123; &#125; = ! &lt; &gt; | : -// 转义符号 \preg_quote($str) 二、正则表达式基本语法正则表达式基本语法归类： 界定符： 表示一个正则表达式的开始和结束；EG：/[0-9]/; eg: $pattern = ‘/[0-9]/‘ 或者 #[0-9]# ｛[0-9]｝(不推荐使用大括号)； 原子: 原装可以分为可见原子和不可见原子，都能用正则表达式进行原子匹配。 可见原子：Unicode编码表中用键盘输出后肉眼可见的字符, 比如 标点 _ ;,?等等 英文字母和数字 汉字/日文等其他语言文字 求和等数理化公式符号 其他可见字符 特殊原子：\ 因为本身还是转义字符，所以要用\才能匹配到一个\符号 不可见原子：Unicode编码表中用键盘输出后肉眼不可见的字符 换行符 \n 回车符 \r 制表符 \t 空格 其他不可见符号 元字符： [] -&gt; 匹配出现在[]中的任意一个原子 | -&gt; 或运算，匹配|符号左右两边的任意一个 [^ ] -&gt;首先这里^必须和[紧挨着，才表示匹配除了[]里面任意原子的字符 [ ^ ]-&gt;如果不挨着，就只表示匹配^这种字符了 原子的集合： . 匹配除换行符之外的任意字符。等价于[^\n]。 \d 匹配任意一个十进制数字，即[0-9]。 \D 匹配任意一个非十进制数字，即[^0-9]。 \s 匹配一个不可见原子，即[\f\n\r\t\v]。 \S 匹配一个可见原子，即[^\f\n\r\t\v]。 \w 匹配任意一个数字，字母或下划线，即[0-9a-zA-Z_]。 \W 匹配任意一个非数字，字母或是下划线，即[^0-9a-zA-Z_]。 量词 {n} 表示其前面的原子恰好出现n次。 {n,} 表示其前面的原子最少出现n次。 {n,m} 表示其前面的原子最少出现n次，最多出现m次。 `` 匹配0次，1次，或者多次其之前的原子，即{0,}。 ? ??????? + 匹配1次，或者多次其之前的原子，即{1,}。 ? 匹配0次，1次，或者1次其之前的原子，即{0,1}。 备注:量词不仅支持原子，同样支持原子的集合，同样支持元字符的写法。例如：\w{4} 边界控制 ^ 匹配字符串开始的位置 $ 匹配字符串结尾的位置 模式单元 （）匹配其中的整体为一个原子, 例如：（H|h)ello则匹配Hello和hello的结果。 修正模式 贪婪匹配: 匹配结果存在歧义时取其长 懒惰匹配: 匹配结果存在歧义时取其短 常见的修正模式： U 懒惰匹配 i 忽略英文字母大小写 x 忽略空白(空格，制表符等空白符） s 让元字符’.’匹配包括换行符在内的所有字符 e 后面单独写下~ 惰模式的标识为大写的U例如：$pattern = ‘/hello.+12/‘;$subject = ‘hello1231321233123131’;在贪婪模式下匹配的结果为：hello1231321233123131而修改为懒惰匹配 $pattern = ‘/hello.+12/U’;$subject = ‘hello1231321233123131’;那么结果就会变为：hello12 三、常见正则表达式练习 非空：/.+/ 浮点数匹配： /\d+.\d{2}$/ ，实现保留两位的浮点数，$符号是上文中的边界控制哦~ 手机号匹配：/1[34578]\d{9}/，匹配到的为1开头，第二位为3，4，5，7，或8的11位手机号 email地址匹配： /^\w+(.\w+)*@\w+(.\w+)+$/ (\w 字母,数字,下划线) URL匹配：http是否出现，是http还是https。即 ^(https?://)?。是否是二级域名? 即：(\w+.)+。顶级域名。即：[a-zA-Z]+。故：正则表达式：^(https?://)?(\w+.)+[a-zA-Z]+$ 3.1 正则工具类的设计实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778&lt;?phpclass RegexTool &#123; //常用的regex表达式数组 private $validata = array( 'require' =&gt; '/.+/', 'email' =&gt; '/^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/', 'url' =&gt; '/^http(s?):\/\/(?:[A-za-z0-9-]+\.)+[A-za-z]&#123;2,4&#125;(?:[\/\?#][\/=\?%\-&amp;~`@[\]\':+!\.#\w]*)?$/', 'currency' =&gt; '/^\d+(\.\d+)?$/', 'number' =&gt; '/^\d+$/', 'zip' =&gt; '/^\d&#123;6&#125;$/', 'integer' =&gt; '/^[-\+]?\d+$/', 'double' =&gt; '/^[-\+]?\d+(\.\d+)?$/', 'english' =&gt; '/^[A-Za-z]+$/', 'qq' =&gt; '/^\d&#123;5,11&#125;$/', 'mobile' =&gt; '/^1(3|4|5|7|8)\d&#123;9&#125;$/', ); //返回数组还是返回真假的boolean变量 private $returnMatechResult = false; //修正模式 private $fixmode = null; //匹配结果数组 private $matches = array(); //是否匹配成功 private $isMatch = false; //类的构造函数 public function __construct($returnMatchResult = false, $fixMode = null) &#123; $this-&gt;returnMatchResult = $returnMatchResult; $this-&gt;fixMode = $fixMode; &#125; //核心匹配方法 public function regex($pattern ,$subject)&#123; //array_key_exists判断键值是否存在 if (array_key_exists(strtolower($pattern), $this-&gt;validata)) &#123; $pattern = $this-&gt;validata[$pattern].$this-&gt;fixmode; &#125; $this-&gt;returnMatchResult? preg_match_all($pattern, $subject, $this-&gt;matches):$this-&gt;isMatch = preg_match($pattern, $subject)===1; return $this-&gt;getRegexResult(); &#125; //获取返回值类型的方法 private function getRegexResult()&#123; if ($this-&gt;returnMatchResult) &#123; return $this-&gt;matches; &#125;else&#123; return $this-&gt;isMatch; &#125; &#125; //切换返回值类型 public function togoReturnType($boolean = null)&#123; if (empty($boolean)) &#123; $this-&gt;returnMatchResult = !$this-&gt;returnMatchResult; &#125;else&#123; $this-&gt;returnMatchResult = is_bool($boolean)?$boolean:(bool)$boolean; &#125; &#125; //设定修正模式 public function setFixMode($fixMode) &#123; $this-&gt;fixMode = $fixMode; &#125; //一些数据验证方法 //是否为空 public function noEmpty($str)&#123; return $this-&gt;regex('require',$str); &#125; //验证email public function isEmail($email)&#123; return $this-&gt;regex('email',$email); &#125; //....其他的类似，省略了，小伙伴自己可以自定义添加哦~ //用户自定义正则表达式 public function check($pattern, $subject) &#123; return $this-&gt;regex($pattern, $subject); &#125;&#125;?&gt; 四、其他语言或ide工具的正则语法使用4.1 vim下正则使用vim下的正则使用主要是批量替换的功能，使用语法如：:[range]s/from/to/[flags] vim替换语法range:搜索范围，如果没有指定范围，则作用于但前行。 :1,10s/from/to/ 表示在第1到第10行（包含第1，第10行）之间搜索替换； :10s/from/to/ 表示只在第10行搜索替换； :%s/from/to/ 表示在所有行中搜索替换； 1,$s/from/to/ 同上。 flags 有如下四个选项： c confirm，每次替换前询问； e error， 不显示错误； g globle，不询问，整行替换。如果不加g选项，则只替换每行的第一个匹配到的字符串； i ignore，忽略大小写。 vim中使用的正则表达式语法这里只针对vim中特殊的正则进行说明，其他的与通用正则大体一致。 元字符： 大体一致，比如\w 代表匹配单词字母，等同于[0-9A-Za-z_] 一些普通字符需转意 .: 匹配.字符, 不需要转义 \: 匹配\字符, 不需要转义 表示位置的元字符 \&lt;: 匹配单词词首 \&gt;: 匹配单词词尾 vim 使用范例 %s/^\(.\+\)$/,(\1)/ : 缓存变量使用，在vim中用 \num表示； :%s/\n//g: 批量删除换行 删除行尾空格：:%s/\s+$//g 删除行首多余空格：%s/^\s*// 或者 %s/^ *// 删除沒有內容的空行：%s/^$// 或者 g/^$/d 删除包含有空格组成的空行：%s/^\s*$// 或者 g/^\s*$/d 删除以空格或TAB开头到结尾的空行：%s/^[ |\t]*$// 或者 g/^[ |\t]*$/d 把文中的所有字符串“abc……xyz”替换为“xyz……abc”可以有下列写法 :%s/abc\(.*\)xyz/xyz\1abc/g :%s/\(abc\)\(.*\)\(xyz\)/\3\2\1/g 一些学习工具 regexpal工具: 正则表达式书写辅助工具 regexpal 是Google Code上的一个开源项目，可以实时匹配正则表达式，方便调试，使用HTML和JS开发，推荐给大家使用。 鬼斧神工的正则表达式（PHP语言）]]></content>
  </entry>
  <entry>
    <title><![CDATA[OCR开发之找轮子]]></title>
    <url>%2F2017%2F08%2F14%2Ftools%2Focr-begin.html</url>
    <content type="text"><![CDATA[最近有从图书中拍照ocr部分段落的需求，这里是收集的部分入门 及 目前商用的接口方案。 以下关于OCR介绍来自搜索： OCR（Optical Character Recognition，光学字符识别）是指电子设备（例如扫描仪或数码相机）检查纸上打印的字符，通过检测暗、亮的模式确定其形状，然后用字符识别方法将形状翻译成计算机文字的过程；即，针对印刷体字符，采用光学的方式将纸质文档中的文字转换成为黑白点阵的图像文件，并通过识别软件将图像中的文字转换成文本格式，供文字处理软件进一步编辑加工的技术。如何除错或利用辅助信息提高识别正确率，是OCR最重要的课题，ICR（Intelligent Character Recognition）的名词也因此而产生。衡量一个OCR系统性能好坏的主要指标有：拒识率、误识率、识别速度、用户界面的友好性，产品的稳定性，易用性及可行性等。 简单地说吧，就是识别印刷品上面的文字，大概用得比较多的情况是：用设备的摄像头拍一张照片，照片中有文字，然后通过OCR技术将照片中的字符识别出来，转化为字符。顺便说一下，如果想“干坏事”的话，也可以用OCR技术来识别一些简单的图片验证码，呵呵，不过，现在很多网站的验证码都比较“狡猾”，要准确识别出来不那么容易。 LEADTOOLS: 英文识别文档SDK，支持c#、html5、ios和安卓等平台 腾讯云 - 万象优图2.0]]></content>
  </entry>
  <entry>
    <title><![CDATA[微信第三方网站对接]]></title>
    <url>%2F2017%2F08%2F11%2Faction%2Fauth-open-weixin.html</url>
    <content type="text"><![CDATA[一、开发之前1.1 开发工具在着手开发之前，首选要了解微信开发相关文档和调试工具： TBS开发调试利器——TBS Studio 微信web开发者工具 公众号本地调试可以使用其他内网穿透的工具, 比如https://natapp.cn(同时也支持https,用于微信小程序) 模拟器 网易MuMu模拟器 1.2 账号申请 你要有微信开发账号，需要第三方验证 写网站接入申请单 二、网站对接三、模拟测试3.1 方法一、用Chrome在电脑上模拟微信内置浏览器1234567891011121314151617181920// 安卓微信UAvar android_ua = 'mozilla/5.0 (linux; u; android 4.1.2; zh-cn; mi-one plus build/jzo54k) applewebkit/534.30 (khtml, like gecko) version/4.0 mobile safari/534.30 micromessenger/5.0.1.352';// iPhone微信UAvar iphone_ua = 'mozilla/5.0 (iphone; cpu iphone os 5_1_1 like mac os x) applewebkit/534.46 (khtml, like gecko) mobile/9b206 micromessenger/5.0';// JS判断是否微信浏览器functionisWeixinBrowser()&#123; var ua = navigator.userAgent.toLowerCase(); return (/micromessenger/.test(ua)) ? true : false ; &#125; function is_weixin()&#123; var ua = navigator.userAgent.toLowerCase(); if(ua.match(/MicroMessenger/i)=="micromessenger") &#123; return true; &#125; else &#123; return false; &#125;&#125; 3.2 命令端配置1curl --user-agent="Mozilla/5.0 (iPhone; CPU iPhone OS 6_1_3 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Mobile/10B329 MicroMessenger/5.0.1" xxx.com 3.3 php配置12345678910/** * PHP 判断是否微信浏览器 */function is_weixin()&#123; if ( strpos($_SERVER['HTTP_USER_AGENT'], 'MicroMessenger') !== false ) &#123; return true; &#125; return false;&#125;]]></content>
      <categories>
        <category>实战</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[成长慢，因为你AV看太多]]></title>
    <url>%2F2017%2F08%2F04%2Fthink%2F%E6%88%90%E9%95%BF%E6%85%A2-%E5%9B%A0%E4%B8%BA%E4%BD%A0AV%E7%9C%8B%E5%A4%AA%E5%A4%9A.html</url>
    <content type="text"><![CDATA[[TOC] 一个从零开始学棋的小学生，需要多长时间的专业训练就可以超过 99% 在路边摊下了一辈子棋的老棋友呢? 大约 6 个月。 李叫兽之前写过一篇关于刻意练习的文章，起的题目是《为什么你有10年经验，却成不了专家》。这个题目其实也是在说他自己，叫兽在读研一的时候就拿到300W年薪的offer，然后又在5分钟内拒掉了。 我们这个时代，可以看到还有很多像叫兽这样的年轻人迅速崛起，究竟是什么原因导致了彼此的差距呢。 继续套用风尘棋客的话： 绝大多数人在职场上的第一大幻觉，就是把时间的流逝当做了技能的增长。 1/成长的幻觉李叫兽一直在践行自己所学的东西，而我们大多数人并非如此。绝大多数人在看书的时候，其实是和看AV、看韩剧一样的。 心理学上有一种“预先体验效应”，就是我们在想象一件事的时候，即使还没有经历过，大脑也会分泌多巴胺，产生了经历过的感觉。 所以男人爱看AV，女人爱看韩剧，因为在看的时候，头脑里真的会产生相应的感觉，也就是我们所说的安慰剂效应。 回到看书学习这件事也一样，当代人很大的一个毛病是喜欢囤积各种学习资料。你问他真的看了吗？没有。满足吗？真的满足。 因为安慰剂效应，很多人在看完书、听完课之后，就以为自己真的掌握了。就跟囤积各种资料一样，下载下来就好像已经看完一样，陷入知识的幻觉。 另外一部分人甚至会走入标榜阅读量的极端。讲实话，船长之前就是这样。看完一本书之后，就是“哦，我知道了”。然后呢，没有然后。 王阳明讲知行合一，知道了做不到，其实说明你还是不知道。哪怕逻辑上你完全接受，可是在内心里并不相信。因为不相信，所以你不会去实践。 拿船长自身举例，我有过两次正式减肥经历。第一次是在高考结束后，失败的很彻底。在当时我实际上并不“相信”自己能够减肥下来。 因为在我的身边，我的认知之中从来没有过这样的人。电视上虽然有很多，但是跟我没有关系，内心并不会有所触动。直到上了大学，以前的高中朋友纷纷健身减肥成功，我才真正相信并且去实践。 你看，这真是一件滑稽的事情。 一方面大脑陷入知识的幻觉，以为我们看过就掌握了。另一方面，内心并不会真正的相信，也不会去实践。从而陷入了一种成长的幻觉，让时间流逝。 2/拍死理论派有一次学员问小马宋如何成为一个营销高手，小马宋说他不敢以营销高手自居，简单谈了下自己的观察。 他觉得这个世界有两种人。 一种是他这样的人，在看书包括读MBA的时候，都学过营销的4P理论。产品、价格、渠道、促销，学完了之后就是“哦，我知道了”，知道了之后完全没有去实践。 说实话也不太相信这个事情，也没有想到这个东西可以真正用到营销上去。读了很多书，知道了很多道理，然后一件没有用。后来吃了很多亏，才认识到这个问题。 一种是李叫兽这样的人。李叫兽是一个特别相信书的人，他相信所有的经典理论都是有效的，只是大多数人不会运用。他在高中学习了博弈论，就用囚徒困境这个理论去分析高考，写了一篇文章。之后就把这个策略应用到实际当中去。 这两位都是营销高手，用小马宋的话说，他这类人是归纳型的人，通过实操一个一个案例总结出一个方法来。这类人的成长，都是用钱赔出来的。 而他要学习的李叫兽，是一个演绎型的人，从一个理论中可以演绎出很多方法来。 归纳型的人问题在于只从自己过去的经验中学习，只有经历过之后才知道怎么解决，这样的成本太高。正如周国平所说：“对人生的觉悟来自智慧，倘若必待大苦大难然后开悟，慧根也未免太浅。” 另外一方面，从自己过去的经验中学习，是有限而且封闭的，一旦超出了自己目前的认知范围就很难解决。 李叫兽在14天训练营里谈到如何把任何一件事做好的三种思维方法，第一个方法就是利用知识范围之外的知识。 我们无法解决某些问题的第一重要原因——解决该问题所需要的知识，在你现有的知识范围以外。 只有在你真正坚信并践行那些经典智慧和理论的时候，人类的智慧才会变成你真正的宝库。 个人的经验是有限的，而人类的总体智慧经验是相当丰富的，只要你安装了对外的接口，就总能找到做好一件事的方法。 否则的话，就是睁眼瞎，人类最大的财富就在那里，你却视而不见。 很多人会觉得那些理论太虚，没有用。实际上没有用的不是理论，而是理论派。理论派没有用，理论有大用。 借用知乎营销大神@波旬的一句话：用理论拍死理论派。 这才是高手应该做的事情。 3/如何成为一个很厉害的人如何成为一个很厉害的人，采铜的回答是“在理论世界思考现实，在现实世界思考理论。” 深以为然。 船长总结了两个能力，来把这两句话进一步的落地。 1.在理论世界思考现实在理论世界思考现实，就是掌握一个理论框架之后，用大量的现实案例填充进去，不断的练习和修正，最终熟练掌握。这其中最重要的一个能力，就是拆解的能力。 用一套理论框架去拆解一个现实案例，就好像我们小时候拆钟表一样，是学习的必经之路。 就用船长想提高写作能力来举例。 李笑来老师讲写作就是沟通，ok这点我认同。而徐强老师又将沟通分为2个维度，4类对话。 过程导向型：娱乐式对话、分享式对话结果导向型：销售式对话、解决问题式对话 嗯，这是不是意味着我们的文章也可以分为这四类，而沟通的技巧也可以运用在写作上面呢。 仔细一想，好像确实是这样。 每一类沟通有不同的技巧，举个例子，如果把销售式文案理解为销售式对话，那么一些销售中的技巧就可以拿来作为写作技巧。 在销售的时候，有一个基本法则：诉诸利益原则。就是想要打动一个人的时候，从对方的利益出发。 案例：劝小孩换薄一点的衣服。说法1：天气热了穿那件薄的说法2：哎呀待会和小朋友玩，穿厚衣服会不会跑得慢啊 说法2就是从对方的利益出发。这个技巧同样可以运用到文章中。 本文的开头部分原本在目录大纲里是第二部分，后来被我放在开头了，各位不妨回想一下，是什么驱动你们看到了这里。 整个框架在下图，细节我没有放出来。 如图，带着这套理论框架去大量的分析别人的文章，把段落、句子揉碎了、掰开了来看。对比不同人在不同情境下的使用技巧，再辅以自己的实践，相信很快会有所提升。 2.在现实世界思考理论台大的吕世浩教授，在coursera开的两门课《史记》和《秦始皇》，一直以来都是是精品中的精品课程。他在TEDx的演讲《学历史的大用》中谈到一个很有意思的发现： 中国古代都是帝王和精英在学习历史，并且都觉得很有用。而我们当代人人从小学开始学历史，却都不知道历史有什么用。 最后他发现其实是因为古人学历史根本和我们的方法完全不一样。 古人学习历史的方法就是，读到关键处，把书盖上。 当读到一个历史人物，面对人生的一个重要关头，需要下一个决定的时候，那一刻把书盖上，去想象你就是他，想象你在这样的环境中你会怎样决定。 把一切都想清楚之后，再把书打开，去看那个人是怎么做决定的，和你是否一样，他为什么做这个决定，成功了还是失败了，付出了什么又得到了什么。 通过这种方法，可以用古人的智慧来磨练我们的智慧。 这也是为什么中国古代的很多帝王，虽然都是生于深宫之中，长于妇人之手，最后却能驾驭下面这些大臣。更有甚者，像雍正皇帝这种，把大臣玩的团团转。要知道那些大臣都是全国竞赛选拔出来，人精中的人精。 李叫兽讲自己的训练方法主要是“预测-反馈法”，就是在学习过去的商业案例时，把最后的结果盖住，想象如果是自己，自己会怎样去做，会运用什么方法，然后再跟实际对比。包括在他的14天训练营中，也是用这套方法来训练学员。 而李叫兽的“预测-反馈法”其实就是古人读史的方法。那么为什么这套方法会这么有用呢？ 因为理论的本质是对现实世界规律的总结，智慧也是如此。而规律就是用来对现实进行预测的，如果预测与实际不一致就要进行修正，从而不断迭代获得真正的认知。 所以如果你从来没有用它来进行预测过，你又怎么可能学会呢？ 受限于我们失败的教育，大部分人都活在“理论-理论”或者“实践-实践”的单行道上，一伙人成了象牙塔里的学院派，另外一伙人则整天叫嚣“读书无用论”。 实际上都是挺可悲的事情。 最后想说的一点是，船长最近的文章都是按照李笑来老师的格式化写作模板来组织的。多亏了笑来老师的框架，我也才能驾驭这样的长文。 总结 很多人容易陷入成长的幻觉之中。大脑觉得自己学了很多东西，实际上并没有掌握。内心不相信，也不会去践行。 有些人只从自己以往的经验中学习，这样的成本太高，而且一旦超出认知范围就没有办法。 学会利用践行理论知识，理论有大用，没有用的是理论派。用理论拍死理论派。 在理论世界思考现实，用一套行之有效的理论框架去拆解分析大量现实案例。 在现实世界思考理论，用“预测-反馈法”去借助古人的智慧来磨练我们的智慧。 @link: 《成长慢，因为你AV看太多》&amp;version=12020810&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=lgR7gg41DdhQiv1Zd32%2F%2F1lBQB%2BmfdcopHeFmx6TflT1UlDopQxDwhYP8SYfkjST) 如何评价李叫兽加入百度任副总裁？]]></content>
  </entry>
  <entry>
    <title><![CDATA[Github·Gist使用攻略]]></title>
    <url>%2F2017%2F08%2F04%2Ftools%2Fgithub-gist-usage.html</url>
    <content type="text"><![CDATA[Gist 是 Github 推出的基于 Git 的代码片段管理服务。用户可以提交自己的代码片段或任意的文本，可以作为个人的代码管理库、文档管理库等。同时 Gist 页面提供访问的 JavaScript 片段用于嵌入其他网站，如：个人博客等。下面说说gist的一些正确打开姿势。 一、使用、管理Gist1.1 使用 Github Gistgithub官网默认功能，这里不多说了 1.2 gistboxappgistboxapp是一个gist集成管理工具，GistBox 是可以直接用 Github 账户登录的，实时同步你的 Gist 到 Github，很方便。GitBox 从体验上来说更加方便，界面元素丰富，功能也比较全。如果不想用 Sublime Text, 又觉着 Github 自己的 Gist 管理太简单，GistBox是一种不错的方式。官网是 https://app.gistboxapp.com/，功能功能截图如下： 1.3 使用 Sublime Text + Gist插件安装插件：Gist 配置token: 插件下的user setting下配置， 添加 Github Token:12345&#123; // Your GitHub API token // see: https://github.com/condemil/Gist#generating-access-token "token": "a28b686c3a74······c300f42414c7", // 从命令行得到的 token&#125; 分享Gist代码这里直接粘贴部分代码片段： 12345&lt;!-- 使用iframe加载 --&gt;&lt;iframe width="100%" height="300" src="https://gist.github.com/boxcore/9abd100553a3585c50b7c348e50e2f87.pibb" allowfullscreen="allowfullscreen" frameborder="0"&gt;&lt;/iframe&gt;&lt;!-- 使用js加载 --&gt;&lt;script src="https://gist.github.com/boxcore/9abd100553a3585c50b7c348e50e2f87.js"&gt;&lt;/script&gt; 或者添加通用的处理规则在function中： 1234567891011// wordpress usage/** * WordPress 使用 iframe 嵌入Github Gist代码 * https://www.wpdaxue.com/wp-iframe-handler-gist.html */function wp_iframe_handler_gist( $matches, $attr, $url, $rawattr ) &#123; $iframe = '&lt;iframe width="100%" height="300" src="https://gist.github.com/'. esc_attr($matches[1]) .'/'. esc_attr($matches[2]) . '.pibb" frameborder=0 &gt;&lt;/iframe&gt;'; return apply_filters( 'iframe_gist', $iframe, $matches, $attr, $url, $rawattr );&#125;wp_embed_register_handler( 'gist_iframe', '#https://gist.github.com/(.*?)/([\d]+)#i', 'wp_iframe_handler_gist' );]]></content>
  </entry>
  <entry>
    <title><![CDATA[我的PHP手册]]></title>
    <url>%2F2017%2F08%2F04%2Fphp%2Fphp-manual.html</url>
    <content type="text"><![CDATA[文件参数parse_str:]]></content>
  </entry>
  <entry>
    <title><![CDATA[OpenSSL使用及域名签名]]></title>
    <url>%2F2017%2F08%2F02%2Flinux%2Fopenssl-usage.html</url>
    <content type="text"><![CDATA[一、OpenSSL使用1234567openssl req -in server.csr -noout -subject # 查看csr信息 比如 subject=/C=CN/ST=Guangdong/L=Guangzhou/O=LKS/OU=IT Dept./CN=*.mianfeibang.cnopenssl req -new -newkey rsa:2048 -sha256 -nodes -out domain.cc.csr -keyout domain.cc.key -subj "/C=CN/ST=GuangZhou/L=GuangZhou/O=domain Inc./OU=Web Security/CN=domain.cc/CN=*.domain.cc"openssl req -new -sha256 -key domain.key -subj "/" \ -reqexts SAN -config &lt;(cat /etc/ssl/openssl.cnf \ &lt;(printf "[SAN]\nsubjectAltName=DNS:foo.com,DNS:www.foo.com")) openssl配置各系统openssl默认配置地址： Debian: /etc/ssl/openssl.cnf RHEL and CentOS: /etc/pki/tls/openssl.cnf Mac OSX: /System/Library/OpenSSL/openssl.cnf 二、SSL证书说明2.1 SSL证书概念和分类CA，Catificate Authority，它的作用就是提供证书（即服务器证书，由域名、公司信息、序列号和签名信息组成）加强服务端和客户端之间信息交互的安全性，以及证书运维相关服务。任何个体/组织都可以扮演 CA 的角色，只不过难以得到客户端的信任，能够受浏览器默认信任的 CA 大厂商有很多，其中 TOP5 是 Symantec、Comodo、Godaddy、GolbalSign 和 Digicert。 SSL证书用途 保证服务器和客户端的真实性，杜绝中间人攻击和钓鱼网站 保护用户数据，通常是客户端的数据到服务器的传输是经过加密传输的，第三方无法监听。 SSL证书认证类别 DV（Domain Validation），面向个体用户，安全体系相对较弱，验证方式就是向 whois 信息中的邮箱发送邮件，按照邮件内容进行验证即可通过； OV（Organization Validation），面向企业用户，证书在 DV 证书验证的基础上，还需要公司的授权，CA 通过拨打信息库中公司的电话来确认； EV（Extended Validation），打开 Github 的网页，你会看到 URL 地址栏展示了注册公司的信息，这会让用户产生更大的信任，这类证书的申请除了以上两个确认外，还需要公司提供金融机构的开户许可证，要求十分严格。 SSL提供商国内免费SSL证书CA提供商：Wosign.com（已经废弃）国外免费SSL证书CA提供商：StartSSL.com , letsencrypt.org（免费3个月，18年开始支持泛域名） , Cloudflare.com 在线CSR生产工具 CSR文件在线生成工具 三、证书配置123456789openssl x509 -inform PEM -in yourdomain.crt &gt; public.pemopenssl rsa -in yourdomain.key -text &gt; private.pemopenssl rsa -in yourdomain.key -out yourdomain.key.pemopenssl req -newkey rsa:2048 -nodes -keyout local.key -x509 -days 365 -out certificate.pem # 生成 专用密钥和公用证书openssl x509 -text -noout -in certificate.pem # 检查已创建的证书openssl pkcs12 -inkey local.key -in certificate.pem -export -out certificate.p12 # 将密钥和证书组合在 PKCS#12 (P12) 捆绑软件中openssl pkcs12 -in certificate.p12 -noout -info # 验证您的 P12 文件 nginx配置：123456789101112service &#123; listen 443 ssl; server_name 7daka.local; ssl_certificate /www/ssl/local/certificate.pem; ssl_certificate_key /www/ssl/local/local.key; ssl_session_cache shared:SSL:1m; ssl_session_timeout 5m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; ... ...&#125; 参考 细说 CA 和证书 Cloudflare自签名SSL证书 OpenSSL生成自签名的sha256泛域名证书 申请Comodo PositiveSSL免费SSL证书教程]]></content>
  </entry>
  <entry>
    <title><![CDATA[随想]]></title>
    <url>%2F2017%2F08%2F01%2Fthink%2Findex.html</url>
    <content type="text"><![CDATA[生活的分享工作的思考]]></content>
  </entry>
  <entry>
    <title><![CDATA[在iTerm2中使用Zmodem实现快速传输文件(lrzsz)]]></title>
    <url>%2F2017%2F08%2F01%2Ftools%2Fiterm-tools-zmodem.html</url>
    <content type="text"><![CDATA[一直苦恼于mac下使用rzsz传文件的问题，今天恰好在运维之美看到了就摘出来分享下。 步骤大体的步骤有3个， 客户端安装lrzsz 服务端安装 在iTerm2中配置Zmodem 以下是相关脚本1234567apt-get install lrzsz # Ubuntu 服务器安装yum install lrzsz # CentOS服务器安装brew install lrzsz # 客户端安装git clone https://github.com/mmastrac/iterm2-zmodem.gitcd iterm2-zmodemcp iterm2-recv-zmodem.sh iterm2-send-zmodem.sh /usr/local/bin/ 在客户端添加配置：打开 iTerm2 ，点击 Preferences → Profiles 选择指定的 Profile，这里选 Default。然后继续选择 Advanced → Triggers，并点击 Edit 添加两个触发器。 按如下内容添加两个触发器，首先增加 sz 指令的触发器： Regular expression: rz waiting to receive.\*\*B0100 Action: Run Silent Coprocess Parameters: /usr/local/bin/iterm2-send-zmodem.sh Instant: checked 其次增加 rz 指令的触发器： Regular expression: \*\*B00000000000000 Action: Run Silent Coprocess Parameters: /usr/local/bin/iterm2-recv-zmodem.sh Instant: checked 完后大工告成，你就可以在iTerm2中使用rz/sz 命令进行远程传输文件了。]]></content>
  </entry>
  <entry>
    <title><![CDATA[常见公共dns分享]]></title>
    <url>%2F2017%2F07%2F26%2Ftools%2Fdns-public.html</url>
    <content type="text"><![CDATA[由于最近google的dns很不稳定，这里记录一些常用的公共dns解析地址供大家参考： 123456119.29.29.29 # dnspod,介绍地址：https://support.dnspod.cn/Kb/showarticle/tsid/241114.114.114.114 # 1148.8.4.4 # google 8.8.8.8 # google223.5.5.5 # 阿里1223.6.6.6 # 阿里2]]></content>
  </entry>
  <entry>
    <title><![CDATA[Supervisord使用]]></title>
    <url>%2F2017%2F07%2F26%2Ftools%2Fsupervisord-usage.html</url>
    <content type="text"><![CDATA[今天的一个小时学习编程工具是基于python开发的任务管理工具Supervisord，项目官方地址为。下面主要是说明Supervisord的基本用发以及在mac和centos中应用。 一、Supervisord基本用法1.1 安装Supervisordsupervisor安装方法如下： 12apt-get install supervisor # ubuntupip install supervisor # 使用python pip 安装 1.2 配置修改supervisor默认找配置的路径如：/usr/local/etc/supervisord.conf, /usr/local/supervisord.conf, supervisord.conf, etc/supervisord.conf, /etc/supervisord.conf, /etc/supervisor/supervisord.conf 把所有的配置文件都放在 supervisord.conf 并不是个好主意，一旦管理的进程过多，就很麻烦。所以一般都会 新建一个目录来专门放置进程的配置文件，然后通过 include 的方式来获取这些配置信息12[include]files = /etc/supervisor/conf.d/*.conf 1.3 Supervisord基础命令命令详解 supervisord: 初始启动Supervisord，启动、管理配置中设置的进程; supervisorctl stop(start, restart) xxx，停止（启动，重启）某一个进程(xxx); supervisorctl reread: 只载入最新的配置文件, 并不重启任何进程; supervisorctl reload: 载入最新的配置文件，停止原来的所有进程并按新的配置启动管理所有进程; supervisorctl update: 根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启; a. 管理进程例子supervisord是通过 supervisorctl进行进程管理，由于目前没有添加任何需要管理的进程，所以 status 没有输出人和结果，接下来我们添加一个需要管理的进程 (以启动一个 celery 的 worker 为例)。1234567[program:celeryd]command=celery worker --app=task -l info ; 启动命令stdout_logfile=/var/log/supervisor/celeryd_out.log ; stdout 日志输出位置stderr_logfile=/var/log/supervisor/celeryd_err.log ; stderr 日志输出位置autostart=true ; 在 supervisord 启动的时候自动启动autorestart=true ; 程序异常退出后自动重启startsecs=10 ; 启动 10 秒后没有异常退出，就当作已经正常启动 然后运行以下命令更新配置并启动进程： supervisorctl reread: 只更新配置文件 supervisorctl update: 只启动有改动的进程 supervisorctl status: 查看状态 我们看到 celery worker 已经被成功启动了。你可以使用不同的命令来控制进程的启动和关闭： 123supervisorctl stop celeryd # 停止supervisorctl start celerydsupervisorctl restart celeryd 切记，每次修改或增删了配置文件, 都需要执行: supervisorctl update。执行supervisord可以进入 supervisorctl 的 shell 界面，123$ supervisorctlsupervisor&gt; status # 查看状态supervisor&gt; 二、Supervisord在Mac osx中的应用在mac中启用supervisor需要借助launchctl， 启用后就可以借助supervisor启用其他相关的进程了。这里说下我的配置，supervisord进程和配置内容如下： conf: /usr/local/etc/supervisord.conf bin: /usr/local/bin/supervisord 配置文件/usr/local/etc/supervisord.conf内容： 1234567891011121314151617181920212223242526272829303132; conf:/usr/local/etc/supervisord.conf; bin:/usr/local/bin/supervisord[unix_http_server]file=/tmp/supervisor.sock ; path to your socket file[supervisord]logfile=/usr/local/var/log/supervisord/supervisord.log ; supervisord log filelogfile_maxbytes=50MB ; maximum size of logfile before rotationlogfile_backups=10 ; number of backed up logfilesloglevel=error ; info, debug, warn, tracepidfile=/usr/local/var/run/supervisord.pid ; pidfile locationnodaemon=false ; run supervisord as a daemonminfds=1024 ; number of startup file descriptorsminprocs=200 ; number of process descriptorsuser=root ; default userchildlogdir=/usr/local/var/log/supervisord/ ; where child log files will live[rpcinterface:supervisor]supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface[supervisorctl]serverurl=unix:///tmp/supervisor.sock ; use a unix:// URL for a unix socket[include]; files = /usr/local/etc/supervisor/conf.d/*.conffiles = /usr/local/etc/supervisor.d/*.conf[program:mongod]command=/usr/local/bin/mongod[program:redis-server]command=/usr/local/bin/redis-server vim ~/Library/LaunchAgents/supervisord.plist 12345678910111213141516171819202122&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;&lt;plist version="1.0"&gt;&lt;dict&gt; &lt;key&gt;KeepAlive&lt;/key&gt; &lt;dict&gt; &lt;key&gt;SuccessfulExit&lt;/key&gt; &lt;false/&gt; &lt;/dict&gt; &lt;key&gt;Label&lt;/key&gt; &lt;string&gt;supervisord&lt;/string&gt; &lt;key&gt;ProgramArguments&lt;/key&gt; &lt;array&gt; &lt;string&gt;/usr/local/bin/supervisord&lt;/string&gt; &lt;string&gt;-n&lt;/string&gt; &lt;string&gt;-c&lt;/string&gt; &lt;string&gt;/usr/local/etc/supervisord.conf&lt;/string&gt; &lt;/array&gt; &lt;key&gt;RunAtLoad&lt;/key&gt; &lt;true/&gt;&lt;/dict&gt;&lt;/plist&gt; 配置好后执行如下命令运行： launchctl load ~/Library/LaunchAgents/supervisord.plist 三、扩展 以上内容，感谢如下博主分享： 在 Mac OS X 上使用 supservisor 来管理后台进程 link]]></content>
  </entry>
  <entry>
    <title><![CDATA[Chrome高阶使用方法]]></title>
    <url>%2F2017%2F07%2F25%2Ftools%2Fgoogle-chrome-advanced-usage.html</url>
    <content type="text"><![CDATA[设置https自动跳转开启和关闭都在 chrome://net-internals/#hsts 开启 开启后，每次访问google.com 都会自动跳转到https 关闭 关闭后，你可以手动输入http 或者 https进行访问 设置]]></content>
      <categories>
        <category>tools</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[使用Let's Encrypt加密网站]]></title>
    <url>%2F2017%2F07%2F25%2Flet-us-encrypt-ssl.html</url>
    <content type="text"><![CDATA[Let’s Encrypt是一家开源的ssl签名验证工具，除了万恶的ie6，几户支持其他所有的浏览器，关键是还免费。关于其自动签名工具网站有很多，我这边就简单举例说下主要工具的应用场景。 certbot验证域名官方提供的自动签名脚本，项目地址在：https://github.com/certbot/certbot。很可惜没有配置成功过，看网上代码配置还是非常简单的 acme-tiny验证域名 项目地址：https://github.com/diafygi/acme-tiny 使用简单，需要配置nginx在自己的域名下，我比较喜欢用他的一点是所验证的域名，如果非在该域名下也可以访问，不过会提示ssl不安全，这是比le-dns验证好的一点。 le-dns验证域名 项目地址：https://github.com/boxcore/shell/tree/master/tools/le-dns 最简单的验证方式，你必须要有域名的所有权限，目前支持的有dnspod和cloudxns，使用前你需要申请下key。个人比较喜欢用dns，好处的脚本自动写好续签了，很人性化，不过子域名没有签名的话，不能共用ssl证书。]]></content>
      <tags>
        <tag>https</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VS Code最佳方式]]></title>
    <url>%2F2017%2F07%2F19%2Fvscode-best-way.html</url>
    <content type="text"><![CDATA[一、安装和使用去官网下载即可 二、快捷键按键说明: ⌘: command ⌃: control ⇧: shift ⌥: alt(option) 2.1 vscode常用快捷键 ⌃ + R: 项目切换 markdown preview 功能 ⇧⌘V：新窗口预览markdown文件 ⌘K V: markdown preview side-by-side 三、插件及使用 PHP IntelliSense: php 函数跳转工具 3.1 markdown-table-formattermarkdown-table-formatter插件地址 快捷键: alt+shift+f 四、个人配置4.1 个人快捷键配置使用⌘+k s打开配置12345678910111213141516171819202122232425262728293031// 将键绑定放入此文件中以覆盖默认值[ // insert date keymap from sublime &#123; "command": "insertDateString.insertDateTime", "key": "alt+f5", "when": "editorTextFocus" &#125;, &#123; "command": "insertDateString.insertDate", "key": "f5", "when": "editorTextFocus" &#125;, &#123; "key": "ctrl+f5", "command": "insertDateString.insertTimestamp" &#125;, &#123; "key": "cmd+ctrl+p", "command": "workbench.action.openRecent" &#125;, &#123; "key": "cmd+y", "command": "redo", "when": "editorTextFocus &amp;&amp; !editorReadonly" &#125;] 4.2 设置在命令行中打开VSC配置 .bash_profile 或者 .zshrc 文件： 1234alias vsc='/Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin/code';VSC_BIN='/Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin';PATH=$VSC_BIN:$PATH;export PATH; 然后让配置生效，在控制台执行：123456# 如果没有安装 zsh，可能是 ~/.bash_profilesource ~/.zshrc# 这个时候就可以在全局打开了：# -a 的意思是不要新开窗口，在当前已经打开的 vsc 中打开文件vsc path/to/file.ext -a]]></content>
      <categories>
        <category>IDE</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Vue.js学习笔记]]></title>
    <url>%2F2017%2F07%2F19%2Flearn-vuejs.html</url>
    <content type="text"><![CDATA[作为开发者，学习一门新语言或者框架的时候，势必会想到，为什么会学（用）这个呢？同样的，学vue.js理由有很多，下面是我觉得vue.js做的比较好的地方： 目前属于中文世界最流行的前端框架，有丰富的文档支持，上手极快。 单文件组件的好处 同样的，也有很多不好的地方，跟以往的框架不一样，这里会有些新的思维。本来想着把目前几个后台的smarty都切换到vue.js,发现其成本太高，如果要用vuejs，全部模板都要重构!这相当是vuejs的一些坏处了吧。。。 好了，废话不多说，开始说下vue.js的一些基础内容咯。 一、说说Vue.js首先带个问题： Vue.js 的核心思想是什么？ 答： 1、数据驱动; 2、组件化 Vue.js 的单文件组件有什么作用？ 答： Vue.js 可以做什么？ 移动端的web开发 后台管理系统 混合应用 WebApp 其他一些不用兼容IE8及以下的项目（如果你还用IE8以下的浏览器，建议你弃坑！） 1.1 常用指令 条件指令 ：v-if、v-else 循环指令 ：v-for 事件指令 ：v-on 其他指令 ：v-show、v-model … 他们都有一个共性就是v-前缀，这就是vue.js指令的特点了。那么如何使用vue.js呢？这里有个简单例子： 二、vue.js基础2.1 数据驱动(Data-Driven)vue.js是通过 MVVM 的数据绑定实例自动同步 2.2 组件化(Component)2.3 实例生命周期（Life-Cycle）常用的生命周期钩子函数 三、vue.js进阶3.1 Vue.js 脚手架工具的使用1234vue init webpack vue-demo # 初始化项目cd vue-demo # 切换到该项目npm install # 安装依赖的包npm run dev 与 npm run build # 开发与打包 vue.js包含内容 template script css]]></content>
      <categories>
        <category>javascript</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[PHPUNIT测试]]></title>
    <url>%2F2017%2F07%2F19%2Fphpunit-right-way.html</url>
    <content type="text"><![CDATA[1. PHPUNIT是什么PHPUnit是一个用PHP编程语言开发的开源软件，是一个单元测试框架。 1.1 为什么要用PHPUNIT 用phpunit是一个不错的主意 更改代码不会破坏他原有的结构 - 我们不需要修改源码。。 帮助其他开发人员了解您的代码的作用（并帮助入职过程，新人等等。。） 帮助您在编写代码时保持检查。 它会迫使你思考一些事情，例如“我将如何测试这个？ 帮助你在晚上能睡好觉。。。。 1.2 单元测试的概念 程序单元是应用的最小可测试部件。 在过程化编程中，一个单元就是单个程序、函数、过程等；对于面向对象编程，最小单元就是方法，包括基类（超类）、抽象类、或者派生类（子类）中的方法。 2. 开始学习Getting Started With PHPUnit： http://phpunit.de/ 安装 旧方法：PEAR 新方法：PHAR or Composer http://phpunit.de/manual/current/en/installation.html 案例1The Code: 1234567891011class Unicorns &#123; private $count = 8; public function getCount() &#123; return $this-&gt;count; &#125; public function steal($number) &#123; $this-&gt;count -= $number; &#125;&#125; The Unit Test123456789101112class UnicornsTest extends PHPUnit_Framework_TestCase &#123; public function test_can_steal() &#123; // Setup $unicorns = Unicorns(); // Action $unicorns-&gt;steal(5); // Assert $this-&gt;assertEquals(3, $unicorns-&gt;getCount()); &#125;&#125; Running PHPUnit 1$ phpunit tests/unicorns.php PHPUnit 3.4.0 by Sebastian Bergmann. Time: 0 seconds, Memory: 0.5Mb OK (1 tests, 1 assertions) 案例2The “Optimizer” 1234567891011class Unicorns() &#123; private $count = 8; public function getCount() &#123; return $this-&gt;count; &#125; public function steal($number) &#123; $this-&gt;count -= $this-&gt;count - $number &gt;= 0 ? $number : 0; &#125;&#125; OUR TEST: 12345678910111213class UnicornsTest extends PHPUnit_Framework_TestCase() &#123; public function test_can_steal() &#123; $unicorns = Unicorns(); $unicorns-&gt;steal(5); $this-&gt;assertEquals(3, $unicorns-&gt;getCount()); &#125; public function test_cant_steal() &#123; $unicorns = Unicorns(); $unicorns-&gt;steal(1000); $this-&gt;assertEquals(8, $unicorns-&gt;getCount()); &#125;&#125; Running PHPUnit12345PHPUnit 3.4.0 by Sebastian Bergmann...Time: 0 seconds, Memory: 0.5MbOK (2 tests, 2 assertions) 案例3The Bad “Optimizer” 123456789101112class Unicorns() &#123; private $count = 8; public function getCount() &#123; return $this-&gt;count; &#125; public function steal($num) &#123; $this-&gt;count -= $this-&gt;count - $num &gt;= 0 ? $num : $this-&gt;count; &#125;&#125; Running PHPUnit (again): 1phpunit tests/unicorns.php 1234567891011121314PHPUnit 3.4.0 by Sebastian Bergmann.Time: 0 seconds, Memory: 0.5MbThere was 1 failure:1) UnicornsTest::test\_cant\_stealFailed asserting that 0 matches expected 8./path/to/test/unicorns.php:11FAILURES!Tests: 2, Assertions: 2, Failures: 1. 3. 配置项 assertEquals() assertTrue() assertFalse() assertLessThan() assertNull() assertRegExp() http://phpunit.de/manual/current/en/appendixes.assertions.html 4. FizzBuzzFizzBuzz是借鉴一个英国学校里小孩子经常玩的游戏。改编后的题目大概是这样的 “编写程序把1-100的数字打印出来。不过，要把3的倍数打成"Fizz"，把5的倍数打成"Buzz"。而如果一个数既是3的倍数。又是5的倍数时，就打成"Fizz-Buzz"，其余的输出数字。然后在论坛看见这道编程题很多计算级系的高材生(博士、硕士之类的)都不能现场写出来，更有多年经验自称高级开发程序员在几分钟内也写不出来 不过既然说到这了，那就先打开来考验下自己，最后我是通过两种方式来实现的：第一种：利用循环和条件判断，过滤满足特定条件的数字，然后输出结果，代码如下： 12345678910111213141516for ($i = 1; $i &lt;= 100; $i++)&#123; if($i % 3 == 0 &amp;&amp; $i % 5 ==0)&#123; echo "FizzBuzz&lt;br /&gt;\n"; &#125; else if($i % 3 == 0)&#123; echo "Fizz&lt;br /&gt;\n"; &#125; else if($i % 5 == 0)&#123; echo "Buzz&lt;br /&gt;\n"; &#125; else &#123; echo $i."&lt;br /&gt;\n"; &#125;&#125; 12345678// 或者更加简单for ($i = 1; $i &lt;= 100; $i++) &#123; $mod3 = $i % 3; $mod5 = $i % 5; echo (!$mod3 &amp;&amp; !$mod5 ? "FizzBuzz" : (!$mod3 ? "Fizz" : (!$mod5 ? "Buzz" : $i))) ."&lt;br&gt;\n";&#125; URL: https://devtest.net/take_test/test_attempts/new 5. 扩展DOCUMENT https://phpunit.de/manual/current/zh_cn/writing-tests-for-phpunit.html]]></content>
      <categories>
        <category>php</category>
        <category>api</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[PHP接口设计之道]]></title>
    <url>%2F2017%2F07%2F19%2Fphp-api-right-way.html</url>
    <content type="text"><![CDATA[设计前后端完全分离的应用，可以使用到RESTful API。比如， Backbone 的默认规则最适合的是一个完全 restful 风格的后端接口，如果你的后端系统没有准备好，那就直接覆盖掉吧。restful 不光是前端的事～ 是构架层面上的事情，如果想用Backbone的话，肯定是需要后端重新定义所有的接口了，但是这也是好事，毕竟 restful 逻辑更清晰，以后的更新，维护会更方便。 一、基础现在的网站没有API都给人落后的印象了，而当下设计API流行的规范便是RESTful。REST全称是Representational State Transfer，中文意思是表述（编者注：通常译为表征）性状态转移。它首次出现在2000年Roy Fielding的博士论文中，Roy Fielding是HTTP规范的主要编写者之一。 他在论文中提到：”我这篇文章的写作目的，就是想在符合架构原理的前提下，理解和评估以网络为基础的应用软件的架构设计，得到一个功能强、性能好、适宜通信的架构。REST指的是一组架构约束条件和原则。” 如果一个架构符合REST的约束条件和原则，我们就称它为RESTful架构。 它涉及到以下这些内容。 1.1 域名应尽量部署在专用域名之下，可以在前边加个二级头或者域名后添加api路径。 https://api.example.comhttps://example.com/api/ 1.2 版本API经常会变，因此要注意区分版本。一般放入URL中。 https://api.example.com/v1/ 1.3 路径路径又称”终点”（endpoint），表示API的具体网址。在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的”集合”（collection），所以API中的名词也应该使用复数。举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。 https://api.example.com/v1/zooshttps://api.example.com/v1/animalshttps://api.example.com/v1/employees 1.4 HTTP动词对于资源的具体操作类型，由HTTP动词表示。常用的HTTP动词有下面五个（括号里是对应的SQL命令）。 GET（SELECT）：从服务器取出资源（一项或多项） POST（CREATE）：在服务器新建一个资源 PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源） PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性） DELETE（DELETE）：从服务器删除资源 下面是一些例子。 GET /zoos：列出所有动物园 POST /zoos：新建一个动物园 GET /zoos/ID：获取某个指定动物园的信息 PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息） PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息） DELETE /zoos/ID：删除某个动物园 GET /zoos/ID/animals：列出某个指定动物园的所有动物 DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物 1.5 过滤信息如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。下面是一些常见的参数。 ?limit=10：指定返回记录的数量 ?offset=10：指定返回记录的开始位置 ?page=2&amp;per_page=100：指定第几页，以及每页的记录数 ?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序 ?animal_type_id=1：指定筛选条件 1.6 状态码服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。 200 OK – [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent） 201 CREATED – [POST/PUT/PATCH]：用户新建或修改数据成功 202 Accepted – [*]：表示一个请求已经进入后台排队（异步任务） 204 NO CONTENT – [DELETE]：用户删除数据成功 400 INVALID REQUEST – [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的 401 Unauthorized – [*]：表示用户没有权限（令牌、用户名、密码错误） 403 Forbidden – [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的 404 NOT FOUND – [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的 405 method not allowed – [*]：该http方法不被允许 406 Not Acceptable – [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式） 410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的 422 Unprocesable entity – [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误 500 INTERNAL SERVER ERROR – [*]：服务器发生错误，用户将无法判断发出的请求是否成功 1.7 错误处理如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。 1&#123;error: "invalid API key"&#125; 1.8 返回结果针对不同操作，服务器向用户返回的结果应该符合以下规范。 GET /collection：返回资源对象的列表（数组） GET /collection/resource：返回单个资源对象 POST /collection：返回新生成的资源对象 PUT /collection/resource：返回完整的资源对象 PATCH /collection/resource：返回完整的资源对象 DELETE /collection/resource：返回一个空文档 二、最佳实践2.1 Slim框架的使用推荐一个轻量版PHP RESTful框架：Slim ，有兴趣的同学可以参考其文档：http://docs.slimframework.com/ 下面以一个网上的教程给大家说明，主要是应用前端框架AngularJS 和 后端PHP框架Slim搭设的一个简易图书管理系统为例。 代码实现主要的工作是在项目根目录下的index.php文件里进行的，第一步需要引入Slim框架 12345//第一步：引用Slim框架//首先，需要在你的index.php中引入Slim框架的依赖，根据实际情况，你可能得调整下文件的路径require 'Slim/Slim.php';\Slim\Slim::registerAutoloader(); 2.x 测试 - 插件使用 Chrome 插件 Postman： Chrome插件Json-viewer 和 json-handle ### 三、扩展3.1 不要默认使用大括号封装，但要在需要的时候支持json 还是回调，那是个问题： 123456&#123; "data" : &#123; "id" : 123, "name" : "John" &#125;&#125; or1234567callback_function(&#123; status_code: 200, next_page: "https://..", response: &#123; ... actual JSON response body ... &#125;&#125;) 好的做法是： http://example.com/api/xxx?type=jsonp&amp;callback=yourCallBackName http://example.com/api/xxx?type=json http://example.com/api/xxx?type=xml 就返回对应结构的数据。 3.2 如何使用 Last-Modified 和 Etags 如何帮助提高性能?开发者会把 Last-Modified 和 ETags 请求的 HTTP 报头一起使用，这样可利用客户端（例如浏览器）的缓存。因为服务器首先产生 Last-Modified/Etag 标记，服务器可在稍后使用它来判断页面是否已经被修改。本质上，客户端通过将该记号传回服务器要求服务器验证其缓存是否过期。 HTTP 协议规格说明定义 ETag 为“被请求变量的实体值”。 服务器单独负责判断记号是什么及其含义，并在 HTTP 响应头中将其传送到客户端，以下是服务器端返回的格式： ETag: “d41d8cd98f00b204e9800998ecf8427e” 客户端的查询更新格式是这样的： If-None-Match: W/“d41d8cd98f00b204e9800998ecf8427e” 如果ETag没改变，则返回状态304，内容为空，这也和Last-Modified一样。下面再扔些php的例子看看： 123456789101112 $file = 'myfile.php'; $last_modified_time = filemtime($file); $etag = md5_file($file); header("Last-Modified: ".gmdate("D, d M Y H:i:s", $last_modified_time)." GMT"); header("Etag: $etag"); if (@strtotime($_SERVER['HTTP_IF_MODIFIED_SINCE']) == $last_modified_time || trim($_SERVER['HTTP_IF_NONE_MATCH']) == $etag) &#123; header("HTTP/1.1 304 Not Modified"); exit; &#125; 补充：对于前端部分网上的一些做法是：Gulp对所有的静态资源进行预处理，生成一份manifest，标明了预处理前后文件之间的对应关系。DEMO, 另外腾讯前端团队的一篇关于web缓存系列文章大家也可以查阅下：直通车 总结技术的变革一般都是为了提高生产力的，restful的初衷也是。它提倡简单（理论上讲只要业务实体抽象的好就够了），纯粹（每个资源就四种操作）的 API 设计思想，需要使用者坚持信仰（坚持基本原则），适度灵活。 — 来自SF.gg Q&amp;A1. 务器返回的数据格式，应该使用JSON还是使用XML？推送使用JSON，如果提供的服务对象较多，可以设置兼容XML 2. REST能应用在什么场景？REST规范中明确规定，处理的是资源（或者实体），而不是动作。换句话说，REST处理的是books或者animals这种东西，而login之类的业务逻辑是动作，不适用REST。 restful 可以看做 orm 的 web api 形式，也就是说，资源指的是数据库里面的表（或者表的连接），或者是你nosql数据库里面的对象。当调用者需要并且有权直接操作它们，或者是以表的粒度操作数据库，才需要使用 restful。 3. 统计能使用REST吗？4. 兴趣探讨Vue.js、ReactJS、AngularJS5. 扩展：API Cookie加密6. php crud 和resetful的相似之处参考简单版： 《RESTful API 设计指南》 - 阮一峰的网络日志 restful-api-design-references REST API 使用详解 国内值得关注的官方 API 集合 高阶版： phalcon框架的REST实践 PHP-CRUD-API: UPS： https://segmentfault.com/a/1190000004038353 https://segmentfault.com/a/1190000002690813 https://zhujun24.github.io/2014/12/10/AngularJS%E5%85%A5%E9%97%A8%E7%9A%84%E5%B0%8FDemo/ https://zhujun24.github.io/2015/03/19/%E7%94%A8Slim%E8%BD%BB%E5%9E%8BPHP%E6%A1%86%E6%9E%B6%E5%86%99RESTful%20APIs/ https://segmentfault.com/a/1190000004690182 http://www.php.cn/php-notebook-285669.html http://www.yiifans.com/yii2/guide/tool-gii.html]]></content>
      <categories>
        <category>php</category>
        <category>api</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[感冒最全用药攻略]]></title>
    <url>%2F2017%2F07%2F18%2Fcold-rehabilitation.html</url>
    <content type="text"><![CDATA[一. what“出门多穿点别着凉”、“捂好脑袋别见风”，每到冬天，我们耳边总少不了这些叮嘱。似乎只要别着凉、别见风、别出门的地方，就能够防着感冒这个大魔王了。 但感冒真是由风和寒冷引起的？防感冒最好是待屋里别出去？我们的预防三板斧，真的管用吗？ 二. 用药大全2.1 常见感冒药 在服用阿司匹林时需要关注出血风险。这个出血风险并非脑出血，而是消化道黏膜的弥漫性出血。为减少阿司匹林用药的不良反应，用药前，医生会识别消化道损伤的高危人群，包括年龄≥65岁、既往有消化道溃疡或出血病史、合并服用其他抗栓药物/糖皮质激素等。 2.2 找药1) 流鼻涕、鼻塞——找“麻” 药盒上写了“麻”的代表里面含有“伪麻黄碱”，这种成分能减轻鼻咽粘膜充血，缓解你的鼻塞、流鼻涕。 2) 浑身酸痛、低烧——找“酚”“酚”指的是对乙酰氨基酚，能够有效地缓解疼痛和退烧。我们平常能买到的感冒药，比如新康泰克、感康、白加黑等，都含有这种成分。 此外，布洛芬、吲哚美辛、阿司匹林和对乙酰氨基酚的作用类似，如果感冒药中有这几种成分的话，也能帮你降温、减轻身体酸痛感。 不适宜人群：有消化道溃疡的人。 3) 干咳——找“美”这个“美”指的是右美沙芬，它是临床上常用的的一种中枢性镇咳药，含此成分的感冒药通用名多含有“美”字。咳嗽比较厉害，晚上甚至因为咳嗽很难睡好觉的话，选它就对了。 不适宜人群：痰多的患者要慎用，这种药的中枢镇咳作用可能会影响痰液排出；怀孕3个月以内的女性禁用。 4) 打喷嚏、流鼻涕——敏（氯苯那敏）氯苯那敏就是我们熟知的扑尔敏，它的作用是抗过敏，能让你少打喷嚏、流鼻涕，而且还有一定的镇静作用（让你犯困，想睡觉）。 不适宜人群：因为药物有镇静作用，所以吃药的时候最好不要开车、从事高空作业或者是做任何精细操作，好好休息。 其他 上面的时候可以选择含有咖啡因的感冒药, 有提神 2.3 禁忌1) 感冒药别混着吃，容易吃过量！虽然感冒药的名字不一样，但是里面可能含有很多相同的成分，甚至是一些中成药里也含有“对乙酰氨基酚”、“氯苯那敏”等。药物过量可能会伤害胃黏膜，造成胃痛、胃溃疡、过度困乏，所以不论吃啥药前，都看看成分表吧，避免服用过量。 2) 不要一大把药一起吃！如果本身就有固定要吃的药（比如降血压的药之类的），加上感冒药就更多了，但最好不要手里拿一把药一起吃下去，因为很多药物之间有相互反应，甚至会产生一些毒性，建议每间隔半小时再吃另一种药。 3) 吃感冒药别喝酒吃啥药最好都别喝酒，饮酒会导致肝功能下降，影响药物的代谢。 4) 吃了感冒药，别开车！感冒药中的氯苯那敏、扑尔敏等成分有一定的镇静作用，吃了之后会让你昏昏欲睡，开车的时候精神不集中，很容易导致交通事故。 而感冒药里最容易使人犯困的一类成分，就是能减轻流鼻涕的「抗组胺成分」。抗组胺成分目前有两类，一类比较「古老」，它们在起作用的同时还可以通过我们大脑的血脑屏障进入大脑，对大脑产生明显抑制作用而让我们犯困，被称作「第一代抗组胺药」。属于这一代的药，有马来酸氯苯那敏（俗称「扑尔敏」）、苯海拉明、赛庚啶、异丙嗪、酮替芬。 关于育苗: 流感疫苗是安全有效的，老人和孩子最好要按时接种。流感疫苗是使用每年最流行的三个病毒株做成疫苗，也就是说，注射之后人会获得对于最流行的几种感冒的抗性。注射疫苗尽管不能避免得感冒，但是却能避过最厉害的那几种去。 说到最后还是建议大家多运动,多保持健康向上的心态工作和生活,. 最后再奉上常见感冒药成分表2张，祝大家健康~~ (先说明不是在做广告, 截止今天未收到任何商家的广告费..) 有趣的问题: 你们知道处方药 和 非处方药(OTC) 的区别吗? 中成药和复方的区别? http://chuansong.me/n/1509328352420 https://www.zhihu.com/question/28697324 https://zhuanlan.zhihu.com/p/21956501?refer=c_32319456 https://zhuanlan.zhihu.com/p/21956501?refer=c_32319456 http://songshuhui.net/archives/23219 http://nakseuksa.github.io/2016/04/03/%E5%8C%BB%E7%94%9F%E7%9F%A5%E9%81%93%E7%9A%84%E4%BA%8B/]]></content>
  </entry>
  <entry>
    <title><![CDATA[MySQL硬盘实例测试之裤子搭建]]></title>
    <url>%2F2017%2F07%2F18%2Faction%2Fkuzi-act.html</url>
    <content type="text"><![CDATA[裤子搭建过程（未完成）： 一, 安装新实例/usr/local/mysql/bin/mysqld –defaults-file=/data/mysql/3306/my.cnf –basedir=/usr/local/mysql –datadir=/data/mysql/3306/data –plugin-dir=/usr/local/mysql/lib/plugin –user=mysql –log-error=/data/mysql/3306/mysql_run.err –open-files-limit=65536 –pid-file=/data/mysql/3306/pid_mysql.pid –socket=/data/mysql/3306/mysqltmp/mysql.sock –port=3306 mysqld –initialize –user=mysql –console 1mysqld --defaults-file=/opt/data/mysql/var/my.cnf --basedir=/usr/local/Cellar/mysql/5.7.11 --datadir=/opt/data/mysql/data --plugin-dir=/usr/local/Cellar/mysql/5.7.11/lib/plugin --user=mysql --log-error=/opt/data/mysql/var/mysql_run.err --open-files-limit=2048 --pid-file=/opt/data/mysql/var/pid_mysql.pid --socket=/opt/data/mysql/var//mysql.sock --port=3307 --initialize --user=mysql --console 注意尾部有: mysqld --initialize --user=mysql --console错误: 2017-02-13T06:47:11.067815Z 0 [Warning] Could not increase number of max_open_files to more than 7168 (request: 65536) 生成后, 通过日志文件找到新实例的密码为:2017-02-13T06:50:20.157831Z 1 [Note] A temporary password is generated for root@localhost: Gbovl1rilt;Q 执行启动应用:mysqld –defaults-file=/opt/data/mysql/var/my.cnf –basedir=/usr/local/Cellar/mysql/5.7.11 –datadir=/opt/data/mysql/data –plugin-dir=/usr/local/Cellar/mysql/5.7.11/lib/plugin –user=mysql –log-error=/opt/data/mysql/var/mysql_run.err –open-files-limit=2048 –pid-file=/opt/data/mysql/var/pid_mysql.pid –socket=/opt/data/mysql/var//mysql.sock –port=3307 进入mysql-cli后修改密码 : set password = password(‘root’); 二, 社工库操作2.1 数据导入的方法合集mysql-cli中导入: source xxx.sql;LOAD DATA INFILE ‘~/Downloads/2345.csv’ INTO TABLE tmp FIELDS TERMINATED BY ‘,’ ENCLOSED BY ‘“‘ LINES TERMINATED BY ‘\n’ IGNORE 1 ROWS; /Volumes/BoxHD/db/SGK/163 12345678910111213141516171819202122LOAD DATA INFILE '/Volumes/BoxHD/db/SGK/163/1.txt' \INTO TABLE account \FIELDS TERMINATED BY ',' \ ENCLOSED BY '"' \LINES TERMINATED BY '\n' \-- IGNORE 1 LINES \(name, password);LOAD DATA INFILE '/Volumes/BoxHD/db/SGK/163/2.txt' \INTO TABLE account \FIELDS TERMINATED BY ' ' \ ENCLOSED BY '"' \LINES TERMINATED BY '\n' \(name, password);LOAD DATA INFILE '/Volumes/BoxHD/db/SGK/163/3.txt' \INTO TABLE account \FIELDS TERMINATED BY '\t' \ ENCLOSED BY '"' \LINES TERMINATED BY '\n' \(name, password);]]></content>
  </entry>
  <entry>
    <title><![CDATA[实战项目]]></title>
    <url>%2F2017%2F07%2F18%2Faction%2Findex.html</url>
    <content type="text"><![CDATA[这里罗列一些实战的项目。 举个栗子，我弄了个裤子，you know it!]]></content>
  </entry>
  <entry>
    <title><![CDATA[hadoop note]]></title>
    <url>%2F2017%2F06%2F22%2Fhadoop-note.html</url>
    <content type="text"><![CDATA[12$ 查看文件列表清单hadoop fs -du -h /user/hive/warehouse/&#123;database_name&#125;.db/&#123;table_name&#125;;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Learn about phpunit]]></title>
    <url>%2F2017%2F06%2F22%2Flearn-about-phpunit.html</url>
    <content type="text"><![CDATA[phpunit测试Laravel Dusk 12$ install laravel framework for test phpunitcomposer create-project laravel/laravel --prefer-dist laravel-testing phpunit 指定类测试 phpunit –filter=类名 or 方法名 断点判断相等:(断言) $this-&gt;assertEquals(‘值’, $xxx-&gt;function()); $this-&gt;assertCount($value, $xxx-&gt;method()); 其他： 安装phpstrom插件 CamelCase, 可以切换驼峰或者匈牙利密码法的名称，快捷键 shift + alt + U 可测试的设计原则 单元测试中， 代码在一个隔离的环境中运行（周围没有它熟悉的框架 和配置）， 所以尽量低的耦合和明确的依赖关系是可测试代码的最主要的要求。 实现低耦合的代码， 重点是按照单一职责原则，对系统进行功能划分， 达到高内聚（一个单元能完成一个具体的功能），低耦合（模块之间 的接口最简单）。 明确的依赖关系需要通过依赖注入的方式来实现，不能对代码的运行 环境有任何隐含的假设， 这样仅通过接口的声明， 而不需要了解实现， 就可以知道让这个模块跑起来所需要的资源。 不可测试的代码 超全局变量（Superglobals） $_ 写在构造函数中的业务逻辑 静态方法（static class method） Class:: 单例（Singleton） &amp;get_instance() PHP的动态魔术 超长的函数和类 总结 可测试的代码， 一定是遵照依赖倒置原则DIP写出的代码 代码模块之前的依赖关系， 是按照单一职责SRP的划分产生的 单一职责决定了接口设计需要小而专一，即接口隔离ISP 单一职责原则要求把系统中变化的和不变的部分分离，以达到对扩展 开放， 对修改封闭OCP 继承和多态是实现可扩展架构的主要工具，里氏替换原则LSP明确了对继承的要求：子类需要能胜任父类工作的所有岗位， 才算个合格的子类。 可测试的代码 == SOLID Single Responsibility Principle : 单一职责原则(SRP) Open-Close Principle: 开闭原则(OCP) Liskov Substitution Principle : 里氏替换原则(LSP) Interface Segregation Principle : 接口隔离原则(ISP) Dependency Inversion Principle: 依赖倒置原则(DIP) 持续集成 持续集成并不属于自动化测试， 但它是保证自动化测试能顺利实施的 必要条件。 持续集成会在代码每次提交时执行代码构建， 自动化测试，代码检查， 自动部署等工作，给开发人员及时的反馈， 来保证小问题不会积累。 单元测试时需要同代码一起变化的， 只有一直在运行的测试代码才不 会被遗忘， 才能被不断维护。 解决开发与测试之间“在我机器上没问题”的问题 CI工具箱 Jenkins PHPUnit CodeCeption Behat PHPSpec PHP Mess Detector PHP Code Sniffer 测试驱动开发会带来的改变 一开始的进度变慢了 写代码前需要更多的思考， 分解问题， 设计接口 学习测试工具， 准备测试代码 可测试的代码 测试驱动会促使你写出可测试的代码， 不然写测试用例没法下手 有了自动测试的保护， 可以随时重构看着不顺眼的代码 信心 对于已经完成的代码正确性有十足的信心 面对新功能和需求变更，可以对开发时间有准确的估计 遇到bug可以快速的定位和修复问题]]></content>
  </entry>
  <entry>
    <title><![CDATA[php的各种超时设置]]></title>
    <url>%2F2017%2F06%2F22%2Fphp-time-out.html</url>
    <content type="text"><![CDATA[ini_set(‘mysql.connect_timeout’, 1800);ini_set(‘default_socket_timeout’, 1800);ini_set(‘max_execution_time’, 1800); set_time_limit(1800); request_terminate_timeout]]></content>
  </entry>
  <entry>
    <title><![CDATA[100 way to setting proxy]]></title>
    <url>%2F2017%2F06%2F19%2F100-way-to-setting-proxy.html</url>
    <content type="text"><![CDATA[$ terminal setting proxy: export http_proxy=socks5://127.0.0.1:5566export https_proxy=$http_proxyunset http_proxy https_proxy $ see other proxy setting 12345678910111213141516171819$ add some alias alias goproxy='export http_proxy=socks5://127.0.0.1:5566 https_proxy=socks5://127.0.0.1:5566'alias disproxy='unset http_proxy https_proxy'$ setting homebrew :export ALL_PROXY=socks5://127.0.0.1:5566 ALL_PROXY=socks5://127.0.0.1:9001 brew upgrade$ see what ip you in!curl ip.cnadd sss /usr/local/opt/shadowsocks-libev/bin/ss-local -c /usr/local/etc/shadowsocks-libev.json &gt; /dev/null 2&gt;&amp;1 &amp;/usr/local/opt/shadowsocks-libev/bin/ss-local -c /usr/local/etc/shadowsocks-libev-cn.json &gt; /dev/null 2&gt;&amp;1 &amp;/usr/local/opt/shadowsocks-libev/bin/ss-local -c /usr/local/etc/shadowsocks-libev-jp.json &gt; /dev/null 2&gt;&amp;1 &amp; 也可以使用Mac的launchctl来启动|停止12345launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.xxxxx.plistlaunchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.xxxx.plist # 新增定时任务ln -sfv /usr/local/opt/xxx/*.plist ~/Library/LaunchAgents # 设置开机启动launchctl load ~/Library/LaunchAgents/homebrew.mxcl.xxxx.plist]]></content>
  </entry>
  <entry>
    <title><![CDATA[我的Mac开发工具集]]></title>
    <url>%2F2017%2F06%2F19%2Fmy-mac-dev-tools.html</url>
    <content type="text"><![CDATA[1. zsh插件命令行自动提醒：zsh-autosuggestions 2. tig一个不错的git 下cli管理工具安装： brew install tig 3. ccat高亮显示源码安装： brew install ccat 4. item配色工具https://github.com/mbadolato/iTerm2-Color-Schemes 5. git自动部署http://overtrue.me/articles/2015/01/how-to-deploy-project-with-git-hook.html https://m.aoh.cc/149.html 6. php类库php shell wrapper 7. phpstom使用的一些技能laravel help： 解决类库无法找到的问题 phpstorm live template 功能。模板参考如： 12345&lt;!--- $VALUE$ Field ---&gt;&lt;div class="form-group"&gt; &#123;!! Form::label('$NAME$', '$VALUE$:') !!&#125; &#123;!! Form::text('$NAME$', null, ['class' =&gt; 'form-control']) !!&#125;&lt;/div&gt; 更详细的文档可以参考：Laravel Live Templates for PhpStorm 验证码geetest 滑动验证 http://blog.csdn.net/paololiu/article/details/52514504 ping++ 聚合付费sdkSentry服务集中处理Sentry.io 是一个超级棒的错误处理工具，它可以捕捉应用在生产环境中出现的 exception 和 errors，直接将其定位到具体的某一行，对于应用的运维和修复 bug 都是一件非常好的事]]></content>
  </entry>
  <entry>
    <title><![CDATA[JavaScirpt-Note-jquery and ajax]]></title>
    <url>%2F2017%2F06%2F15%2FJavaScirpt-Note-jquery-and-ajax.html</url>
    <content type="text"><![CDATA[本章节主要说 jquery基础使用和jquery ajax处理]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux命令 : awk]]></title>
    <url>%2F2017%2F06%2F14%2FLinux-Commond-awk.html</url>
    <content type="text"><![CDATA[参考文章 计划 应用Linux统计日志文件中的IP数linux下用awk统计日志中各个ip访问页面的次数，日志格式如下： 211.154.151.115 - - [25/Jun/2013:00:00:01 +0800] “GET /SeeHouse/index/childId/17051 HTTP/1.0” 200 10011 “http://fity.cn/17051.html“ “Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; 2345Explorer)” 56.132.231.179 统计结果： 1234awk '&#123;a[$1]+=1;&#125;END&#123;for(i in a)&#123;print a[i]" " i;&#125;&#125;' newlog_20130624.log $ 结果: $ 29 222.73.31.71$ 17 221.194.30.104 统计文件中出现次数最多的前10个单词http://blog.sina.com.cn/s/blog_5dce657a01012ddi.html 1cat logt.log|sort -s -t '-' -k1n |awk '&#123;print $1;&#125;'|uniq -c|sort -k1nr|head -100 awk统计文件中某关键词出现次数的命令awk -F “” ‘{for(i=1;i&lt;=NF;++i) if($i==”a”) ++sum}END{print sum}’ test.cawk ‘{for(i=1;i&lt;=NF;++i) if($i==”test”) ++sum}END{print sum}’ test.c 参考 http://www.blogjava.net/henry14/archive/2012/01/15/368560.html http://www.jianshu.com/p/ea22c809ae9f &lt;&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[JavaScirpt Note: JavaScript基础篇]]></title>
    <url>%2F2017%2F06%2F05%2FJavaScirpt-Note-the-basic-javascript.html</url>
    <content type="text"><![CDATA[前言. javascript基本信息javascript是所学最难的编程语言,这里先给大家简单说下js的一些基层知识,在本月会持续更新到js高级部分. enjoy it! js与java的关系： 雷锋与雷锋塔的关系 js能做什么：游戏|后台应用程序|前台特效 00.javascript学习大纲: 基础语法 内置对象 浏览器对象 文档对象 节点对象 ajax无刷新技术 jquery框架 一. 语法特性1.1 基础语法页面嵌套js123456789方法1：&lt;script&gt; //js代码&lt;/script&gt;方法2：&lt;script type="text/javascript" src="//cdn.trackjs.com/releases/current/tracker.js"&gt;&lt;/script&gt; 在页面上加入script标签的地方只有两个地方:head中，body体中 加载外部的js文件，在head中加 写页面特效，js放到body后面 js是面向对象的语言，严格的说是基于对象的语言 document js类实例化出来window js类实例化出来 注释12// 注释方法1/* 注释方法2 */ 认识js基础对象 window //窗口对象 document //文档对象 document.documentElement //html对象 document.body //body对象 //主要战场 document.head //head对象 写js代码的时候可以不用写window对象，直接写window属性和方法就可, ex: alert(); //window的方法 window.document.write(“aaa”); //write方法是属性于document的//document.write()在页面所有元素加载完毕以后，不要再随便使用document.write,否则会关闭当前文档流，重新打开一个新的文档流，然后输出到这个文档流中. demo. 创建元素: 1.2 基础语法1.2.1 变量JavaScript 语言是区分大小写的，不管是命名变量还是使用关键字的时候。 大多数情况下，JavaScript 忽略空白或者 JavaScript 语句之间的空格（也包括 Tab 键产生的空白缩进）。 js变量的声明: var 变量名; js中可以同时赋值多个变量: 12var a=2 , b =12;alert(a); 变量的定义 定义变量：var str=&quot;hello world&quot;; js一定要用var修饰变量,否则会报”不遵守标准” 输出变量 123alert(str);document.write(str);console.log(str); 变量定义和调用前面不用加$ 变量类型 字符串 整型 num=10; 浮点 num=10.3; 布尔 str=false; 数组 js只有索引数组，而且遍历没有foreach，只有for 对象 12345obj=new Object();obj.name="user1";obj.say=function()&#123; alert("aaaaaaaaaaaaaa");&#125; json对象 {“name”:”user1”,”age”:”30”} NaN not a number 不是一个数字，非数字 null 空,对象类型 undefined 未定义 检查变量类型 typeof() //global对象的其中一个方法，typeof() 对象.constructor; //查看当前对象的构造函数是谁123if(arr.constructor==Array)&#123; alert("数组"); //数组推荐用这种方法，因为typeof得到是object&#125; 变量类型转换 字符串 .toString() //返回字符串 1234array.toString();bool.toString(); date.toString();number.toString(); 整型 从字符串转成整型 123parseInt("3abc"); //"3","3abc"parseFloat(); //"3.3"abc3 最后会被转成NaN 还可以用new Number(“3”); 只能转”3” “3.2”，不能转”3abc” 布尔类型 1)!!各种数据类型 2)new Boolean(各种数据类型); 为false的情况: false、0、null、 NaN，或者空字符串 json字符串转json对象12str="&#123;'name':'user'&#125;";obj=eval("("+str+")"); eval(字符串表达式); 把一个字符串表达式做一个表达式去执行 变量运算符 + 字符串连接符 new 创建对象用的 this 本对象 in 检查某一个属性是否是这个对象里面的 void //可以不用去记,作用产生任何返回值 instanceof // 检查某个对象是否是由某个构造函数产生的, demo: delete //不能删除用var定义的变量，删除数组的某一个值，或者对象的某个属性. 1.2.2 控制语句 with 12345with(document)&#123; write("111111"); write("111111"); write("111111");&#125; if 12345if()&#123;&#125;else&#123;&#125; while 123while()&#123;&#125; for 1234567for(var i=0,l=arr.length;i&lt;l;i++)&#123; document.write(i,"&lt;br&gt;");&#125;for(var i in obj)&#123; document.write(i,"=&gt;",obj[i],"&lt;br&gt;"); &#125; switch case 1.2.3 消息框 alert(); //警告 confirm(); //确认 prompt(); //提示 1.2.4 函数 有名的函数 function show(){} 匿名函数(无名的函数)12obj.say=function()&#123;&#125;obj.say(); 变量作用域 var 不用var修饰 只有在函数内定义的var str=20，它是局部变量，其余的地方全面全局变量. 1.2.5 对象对象遍历 遍历body: 12345678910111213141516171819202122232425&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="div1"&gt; &lt;h1 id="obj1" onclick="alert(111)"&gt;111&lt;/h1&gt; &lt;h1 id="obj2"&gt;222&lt;/h1&gt; &lt;h1 id="obj3"&gt;333&lt;/h1&gt; &lt;button id="btobj" onclick="show()"&gt;source&lt;/button&gt; &lt;/div&gt;&lt;/body&gt; &lt;script&gt; var obj=document.body; for(var i in obj)&#123; if(i!="innerHTML" &amp;&amp; i!="outerHTML")&#123; document.write(i," =&gt; ",obj[i],"&lt;br&gt;"); &#125; &#125; &lt;/script&gt;&lt;/html&gt; 顶级全局方法12345678910111213parseInt();parseFloat();typeof();eval();isNaN();String();Number();Array();Object();Bool();encodeURIComponent();decodeURIComponent(); 内置对象 数学 属性: Math.pi 方法:123456Math.ceil();Math.floor();Math.round();Math.random();Math.max();Math.min(); 日期12var tt=new Date();var time=tt.getFullYear()+"-"+(tt.getMonth()+1)+"-"+tt.getDate()+" "+tt.getHours()+":"+tt.getMinutes()+":"+tt.getSeconds(); 定时器12s1=setInterval(函数,3);clearInterval(s1); 超时器 12s2=setTimeout();clearTimeout(s2); 字符串 属性:length方法: 12345678indexOf()lastIndexOf();substr(0,5);slice(start,end);split(reg);search(reg); //匹配到返回的是首次出现的位置，匹配不到是-1match(reg); //匹配到返回的是匹配的字符串数组，匹配不到是nullreplace(reg,"str"); //返回的是替换后的新字符串,没有替换，则返回原字符串 数组 属性:length方法: 12345678910111213141516join("/");pop() //返回弹出的值，并且改变原数组push() //从后面压入一个值，并且返回数组长度shift() //返回弹出的值，并且改变原数组unshift() //从前面压入一个值，并且返回数组长度reverse() //把数组元素进行反转，反转原数组concat() //连接多个数组slice(start,end) //返回的是数组sort(show)//show(a,b)&#123; return a-b; //正序 //return b-a; //倒序&#125;splice()//2,0,"abc" 从第三个开始，删除0个，并且插入abc//2,3,"abc" 从第三个开始, 删除3个，并且插入abc demo: 遍历数组 常用js对象: 1.window对象2.document对象3.document.head对象4.document.body对象5.document.title对象6.document.documentElement对象 12345678910windowdocumenthtml head title /title /head body /body/html 浏览器默认行为 1234&lt;a href="index.php" target="_blank"&gt;&lt;/a&gt;&lt;form action="index.php" target="_blank"&gt;&lt;/form&gt;&lt;input type=submit name=sub value="提交"&gt;&lt;input type=reset name=set value="重置"&gt; 事件绑定 &lt;button id=bid onclick=&quot;js&quot;&gt;&lt;/button&gt; 在js中给元素标签绑事件 1234567&lt;button id=bid&gt;&lt;/button&gt;&lt;script&gt;bid=document.getElementById("bid");bid.onclick=function()&#123; alert(111);&#125;&lt;/script&gt; 事件类型 12345678910111213141516171819201.onclick2.ondblclick3.onmouseover4.onmouseout5.onmousedown6.onmouseup7.onmousemove8.onkeydown9.onkeyup10.onkeypress11.onfocus12.onblur13.onchange14.onselect15.onsubmit16.onreset17.onload18.onerror19.onresize20.onscroll 方法:12341.select()2.blur()3.focus()4.click() 表单事件: demo 点击事件: demo 范例合集: JavaScript 数据类型JavaScript 主要有如下 6 种数据类型： 字符串（String）类型: 字符串类型使用双引号 “ 或单引号 ‘ 括起来 数值（Number）类型: 数值（Number）类型包括整数和浮点数（包含小数点的数或科学记数法的数） 布尔（Boolean）类型 空值（Null）: 空值类型表示该变量或内容无任何值 未定义（Undefined）类型: 变量被创建后，未给该变量赋值，该变量即为未定义类型 对象（Object）类型 JavaScript 是一门松散的语言，甚至可以说是混合语言，因此导致其数据类型以及类型之间的关系比较复杂。另外也有一些人把 function（函数） 列为数据类型之一，对于这些有一定争议的说法 JavaScript 运算符JavaScript 运算符主要包括： 算术运算符 : + - * / % ++ – 赋值运算符 比较运算符 三元运算符 123x = 2;y = (x == 2) ? x : 1;alert(y); //输出：2 逻辑运算符: &amp;&amp; || ! 字符串连接运算符: 连接运算符 + 主要用于连接两个字符串或字符串变量。因此，在对字符串或字符串变量使用该运算符时，并不是对它们做加法计算。 JavaScript 循环控制1234var i=1for (i = 1; i &lt;= 10; i++) &#123; document.write(i + "&lt;br /&gt;")&#125; JavaScript 流程控制JavaScript for 循环用于反复执行一段代码，其语法如下： for (expr1; expr2; expr3){ statement } for 循环语法解读. expr1 在循环开始前无条件求值一次. expr2 在每次循环开始前求值，如果值为 TRUE，则继续循环，执行嵌套的循环语句；如果值为 FALSE，则终止循环。. expr3 在每次循环之后被求值（执行）. 每个表达式都可以为空。如果expr2 为空意则将无限循环下去， 1234var i=1for (i = 1; i &lt;= 10; i++) &#123; document.write(i + "&lt;br /&gt;")&#125; JavaScript 消息提示框alert(): confirm(): 创建一个消息确认框 prompt(): 创建一个消息提示框 JavaScript 函数函数是 JavaScript 语言的核心之一，其基本语法如下： function functionName(arg0, arg1, ...) { statements } JavaScript 函数参数错误 JavaScript 函数参数并没有严格要求哪些参数是必选参数，哪些参数是可选参数，因此传入的参数个数是允许不等于定义函数时参数的个数的。如果在函数中使用了未定义的参数，则会提示语法错误（参数未定义），JavaScript 代码不会正常运行。如果参数已经定义，但未正确的传入参数时，相关参数值会以 undefined 替换，JavaScript 代码仍正常运行，如下例所示： 123456&lt;script type="text/javascript"&gt;function hello(name,age)&#123; document.write("我叫" + name + "，今年" + age + "岁！");&#125;&lt;/script&gt;&lt;input type="button" onclick="hello('小明')" value="确定" /&gt; 输出：我叫小明，今年undefined岁！ JavaScript arguments 对象 在 JavaScript 函数中，有个特殊的 arguments 对象，它以类似数组的形式保存了当前函数调用的参数。因此，开发者无需定义具体的参数名，就可以方便的访问函数参数： 123456&lt;script type="text/javascript"&gt;function hello()&#123; document.write("我叫" + arguments[0] + "，今年" + arguments[1] + "岁！");&#125;&lt;/script&gt;&lt;input type="button" onclick="hello('小明',18)" value="确定" /&gt; 输出：我叫小明，今年18岁！ 通常在函数定义中，为便于代码的可读性，一般不会使用 arguments 对象。在处理不定数目的参数，或者模拟函数重载时，可方便的使用 arguments 对象来处理。 arguments.length 可以很方便的检测函数的参数个数。 document.write(arguments.length); JavaScript 事件JavaScript 面向对象JavaScript 字符串处理(String对象)JavaScript 数组JavaScript 时间日期(Date 对象)JavaScript 数学计算(Math对象)JavaScript Boolean 对象JavaScript History 对象JavaScript Location 对象JavaScript Navigator 对象JavaScript Screen 对象JavaScript Document 对象JavaScript Window 对象]]></content>
  </entry>
  <entry>
    <title><![CDATA[编辑器宏和批量替换（sublime & notepad++）]]></title>
    <url>%2F2017%2F05%2F31%2Fide-for-replace.html</url>
    <content type="text"><![CDATA[sublime批量替换 批量替换空行：^\n =&gt; (留空) 删除全部空格将代码压缩：(?ms)\s* =&gt; (留空)- 当然，如果想把这些绑定到快捷键中，使用插件RegReplace吧！ 下面是我自己的一些配置： file: Packages/User/reg_replace_rules.sublime-settings : 12345678910111213141516171819202122232425262728293031323334353637383940414243&#123; "format": "3.0", "replacements": &#123; "php_ini_comma_replace": &#123; "find": "^;.+!?\\n", "replace": "", "greedy": true &#125;, "add_slash_for_str": &#123; "find": "^(.+)$", "replace": "\"\\1\"", "greedy": true &#125;, "wrap_to_comma": &#123; "find": "\\n", "replace": ", ", "greedy": true &#125;, "remove_comment": &#123; "find": "(\\s+|^|;)(//.*)$", "replace": "", "greedy": true &#125;, "remove_space_for_gzip": &#123; "find": "(?ms)\\s*", "replace": "", "greedy": true &#125;, "remove_space_and_tab_at_end": &#123; "find": "[ \t]*$", "replace": "", "greedy": true &#125;, "remove_empty_line": &#123; "find": "^\\n", "replace": "", "greedy": true &#125; &#125;&#125; 用户快捷键绑定:Packages/User/Default (OSX).sublime-keymap: 1234567891011121314151617181920212223242526[ // .... // php注释清除 &#123; "keys": ["super+ctrl+shift+p"], "command": "reg_replace", "args": &#123;"replacements": ["php_ini_comma_replace", "remove_empty_line"]&#125; &#125;, // js css 代码压缩 &#123; "keys": ["super+ctrl+shift+z"], "command": "reg_replace", "args": &#123;"replacements": ["remove_comment", "remove_space_for_gzip"]&#125; &#125;, // 清理末行空格 和 tab &#123; "keys": ["super+ctrl+shift+d"], "command": "reg_replace", "args": &#123;"replacements": ["remove_space_and_tab_at_end"]&#125; &#125;, // 逗号分隔每个字符 &#123; "keys": ["super+ctrl+shift+m"], "command": "reg_replace", "args": &#123;"replacements": ["remove_empty_line", "add_slash_for_str", "wrap_to_comma"]&#125; &#125; 补充，正则中如果要排除某个字符串要这么写：^(?!912).*$]]></content>
  </entry>
  <entry>
    <title><![CDATA[php报错配置]]></title>
    <url>%2F2017%2F05%2F31%2Fphp-errors-setting.html</url>
    <content type="text"><![CDATA[php报错的配置php.ini默认开发环境设置如： 1234567891011error_reporting = E_ALL&amp;~E_NOTICEdisplay_errors = Ondisplay_startup_errors = Onlog_errors = Onlog_errors_max_len = 1024ignore_repeated_errors = Offignore_repeated_source = Offreport_memleaks = Ontrack_errors = Onhtml_errors = Onerror_log = /usr/local/var/log/php-error-56.log 注意配置display_errors和display_startup_errors,如果是在线上环境切记要设置为Off。这样就可以不显示报错信息，但会记录在错误的日志文件中。 如果配置了error_log = syslog, 则是指定产生的错误报告写入操作系统的日志里。 框架报错日志调试thinkphp设置默认报错地址： Thinkphp\Conf\debug.php里面加入1'LOG_PATH' =&gt; realpath(LOG_PATH).'/', 这个配置在tp中是默认开启的，默认生成在 run_time/Logs/xxx下面 开启trace功能： 需要在配置中启用如下代码：1'SHOW_PAGE_TRACE' =&gt;true, 相关参考： 跟老杨学ThinkPHP3 laravel]]></content>
  </entry>
  <entry>
    <title><![CDATA[Bash风格指南]]></title>
    <url>%2F2017%2F05%2F26%2FBash-code-style.html</url>
    <content type="text"><![CDATA[Bash 风格指南来源 本风格指南旨在描述如何编写 bash 脚本，并使其安全和可预测。本指南基于 this wiki，特别是这个页面： http://mywiki.wooledge.org/BashGuide/Practices 如本指南中有任何东西并未明确提出，则默认遵循这个 wiki 中所描述的观点。 美学使用制表符还是空格制表符 分号你无需在命令行中使用分号（我希望是这样），同样也不要在脚本中使用它。 1234567# wrongname='dave';echo "hello $name";#rightname='dave'echo "hello $name" 函数不要使用关键字 function 创建函数。所有函数中创建的变量都应该声明为局部变量。 123456789# wrongfunction foo &#123; i=foo # this is now global, wrong&#125;# rightfoo() &#123; local i=foo # this is local, preferred&#125; 代码块声明then 应与 if 放在同一行，do 应与 while 放在同一行。 123456789101112131415# wrongif truethen ...fi# also wrong, though admittedly looks kinda cooltrue &amp;&amp; &#123; ...&#125;# rightif true; then ...fi 间距不要超过两个连续的换行符（即不超过一行空行）。 注释注释没有明确的代码风格。除非你重写或者更新注释内容，否则不要因为美观的因素去改动它。 Bash 主义本风格指南用于 bash。这意味着，如果可以选择，使用 bash 的内建命令或关键字，总是好于外部命令或sh(1)的语法。 test(1)使用 [[ ... ]] 进行条件测试, 而不是 [ .. ] 或 test ... 12345678# wrongtest -d /etc# also wrong[ -d /etc ]# correct[[ -d /etc ]] 查看 http://mywiki.wooledge.org/BashFAQ/031 了解更多信息。 队列使用 bash 的内部命令生成队列。 123456789101112131415161718192021n=10# wrongfor f in $(seq 1 5); do ...done# wrongfor f in $(seq 1 "$n"); do ...done# rightfor f in &#123;1..5&#125;; do ...done# rightfor ((i = 0; i &lt; n; i++)); do ...done 命令替换使用 $(...) 进行命令替换. 12foo=`date` # wrongfoo=$(date) # right 数学 / 整数操作使用 ((...)) 和 $((...))。 123456789101112a=5b=4# wrongif [[ $a -gt $b ]]; then ...fi# rightif ((a &gt; b)); then ...fi 不要使用 let 命令。 参数扩展使用参数扩展要好于使用外部命令，例如 echo, sed, awk 等等。 123456789name='bahamas10'# wrongprog=$(basename "$0")nonumbers=$(echo "$name" | sed -e 's/[0-9]//g')# rightprog=$&#123;0##*/&#125;nonumbers=$&#123;name//[0-9]/&#125; 列出文件不要使用 解析 ls(1)，而使用 bash 内置函数来循环文件。 123456789# very wrong, potentially unsafefor f in $(ls); do ...done# rightfor f in *; do ...done 查明可执行文件路径简单声明一点，你肯定不知道，如果你视图找出可执行程序的完整路径，你应该反思你的软件设计了。 查看 http://mywiki.wooledge.org/BashFAQ/028 获取更多信息。 数组和列表只要有可能，尽量使用 bash 数组来代替使用空格（或是换行符、制表符等）分隔的字符串。 1234567891011# wrongmodules='json httpserver jshint'for module in $modules; do npm install -g "$module"done# rightmodules=(json httpserver jshint)for module in "$&#123;modules[@]&#125;"; do npm install -g "$module"done 内置读取只要有可能，使用 bash 内置的 read 避免调用外部命令。 例子： 12345fqdn='computer1.daveeddy.com'IFS=. read hostname domain tld &lt;&lt;&lt; "$fqdn"echo "$hostname is in $domain.$tld"# =&gt; "computer1 is in daveeddy.com" 外部命令GNU 用户工具全世界不会都运行在 GNU 或 Linux 上；当调用外部命令时，例如 awk, sed, grep，避免 GNU 特定的选项，使其尽量易于移植。 当你编写 bash ，并且使用给你的所有强大工具和 bash 的内建命令时，你会发现甚至很少有机会需要调用外部命令。 UUOC不要在你不需要的时候使用 cat(1)。如果程序支持从标准输入读取，使用 bash 重定向传递数据。 12345678# wrongcat file | grep foo# rightgrep foo &lt; file# also rightgrep foo file 如果我们能够推断，当程序说它可以通过名称读取文件，并且这样做能获得更好的性能时，我们可以使用这个内置读取文件方法的命令行工具，而不是标准输入。 风格引号当字符串需要变量扩展或命令替换插值的时候使用双引号，其它时候使用单引号。 123456789# rightfoo='Hello World'bar="You are $USER"# wrongfoo="hello world"# possibly wrong, depending on intentbar='You are $USER' 所有将要经历分词的变量都 必须 被引用 (1)。如果分词不会发生，变量可以不加引号。 1234567foo='hello world'if [[ -n $foo ]]; then # 不需要引号 - [[ ... ]] 不会把变量分词 echo "$foo" # 需要印号fibar=$foo # 不需要引号 - 变量不会分词 唯一的例外是，如果代码或 bash 控制着这个变量的整个生命周期。这种情况 basher 有类似的代码： 12345678printf_date_supported=falseif printf '%()T' &amp;&gt;/dev/null; then printf_date_supported=truefiif $printf_date_supported; then ...fi 在这个例子中，虽然在 if 声明中的 $printf_date_supported 将经历分词，但仍然不需要引号，因为这个变量的内容被明确地控制着，并不会从用户或其它命令里取值。 同样的，例如 $$, $?, $#这些变量，也不需要引号，因为他们绝不会包含空格、制表符或换行符。 然而，如果仍怀有疑问，可以查看引用所有的扩展。 变量声明避免大写的变量名，除非有一个很好的理由使用他们。不要使用 let 或 readonly 创建变量。declare 应该只用于关联数组。在函数中，应始终使用 local 声明变量。 1234567891011# wrongdeclare -i foo=5let foo++readonly bar='something'FOOBAR=baz# righti=5((i++))bar='something'foobar=baz shebangBash 不总是位于 /bin/bash，因此尽量这样来写这一行： 1#!/usr/bin/env bash 错误检查举个例子，cd 不总是工作。请务必检查 cd（或类似的命令）任何可能的错误，如果错误存在就退出或将错误抛出。 1234567# wrongcd /some/path # 可能会失败rm file # 如果 cd 失败我在哪？我删除了什么？# rightcd /some/path || exitrm file set -e不要设置 errexit。如同在 C 语言中，有时你想要得到一个错误，或是你期望什么执行失败，并不意味着你想要退出程序。 http://mywiki.wooledge.org/BashFAQ/105 eval永远不要使用. 没有人会在代码库中接受下面这个链接列出的东西。 http://mywiki.wooledge.org/BashPitfalls 这里也例举了一些如何修复这些问题的例子。 LicenseMIT License]]></content>
  </entry>
  <entry>
    <title><![CDATA[MySQL配置和优化]]></title>
    <url>%2F2017%2F05%2F22%2FMySQL-setting-and-optimzation.html</url>
    <content type="text"><![CDATA[一、查看配置查看binlogshow variables like &#39;log_%&#39;;: 查看sql_mode的语法 12select @@GLOBAL.sql_mode;select @@SESSION.sql_mode; 修改sql_mode的语法 12SET GLOBAL sql_mode = 'modes';SET SESSION sql_mode = 'modes'; 二、优化三、常见报错3.1 mysql 5.7版本报错问题mysql5.7默认启用了严格模式，使用5.7会发生很多旧版本sql报错问题，具体可以参阅MySQL 5.7版本新特性连载. 1) datetime等时间不能插入切忌不要插入 ‘0000-00-00’ 类似这样0开头的时间格式，5.7下是写不进入的，要优化改成null 或者其他正常的时间； 2) 聚合错误SELECT list is not in GROUP BY clause and contains nonaggregated在5.7中执行语句：1SELECT * FROM `m_job_op` group by stu_no 如果一定要使用，可以这么修改： 12-- 临时修改SET sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY','')); 12]]></content>
  </entry>
  <entry>
    <title><![CDATA[Mac优化实例]]></title>
    <url>%2F2017%2F05%2F17%2FMac-optimization.html</url>
    <content type="text"><![CDATA[常用系统工具time machine管理12cd /Volumes/&#123;your_disk&#125;/Backups.backupdb/&#123;your_machine-name&#125;/sudo tmutil delete &#123;your_bak_vertion&#125; # 删除一个历史的版本 参考：https://gxnotes.com/article/9755.html]]></content>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu使用]]></title>
    <url>%2F2017%2F05%2F17%2FUbuntu-Note.html</url>
    <content type="text"><![CDATA[弄了台备用笔记本电脑，发现装win10有各种问题，遂转投linux阵营。当然，首选ubuntu啦！ 在这里mark下新ubuntu系统的一些使用。 [TOC] 一、基础配置和更新1.1 包管理工具123sudo dpkg -i DEB_PACKAGE # 命令行安装deb软件包sudo dpkg -r PACKAGE_NAME # 卸载包sudo dpkg-reconfigure PACKAGE_NAME # 配置包 二、常用软件安装2.1 通用软件1234sudo apt-get install git vim axel svn lrzszsudo apt-get install terminator # ubuntu下类iterm2工具sudo apt-get install filezilla # filezilla FTP管理工具 2.2 navicat安装和配置1234567wget http://download3.navicat.com/download/navicat112_premium_cs_x64.tar.gztar -zxvf navicat112_premium_cs_x64.tar.gz /opt/Navicat112cd /opt/Navicat112/./start_navicattouch # 配置快捷方式 三、其他常用的命令3.1 远程服务a.开启桌面vnc远程12 b.开启ssh登录1234567891011121314151617181920sudo apt-get install openssh-server sudo apt-get install openssh-clientps -e |grep ssh # 如果只有ssh-agent那ssh-server还没有启动，如果看到sshd那说明ssh-server已经启动了sudo vim /etc/shh/sshd_config # 编辑配置ssh设置#---------------------#禁用密码验证PasswordAuthentication no#启用密钥验证RSAAuthentication yesPubkeyAuthentication yes#指定公钥数据库文件AuthorsizedKeysFile .ssh/authorized_keys#---------------------chmod 600 ~/.ssh/authorized_keysecho 'ssh-rsa XXXX' &gt;&gt; ~/.ssh/authorized_keyscat ~/.ssh/authorized_keys # 复查sudo /etc/init.d/ssh restart]]></content>
  </entry>
  <entry>
    <title><![CDATA[Laravel Note]]></title>
    <url>%2F2017%2F05%2F08%2FLaravel-Note.html</url>
    <content type="text"><![CDATA[最近需要用到laravel进行开发项目，这里整理一些笔记方便回忆。主要参考资源如下： laravel 5.4 中文手册 Laravel 5.5 中文文档 一、安装Laravel1.1 通过 Laravel 安装器 composer global require “laravel/installer”laravel new blog 1.2 通过 Composer 创建项目 composer create-project –prefer-dist laravel/laravel blog 1.3 运行laravel1php artisan serve 或者指向指向 public 目录。该目录下的 index.php 文件将作为所有进入应用程序的 HTTP 请求的前端控制器。 二、配置laravel工作流12composer create-project laravel/laravel laravel-workflow composer create-project --prefer-dist laravel/laravel blog # 通过composer 来创建项目 artisan]]></content>
  </entry>
  <entry>
    <title><![CDATA[CentOS 7 安装和配置]]></title>
    <url>%2F2017%2F04%2F26%2Flinux-centos7-setting.html</url>
    <content type="text"><![CDATA[123$ #设置nat 和 host-only2种网卡，并开启开机自启$ # minimal版常用工具安装yum install vim wget gcc gcc-c++ unzip net-tools telnet]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[MySQL学习]]></title>
    <url>%2F2017%2F04%2F26%2Fmysql-learn.html</url>
    <content type="text"><![CDATA[MySQL优化MySQL缓存配置文件/etc/my.cnf 123456[mysqld]... query_cache_size = 268435456query_cache_type = 1query_cache_limit = 1048576... 重启mysql后就会启动mysql的缓存机制Query Cache。在使用中，查询缓存会存储一个SELECT查询的文本与被传送到客户端的相应结果。如果之后接收到一个同样的查询，服务器将从查询缓存中检索结果，而不是再次分析和执行这个同样的查询。 注意：查询缓存绝不返回过期数据。当数据被修改后，在查询缓存中的任何相关词条均被转储清除。适用于更改不是太频繁的表且有大量相同查询的情况 执行计划explainmysql的执行计划explain语句，显示了mysql如何使用索引来处理select语句以及连接表。可以帮助选择更好的索引和写出更优化的查询语句。 explain是mysql常用性能分析语句，使用方法是在select语句前加上explain就可以了，例如： explain select surname,first_name form. a,b where a.id=b.id EXPLAIN结果返回解释: id：是一组数字，表示查询中执行select子句或操作表的顺序。如果id相同，则执行顺序从上至下。如果是子查询，id的序号会递增，id越大则优先级越高，越先会被执行。id如果相同，则可以认为是一组，从上往下顺序执行，所有组中，id越高，优先级越高，越容易执行。 selecttype：有simple，primary，subquery，derived(衍生)，union，unionresult。 simple：表示查询中不包含子查询或者union。 primary： 当查询中包含任何复杂的子部分，最外层的查询被标记成primary subquery：在select或where列表中包含了子查询，则子查询被标记成subquery derived：在from的列表中包含的子查询被标记成derived。 union：若第二个select出现在union后，则被标记成union，若union在from子句的子查询中，外层的select被标记成derived。 union result：从union表获取结果的select被标记成union result。 table：显示这一行的数据是关于哪张表的 type：type叫访问类型，表示在表中找到所需行的方式（显示连接使用了何种类型）。从最好到最差的连接类型为const、eq_reg、ref、range、indexhe和ALL ALL，即full table scan，mysql将遍历全表来找到所需要的行。 index为full index scan，只遍历索引树。 range表示索引范围扫描 ，对索引的扫描开始于一点，返回匹配的值域的行，常见于between，&lt;，&gt;的查询。 ref为非唯一性索引扫描，返回匹配某个单独值的所有行，常见于非唯一索引即唯一索引的非唯一前缀进行的查找。 eq_ref表示唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配，常见于主键或者唯一索引扫描。 const，system表示当对查询部分进行优化，并转化成一个常量时，使用这些类型访问。比如将主键置于where列表中，mysql就能把该查询置成一个常量。system是const的一个特例，当查询表中只有一行的情况下使用的是system。 NULL表示在执行语句中，不用查表或索引。 possible_keys：显示可能应用在这张表中的索引。如果为空，没有可能的索引。可以为相关的域从WHERE语句中选择一个合适的语句 key： 实际使用的索引。如果为NULL，则没有使用索引。很少的情况下，MYSQL会选择优化不足的索引。这种情况下，可以在SELECT语句中使用USE INDEX（indexname）来强制使用一个索引或者用IGNORE INDEX（indexname）来强制MYSQL忽略索引 key_len：使用的索引的长度。在不损失精确性的情况下，长度越短越好 ref：显示索引的哪一列被使用了，如果可能的话，是一个常数 rows：表示根据mysql表统计信息及索引选用情况，估算找到所需记录要读取的行数 Extra：关于MYSQL如何解析查询的额外信息，表示不在其他列并且也很重要的额外信息。将在表4.3中讨论，但这里可以看到的坏的例子是Using temporary和Using filesort，意思MYSQL根本不能使用索引，结果是检索会很慢。extra 列返回的描述的意义 ： Distinct: 一旦MYSQL找到了与行相联合匹配的行，就不再搜索了 Not exists: MYSQL优化了LEFT JOIN，一旦它找到了匹配LEFT JOIN标准的行，就不再搜索了 Range checked for each Record（index map:#）:没有找到理想的索引，因此对于从前面表中来的每一个行组合，MYSQL检查使用哪个索引，并用它来从表中返回行。这是使用索引的最慢的连接之一 Using filesort: 看到这个的时候，查询就需要优化了。MYSQL需要进行额外的步骤来发现如何对返回的行排序。它根据连接类型以及存储排序键值和匹配条件的全部行的行指针来排序全部行 Using index: 列数据是从仅仅使用了索引中的信息而没有读取实际的行动的表返回的，这发生在对表的全部的请求列都是同一个索引的部分的时候 Using temporary 看到这个的时候，查询需要优化了。这里，MYSQL需要创建一个临时表来存储结果，这通常发生在对不同的列集进行ORDER BY上，而不是GROUP BY上 Where used 使用了WHERE从句来限制哪些行将与下一张表匹配或者是返回给用户。如果不想返回表中的全部行，并且连接类型ALL或index，这就会发生，或者是查询有问题不同连接类型的解释（按照效率高低的顺序排序） system 表只有一行：system表。这是const连接类型的特殊情况 const:表中的一个记录的最大值能够匹配这个查询（索引可以是主键或惟一索引）。因为只有一行，这个值实际就是常数，因为MYSQL先读这个值然后把它当做常数来对待 eq_ref:在连接中，MYSQL在查询时，从前面的表中，对每一个记录的联合都从表中读取一个记录，它在查询使用了索引为主键或惟一键的全部时使用 ref:这个连接类型只有在查询使用了不是惟一或主键的键或者是这些类型的部分（比如，利用最左边前缀）时发生。对于之前的表的每一个行联合，全部记录都将从表中读出。这个类型严重依赖于根据索引匹配的记录多少—越少越好 range:这个连接类型使用索引返回一个范围中的行，比如使用&gt;或&lt;查找东西时发生的情况 index: 这个连接类型对前面的表中的每一个记录联合进行完全扫描（比ALL更好，因为索引一般小于表数据） ALL:这个连接类型对于前面的每 mysq的执行计划有一定局限性,如下： EXPLAIN不会告诉你关于触发器、存储过程的信息或用户自定义函数对查询的影响情况 EXPLAIN不考虑各种Cache EXPLAIN不能显示MySQL在执行查询时所作的优化工作 部分统计信息是估算的，并非精确值 EXPALIN只能解释SELECT操作，其他操作要重写为SELECT后查看执行计划 MySQL索引说明覆盖索引 MySQL可以利用索引返回select列表中的字段，而不必根据索引再次读取数据文件 包含所有满足查询需要的数据的索引称为 覆盖索引（Covering Index） 如果要使用覆盖索引，一定要注意select列表中只取出需要的列，不可select *，因为如果将所有字段一起做索引会导致索引文件过大，查询性能下降 参考 怎么去看懂mysql的执行计划]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Nginx笔记]]></title>
    <url>%2F2017%2F04%2F17%2Flinux%2Fnginx-note.html</url>
    <content type="text"><![CDATA[sever设置autoindex: 打开目录浏览功能nginx中可以在server或location 段里添加上autoindex on；来列出整个目录, 比如在server段添加： 1234567891011121314location / &#123; autoindex on; autoindex_localtime on; #之类的参数写这里&#125;location /down/ &#123; # 直接二级目录开启目录流量 autoindex on;&#125;location /down/ &#123; alias /home/wwwroot/lnmp/test/; # 虚拟目录开启目录流量 autoindex on;&#125; 相关属性 autoindex_exact_sizeautoindex_exact_size off;默认为on，显示出文件的确切大小，单位是bytes。改为off后，显示出文件的大概大小，单位是kB或者MB或者GB autoindex_localtime默认为off，显示的文件时间为GMT时间。改为on后，显示的文件时间为文件的服务器时间]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux Shell脚本攻略]]></title>
    <url>%2F2017%2F04%2F16%2Flinux%2Flinux-shell.html</url>
    <content type="text"><![CDATA[这里是本人学习linux中整理的一些笔记归档，写的比较粗略，可做为linux常用一些目录的快速入门教程。但如果像具体点学习一个命令的所有应用，这里可能不太适合你，当然，后面又参考部分你可以进入看看详细的一些教程。enjoy it！ 前言：shell基础说明shell的使用shell脚本规范：12#!/bin/bash# do something 一个shell脚本的执行方法： 123sh script.sh # 执行方式1chmod a+x script.sh # 执行方式2./script.sh # 会读取首行的解释器, 执行 一、shell系统基础1.1 环境变量和变量bash中，每个变量的值都是字符串，无论你给变量赋值时是否使用引号，值都会以字符串的形式存储 环境变量查看所有与此终端进程相关的环境变量: env 查看某个进程的环境变量: cat /proc/$PID/environ 变量赋值: 12345678var=valuevar='the value'var="the $PARAM"echo $varecho $&#123;var&#125;var = value非变量赋值是相等操作 环境变量未在当前进程中定义，而是从父进程中继承而来的变量, export 设置环境变量之后,从当前shell 执行的任何程序都会继承这个变量, 如： export PYTHONPATH=$PYTHONPATH:/home/ken/workspace 我们linux中常用的环境变量如： 1234567PATH 查找可执行文件路径, 通常定义在/etc/environment or /ect/profile or ~/.bashrc修改: export PATH=$PATH:/new/path/HOMEPWDUSERUIDSHELL 识别当前shell版本: echo $SHELL echo $0 1.2 命令状态当命令成功完成, 返回0 发生错误并退回, 返回非0 可以从$?中获取 cmd; echo $? 文件描述符和重定向文件描述符: 与文件输入/输出相关联的整数, 用来跟踪已打开的文件 1230 stdin 标准输入1 stdout 标准输出2 stderr 标准错误 重定向到文件：1234567清空文件写入新内容echo "test" &gt; temp.txt追加echo "test" &gt;&gt; temp.txt&gt;等价于1&gt;&gt;&gt;等价于 1&gt;&gt; 输出分离或合并:1234567分离cmd 2&gt;stderr.txt 1&gt;stdout.txt合并cmd &gt; output.txt 2&gt;&amp;1orcmd &amp;&gt; output.txt 扔到垃圾桶:1234567/dev/null 特殊设备文件, 接收到的任何数据都会被丢弃(位桶/黑洞)只有标准错误cmd 2 &gt; /dev/null标准输出和标准错误cmd &gt;/dev/null 2&gt;&amp;1 同时输出到终端和文件:1234cmd | tee file1tee默认覆盖，可以-a选项追加cmd | tee -a file1 将stdin作为命令参数: cmd1 | cmd2 | cmd3 -将文件重定向到命令: cmd &lt; file 自定义文件描述符:1234567使用文件描述符3打开并读取文件exec 3&lt;input.txtcat &lt;&amp;3使用文件描述符4进行写入exec 4&gt;output.txtecho newline &gt;&amp;4 二、字符串处理2.1 sed简明教程2.2 awk简明教程2.3 输出和打印（echo &amp; printf）echo基于标准输出打印一段文本 忽略结尾换行符: echo -n &#39;test\n&#39; 对字符串进行转义: echo -e &#39;1\t2\t3&#39; 打印彩色输出:12345678910111213141516171819202122232425文字颜色码 重置0 黑色30 红色31 绿色32 黄色33 蓝色34 洋红35 青色36 白色37echo -e &quot;\e[1;31m This is red test \e[0m&quot;背景颜色码 重置0 黑色40 红色41 绿色42 黄色43 蓝色44 洋红45 青色46 白色47echo -e &quot;\e[1;42m Green Background \e[0m&quot; printf可以格式化字符串, 使用参数同c中printf一样 12printf "%-5s %-10s %-4.2f\n" 3 Jeff 77.564$ 3 Jeff 77.56 三、 进程管理3.1 pgrep获取某个进程名对应进程id 使用命令pgrep, 例如:pgrep php 四、 运算4.1 shell数学运算letexpr echo \expr 1 + 7`` result=$(expr $no1 + 5) 其他运算1234result=$[ no1 + no2 ]result=$[ $no + 5 ]result=$(( no1 + 5 )) 浮点数: bc12345678设定精度echo "scale=2;3/8" | bc进制转换echo "obase=2;100" | bc平方echo "10^10" | bc平方根echo "sqrt(100)" | bc 五、数组：数组和关联数组 普通数组，整数作为数组索引, 借助索引将多个独立的数据存储为一个集合(list) 关联数组，可以使用字符串作为索引(map) 注意，在mac中的shell不能使用索引该笔记的关联数组。 5.1 普通数组12345678910111213array_var=(1 2 3 4 5) # 定义数组 方式1array_var[0]="test1" # 定义数组 方式2array_var[3]="test3"echo $&#123;array_var[0]&#125; # 读取数组echo $&#123;array_var[*]&#125; # 以清单形式打印echo $&#123;array_var[@]&#125;echo $&#123;#array_var[*]&#125; # 打印数组长度echo $&#123;!array_var[*]&#125; # 获取索引列表 5.2 关联数组1234declare -A ass_array # 先定义一个多维数组ass_array=([index1]=value1 [index2]=value2) # 赋值：内嵌索引-值ass_array[index3]=value3 # 独立赋值echo $&#123;ass_array[index1]&#125; # 打印对应值 工具参考crontabcrontab文件的含义：用户所建立的crontab文件中，每一行都代表一项任务，每行的每个字段代表一项设置，它的格式共分为六个字段，前五段是时间设定段，第六段是要执行的命令段，格式如下： minute hour day month week command 其中： minute： 表示分钟，可以是从0到59之间的任何整数。 hour：表示小时，可以是从0到23之间的任何整数。 day：表示日期，可以是从1到31之间的任何整数。 month：表示月份，可以是从1到12之间的任何整数。 week：表示星期几，可以是从0到7之间的任何整数，这里的0或7代表星期日。 command：要执行的命令，可以是系统命令，也可以是自己编写的脚本文件。 在以上各个字段中，还可以使用以下特殊字符： 星号（*）：代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。 逗号（,）：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9” 中杠（-）：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6” 正斜线（/）：可以用正斜线指定时间的间隔频率，例如“0-23/2”表示每两小时执行一次。同时正斜线可以和星号一起使用，例如*/10，如果用在minute字段，表示每十分钟执行一次。 参考 Linux基础 LINUX SHELL脚本攻略笔记[速查]]]></content>
  </entry>
  <entry>
    <title><![CDATA[PHP内存优化]]></title>
    <url>%2F2017%2F04%2F08%2Fphp%2Fphp-memory-get-usage.html</url>
    <content type="text"><![CDATA[在php中，我们最常用 memory_get_usage()来返回php内存的使用情况，它默认单位是Bytes, 一、内存溢出问题内存溢出解决方案这里，不难看出，一方面，我们要增加PHP可用内存大小，另一方面，只要我们想办法对数组进行分批处理，分而治之，将用过的变量及时销毁(unset)，一般是不会出现溢出问题的。 另外，为了节省PHP程序内存损耗，我们应当尽可能减少静态变量的使用，在需要数据重用时，可以考虑使用引用(&amp;)。再一点就是：数据库操作完成后，要马上关闭连接；一个对象使用完，要及时调用析构函数（__destruct()）。 结论 php5.3及以上可以使用函数gc_collect_cycles()进行垃圾回收 使用完变量需要用unset()销毁 参考的一些文章： http://zhengdl126.iteye.com/blog/1112231 http://www.laruence.com/2011/03/04/1894.html]]></content>
  </entry>
  <entry>
    <title><![CDATA[Java笔记1]]></title>
    <url>%2F2017%2F03%2F11%2Fjava%2Fjava-note-zk.html</url>
    <content type="text"><![CDATA[这个笔记是基于《Java语言程序设计（一）》 主要内容有： Java语言基础 运算和语句 面向对象编程基础 数组和字符串 图形界面设计 图形、图像与多媒体 多线程 输入和输出流 伟林与数据库编程基础 一、Java语言基础1.1]]></content>
  </entry>
  <entry>
    <title><![CDATA[2016-12-19 本周新书：MySQL技术内幕 - SQL编程]]></title>
    <url>%2F2017%2F03%2F06%2Fbooks%2Fmysql-technology-insider-sql-programming.html</url>
    <content type="text"><![CDATA[本周读书任务：《MySQL技术内幕 - SQL编程》 限定阅读时间：2016-12-19~2016-12-25]]></content>
  </entry>
  <entry>
    <title><![CDATA[PHP设计模式（1） - 开始]]></title>
    <url>%2F2017%2F03%2F06%2Fphp%2Fphp-design-patterns-start.html</url>
    <content type="text"><![CDATA[一、基础环境准备 IDE选择： PHPstorm 字体选择：等宽的字体 二、一些必备的php基础2.1 命名空间 php 5.3+ 2.2 类自动载入 __autoload() spl_autoload_register(方法) 2.3 PSR-0,PSR-4规范]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[symfony框架学习]]></title>
    <url>%2F2017%2F02%2F27%2Fphp%2Fphp-framework-symfony.html</url>
    <content type="text"><![CDATA[要学习一些现代php必须用symfony或者laraval, 这些默认都要php5.5+以上版本. 此系统使用homebrew安装的php5.6环境进行开发, 下面是学习Symfony 3.2.4的一些笔记. 一, 安装1234567wget https://symfony.com/installermv installer /usr/local/bin/symfonychmod +x /usr/local/bin/symfonycd /www/learnsymfony new my_symfonyphp bin/console server:startphp bin/console server:stop 二, 框架结构]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>symfony</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP代码标准和测试(未完待续)]]></title>
    <url>%2F2017%2F02%2F15%2Fphp%2Fphp-standard-code-tools.html</url>
    <content type="text"><![CDATA[用于检测php代码标准的套件有: phpcs phpmd phpcbf php-cs-fixer 下面将简单介绍这些工具的安装和使用方法 一, 安装使用composer安装(推荐)然后，确保~/.composer/vendor/bin目录在你的PATH中。export PATH=”$PATH:$HOME/.composer/vendor/bin” 123composer global require "squizlabs/php_codesniffer=*"composer global require phpmd/phpmdcomposer global require fabpot/php-cs-fixer 检查是否都成功安装:1234$ which phpcs$ which phpmd$ which php-cs-fixer$ which phpcbf 二, 使用2.1 phpcs 查看帮助：phpcs –help 添加标准：phpcs –config-set installed_paths PATH_TO_SEARCH_STANDARDS 注意：假设标准为 Weibo, 目录为:/Users/overtrue/code_standards/Weibo其中Weibo 里才是 ruleset.xml，那么对应上面的 PATH_TO_SEARCH_STANDARDS 应该为：phpcs –config-set installed_paths /Users/overtrue/code_standards 开发中我们经常使用wordpress的标准来, 设置如下: 12git clone git@github.com:WordPress-Coding-Standards/WordPress-Coding-Standards.git wpcsphpcs --config-set installed_paths /www/default_path_to/wpcs 查看已经安装的标准：phpcs -i 查看配置：phpcs –config-show 检查代码规范： phpcs ./codes/Example.php// orphpcs ./codes/ 指定标准：phpcs ./codes/Example.php –standard=PSR2 报告格式：phpcs –report=summary /path/to/code 可用的格式有（默认为: full）： full, xml, checkstyle, csv json, emacs, source, summary, diff svnblame, gitblame, hgblame or notifysend 修复代码 第一种：使用 diff 形式打补丁： phpcs –report-diff=/path/to/changes.diff /path/to/codepatch -p0 -ui /path/to/changes.diff patching file /path/to/code/file.php 第二种：使用 PHP Code Beautifier 和 Fixer： phpcbf /path/to/code以上命令会自动修复原文件，如果不想直接覆盖原文件，可以使用 –suffix 指定修复后的代码后缀：phpcs /path/to/code –suffix=.fixed 更多 PHPCS 的使用请参考：https://github.com/squizlabs/PHP_CodeSniffer/wiki 2.2 phpmd使用使用phpmd检查代码质量操作如： 12345678# phpmd 代码路径 报告格式phpmd /path/to/source text# phpmd 代码路径 报告格式 规则列表phpmd /path/to/source text codesize,unusedcode,naming# phpmd 代码路径 报告格式 规则xml文件phpmd /path/to/source text /phpmd_ruleset.xml 报告格式有： xml, 以 XML 格式输出； text, 简单的文本格式； html, 输出到单个的html； 这里有一个phpmd规则可参考：https://github.com/overtrue/phpmd-rulesets 更多关于 PHPMD 的使用请参考：http://phpmd.org/documentation/index.html 2.3 php-cs-fixer 参考 php-cs-fixer的使用 http://wulijun.github.io/php-the-right-way/ http://overtrue.me/articles/2015/05/install-phpcs-and-phpmd.html]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MongoDB学习笔记]]></title>
    <url>%2F2017%2F01%2F27%2Fsql%2Fmongodb.html</url>
    <content type="text"><![CDATA[一. 安装本着快速掌握mongodb的目的, 直接在mac上使用homebrew安装了mongodb, 命令如下: brew install mongodb 二. Mongodb基础mongodb的类型有2种, 集合和文档. 2.1 基础语法 show dbs : 查看数据库 show tables : 查看表 use DB_NAME : 切换数据库, 如果没有则创建, 当写入第一条数据时创建 dropDatabase() : 删除数据库 2.1.2 集合相关方法 db.createCollection(name, options) 创建集合 参考文档: 极客学院 - MongoDB教程 MongoDB手册]]></content>
      <categories>
        <category>SQL</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[数据库]]></title>
    <url>%2F2017%2F01%2F27%2Fsql%2Fsql.html</url>
    <content type="text"><![CDATA[数据库]]></content>
      <categories>
        <category>SQL</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Linux笔记]]></title>
    <url>%2F2017%2F01%2F25%2Flinux%2Flinux-note.html</url>
    <content type="text"><![CDATA[这里整理了一些学习linux过程的笔记…]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux内存管理]]></title>
    <url>%2F2017%2F01%2F25%2Flinux%2Flinux-ram-manage.html</url>
    <content type="text"><![CDATA[我们在使用linux中经常遇到使用内存过大的困扰，但实际上服务器并没有使用这么多,那么我们该如何优化呢? 拿个案例来说吧, 当我们执行free -m命令时,内存的使用如: 1234 total used free shared buffers cachedMem: 992 964 27 0 207 416-/+ buffers/cache: 340 651Swap: 991 2 989 使用内存用了90%多,但实际上他真的使用了这么多内存吗? 这里,我们先说下里面的一些概念, 其中涉及的内容有： total: 内存总数 used: 已经使用的内存数 free: 空闲的内存数 shared: 多个进程共享的内存总额 buffers Buffer Cache和cached Page Cache 磁盘缓存的大小 -buffers/cache (已用)的内存数:used - buffers - cached +buffers/cache(可用)的内存数:free + buffers + cached可用的memory=free memory+buffers+cached 当执行命令cp -r /etc ~/test/后, 内存都被cached吃掉了。这时候别紧张，这是为了提高文件读取效率的做法。 为了提高磁盘存取效率，Linux做了一些精心的设计，除了对dentry进行缓存（用于VFS，加速文件路径名到inode的转换），还采取了两种主要Cache方式：Buffer Cache和Page Cache。前者针对磁盘块的读写，后者针对文件inode的读写。这些Cache有效缩短了 I/O系统调用（比如read，write，getdents）的时间。 那么有人说过段时间，linux会自动释放掉所用的内存。实际上是不会的, 那么应该怎么去优化呢？比如能否手动释放掉这些内存呢？ 如何手动释放内存/proc是一个虚拟文件系统，我们可以通过对它的读写操作做为与kernel实体间进行通信的一种手段。也就是说可以通过修改/proc中的文件，来对当前kernel的行为做出调整。那么我们可以通过调整/proc/sys/vm/drop_caches来释放内存。操作如下： 12cat /proc/sys/vm/drop_caches# 0 首先，/proc/sys/vm/drop_caches的值，默认为0。 1sync 手动执行sync命令 描述：sync 命令运行 sync 子例程。如果必须停止系统，则运行sync 命令以确保文件系统的完整性。sync 命令将所有未写的系统缓冲区写到磁盘中，包含已修改的 i-node、已延迟的块 I/O 和读写映射文件） 将/proc/sys/vm/drop_caches值设为3:123echo 3 &gt; /proc/sys/vm/drop_cachescat /proc/sys/vm/drop_caches# 3 再来运行free -m命令，会发有效的释放了buffer和cache。 有关/proc/sys/vm/drop_caches的用法在下面进行了说明 /proc/sys/vm/drop_caches (since Linux 2.6.16)Writing to this file causes the kernel to drop clean caches,dentries and inodes from memory, causing that memory to become free.To free pagecache, use echo 1 &gt; /proc/sys/vm/drop_caches;to free dentries and inodes, use echo 2 &gt; /proc/sys/vm/drop_caches;to free pagecache, dentries and inodes, use echo 3 &gt; /proc/sys/vm/drop_caches.Because this is a non-destructive operation and dirty objects are not freeable, the user should run sync first. 实例清空缓存demo:12345678910111213141516#!/bin/bash# filename: freemem.shused=`free -m | awk 'NR==2' | awk '&#123;print $3&#125;'`free=`free -m | awk 'NR==2' | awk '&#123;print $4&#125;'`echo "===========================" &gt;&gt; /var/log/mem.logdate &gt;&gt; /var/log/mem.logecho "Memory usage | [Use：$&#123;used&#125;MB][Free：$&#123;free&#125;MB]" &gt;&gt; /var/log/mem.logif [ $free -le 100 ] ; then sync &amp;&amp; echo 1 &gt; /proc/sys/vm/drop_caches sync &amp;&amp; echo 2 &gt; /proc/sys/vm/drop_caches sync &amp;&amp; echo 3 &gt; /proc/sys/vm/drop_caches echo "OK" &gt;&gt; /var/log/mem.logelse echo "Not required" &gt;&gt; /var/log/mem.log 参考： 手动释放linux内存cache和脚本定时释放]]></content>
  </entry>
  <entry>
    <title><![CDATA[PHP RESTful API接口设计之道]]></title>
    <url>%2F2017%2F01%2F24%2Frestful-api-design.html</url>
    <content type="text"><![CDATA[0. before…设计前后端完全分离的应用，可以使用到RESTful API。比如， Backbone 的默认规则最适合的是一个完全 restful 风格的后端接口，如果你的后端系统没有准备好，那就直接覆盖掉吧。restful 不光是前端的事～ 是构架层面上的事情，如果想用Backbone的话，肯定是需要后端重新定义所有的接口了，但是这也是好事，毕竟 restful 逻辑更清晰，以后的更新，维护会更方便。 一、基础现在的网站没有API都给人落后的印象了，而当下设计API流行的规范便是RESTful。REST全称是Representational State Transfer，中文意思是表述（编者注：通常译为表征）性状态转移。它首次出现在2000年Roy Fielding的博士论文中，Roy Fielding是HTTP规范的主要编写者之一。 他在论文中提到：”我这篇文章的写作目的，就是想在符合架构原理的前提下，理解和评估以网络为基础的应用软件的架构设计，得到一个功能强、性能好、适宜通信的架构。REST指的是一组架构约束条件和原则。” 如果一个架构符合REST的约束条件和原则，我们就称它为RESTful架构。 它涉及到以下这些内容。 1.1 域名应尽量部署在专用域名之下，可以在前边加个二级头或者域名后添加api路径。 https://api.example.comhttps://example.com/api/ 1.2 版本API经常会变，因此要注意区分版本。一般放入URL中。 https://api.example.com/v1/ 1.3 路径路径又称”终点”（endpoint），表示API的具体网址。在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的”集合”（collection），所以API中的名词也应该使用复数。举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。 https://api.example.com/v1/zooshttps://api.example.com/v1/animalshttps://api.example.com/v1/employees 1.4 HTTP动词对于资源的具体操作类型，由HTTP动词表示。常用的HTTP动词有下面五个（括号里是对应的SQL命令）。 GET（SELECT）：从服务器取出资源（一项或多项） POST（CREATE）：在服务器新建一个资源 PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源） PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性） DELETE（DELETE）：从服务器删除资源 HEAD: 类似GET，但只回传HTTP header (safe &amp; idempotent) 其它还有一些较少用到的，可参Wikipedia: Hypertext Transfer Protocol 下面是一些例子。 GET /zoos：列出所有动物园 POST /zoos：新建一个动物园 GET /zoos/ID：获取某个指定动物园的信息 PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息） PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息） DELETE /zoos/ID：删除某个动物园 GET /zoos/ID/animals：列出某个指定动物园的所有动物 DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物 1.5 过滤信息如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。下面是一些常见的参数。 ?limit=10：指定返回记录的数量 ?offset=10：指定返回记录的开始位置 ?page=2&amp;per_page=100：指定第几页，以及每页的记录数 ?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序 ?animal_type_id=1：指定筛选条件 1.6 状态码服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。 200 OK – [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent） 201 CREATED – [POST/PUT/PATCH]：用户新建或修改数据成功 202 Accepted – [*]：表示一个请求已经进入后台排队（异步任务） 204 NO CONTENT – [DELETE]：用户删除数据成功 400 INVALID REQUEST – [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的 401 Unauthorized – [*]：表示用户没有权限（令牌、用户名、密码错误） 403 Forbidden – [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的 404 NOT FOUND – [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的 405 method not allowed – [*]：该http方法不被允许 406 Not Acceptable – [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式） 410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的 422 Unprocesable entity – [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误 500 INTERNAL SERVER ERROR – [*]：服务器发生错误，用户将无法判断发出的请求是否成功 1.7 错误处理如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。 1&#123;error: "invalid API key"&#125; 1.8 返回结果针对不同操作，服务器向用户返回的结果应该符合以下规范。 GET /collection：返回资源对象的列表（数组） GET /collection/resource：返回单个资源对象 POST /collection：返回新生成的资源对象 PUT /collection/resource：返回完整的资源对象 PATCH /collection/resource：返回完整的资源对象 DELETE /collection/resource：返回一个空文档 二、最佳实践2.1 Slim框架的使用推荐一个轻量版PHP RESTful框架：Slim ，有兴趣的同学可以参考其文档：http://docs.slimframework.com/ 下面以一个网上的教程给大家说明，主要是应用前端框架AngularJS 和 后端PHP框架Slim搭设的一个简易图书管理系统为例。 代码实现主要的工作是在项目根目录下的index.php文件里进行的，第一步需要引入Slim框架 12345//第一步：引用Slim框架//首先，需要在你的index.php中引入Slim框架的依赖，根据实际情况，你可能得调整下文件的路径require 'Slim/Slim.php';\Slim\Slim::registerAutoloader(); 2.x 测试 - 插件使用 Chrome 插件 Postman Chrome插件Json-viewer 和 json-handle ### 三、扩展3.1 不要默认使用大括号封装，但要在需要的时候支持json 还是回调，那是个问题： 123456&#123; "data" : &#123; "id" : 123, "name" : "John" &#125;&#125; or1234567callback_function(&#123; status_code: 200, next_page: "https://..", response: &#123; ... actual JSON response body ... &#125;&#125;) 好的做法是： http://example.com/api/xxx?type=jsonp&amp;callback=yourCallBackName http://example.com/api/xxx?type=json http://example.com/api/xxx?type=xml 就返回对应结构的数据。 3.2 如何使用 Last-Modified 和 Etags 如何帮助提高性能?开发者会把 Last-Modified 和 ETags 请求的 HTTP 报头一起使用，这样可利用客户端（例如浏览器）的缓存。因为服务器首先产生 Last-Modified/Etag 标记，服务器可在稍后使用它来判断页面是否已经被修改。本质上，客户端通过将该记号传回服务器要求服务器验证其缓存是否过期。 HTTP 协议规格说明定义 ETag 为“被请求变量的实体值”。 服务器单独负责判断记号是什么及其含义，并在 HTTP 响应头中将其传送到客户端，以下是服务器端返回的格式： ETag: “d41d8cd98f00b204e9800998ecf8427e” 客户端的查询更新格式是这样的： If-None-Match: W/“d41d8cd98f00b204e9800998ecf8427e” 如果ETag没改变，则返回状态304，内容为空，这也和Last-Modified一样。下面再扔些php的例子看看： 123456789101112 $file = 'myfile.php'; $last_modified_time = filemtime($file); $etag = md5_file($file); header("Last-Modified: ".gmdate("D, d M Y H:i:s", $last_modified_time)." GMT"); header("Etag: $etag"); if (@strtotime($_SERVER['HTTP_IF_MODIFIED_SINCE']) == $last_modified_time || trim($_SERVER['HTTP_IF_NONE_MATCH']) == $etag) &#123; header("HTTP/1.1 304 Not Modified"); exit; &#125; 补充：对于前端部分网上的一些做法是：Gulp对所有的静态资源进行预处理，生成一份manifest，标明了预处理前后文件之间的对应关系。DEMO, 另外腾讯前端团队的一篇关于web缓存系列文章大家也可以查阅下：直通车 总结技术的变革一般都是为了提高生产力的，restful的初衷也是。它提倡简单（理论上讲只要业务实体抽象的好就够了），纯粹（每个资源就四种操作）的 API 设计思想，需要使用者坚持信仰（坚持基本原则），适度灵活。 — 来自SF.gg Q&amp;A1. 务器返回的数据格式，应该使用JSON还是使用XML？推送使用JSON，如果提供的服务对象较多，可以设置兼容XML 2. REST能应用在什么场景？REST规范中明确规定，处理的是资源（或者实体），而不是动作。换句话说，REST处理的是books或者animals这种东西，而login之类的业务逻辑是动作，不适用REST。 restful 可以看做 orm 的 web api 形式，也就是说，资源指的是数据库里面的表（或者表的连接），或者是你nosql数据库里面的对象。当调用者需要并且有权直接操作它们，或者是以表的粒度操作数据库，才需要使用 restful。 3. 统计能使用REST吗？4. 兴趣探讨Vue.js、ReactJS、AngularJS5. 扩展：API Cookie加密6. php crud 和resetful的相似之处参考简单版： 《RESTful API 设计指南》 - 阮一峰的网络日志 restful-api-design-references REST API 使用详解 国内值得关注的官方 API 集合 高阶版： phalcon框架的REST实践 PHP-CRUD-API: 另外有一些基于商业服务提供的接口文档有： LeanCloud: REST API 使用详解 UPS： https://segmentfault.com/a/1190000004038353 https://segmentfault.com/a/1190000002690813 https://zhujun24.github.io/2014/12/10/AngularJS%E5%85%A5%E9%97%A8%E7%9A%84%E5%B0%8FDemo/ https://zhujun24.github.io/2015/03/19/%E7%94%A8Slim%E8%BD%BB%E5%9E%8BPHP%E6%A1%86%E6%9E%B6%E5%86%99RESTful%20APIs/ https://segmentfault.com/a/1190000004690182 http://www.php.cn/php-notebook-285669.html http://www.yiifans.com/yii2/guide/tool-gii.html https://tw.twincl.com/programming/*641y]]></content>
  </entry>
  <entry>
    <title><![CDATA[Redis学习笔记]]></title>
    <url>%2F2017%2F01%2F23%2Fredis.html</url>
    <content type="text"><![CDATA[一、redis说明redis基础二、redis类型redis的数据类型有strings, hashes, lists, sets 和sorted sets 五种。 2.1 string类型及操作 set KEY VALUE setnx KEY VALUE setex KEY TIME(s) VALUE setrange KEY POI STRING: 设置指定 key 的 value 值的子字符串 mset KEY1 VALUE1 KEY2 VALUE2 …: 一次设置多个 key 的值,成功返回 ok 表示所有的值都设置了,失败返回 0 表示没有任何值 被设置。 msetnx KEY1 VALUE1 KEY2 VALUE2 …: 一次设置多个 key 的值,成功返回 ok 表示所有的值都设置了,失败返回 0 表示没有任何值 被设置,但是不会覆盖已经存在的 key。 get KEY: 获取key对应的string值,如果key不存在返回nil。 getset KEY: 设置key的值,并返回key的旧值. 如果key不存在,那么将返回nil getrange KEY POT_START POT_END: 获取指定 key 的 value 值的子字符串。 mget KEY1 KEY2 …: 一次获取多个 key 的值,如果对应 key 不存在,则对应返回 nil。 incr KEY: 对 key 的值做加加操作,并返回新的值。注意 incr 一个不是 int 的 value 会返回错误,incr 一 个不存在的 key,则设置 key 为 1 incrby KEY NUM: 同 incr 类似,加指定值 ,key 不存在时候会设置 key,并认为原来的 value 是 0 decr: 对 key 的值做的是减减操作,decr 一个不存在 key,则设置 key 为-1 decrby: 同 decr,减指定值。 append: 给指定 key 的字符串值追加 value,返回新字符串值的长度。 strlen : 取指定 key 的 value 值的长度。 2.2 hashes类型及操作Redis hash是一个string类型的field和value的映射表.它的添加、删除操作都是O(1()平均)。 hash 特别适合用于存储对象。相较于将对象的每个字段存成单个 string 类型。将一个对象存 储在 hash 类型中会占用更少的内存,并且可以更方便的存取整个对象。省内存的原因是新 建一个 hash 对象时开始是用 zipmap(又称为 small hash)来存储的。这个 zipmap 其实并不 是 hash table,但是 zipmap 相比正常的 hash 实现可以节省不少 hash 本身需要的一些元数据 存储开销。尽管 zipmap 的添加,删除,查找都是 O(n),但是由于一般对象的 field 数量都不 太多。所以使用 zipmap 也是很快的,也就是说添加删除平均还是 O(1)。如果 field 或者 value 的大小超出一定限制后,Redis 会在内部自动将 zipmap 替换成正常的 hash 实现. 这个限制可 以在配置文件中指定。 hash-max-zipmap-entries 64 #配置字段最多 64 个 hash-max-zipmap-value 512 #配置 value 最大为 512 字节 hset KEY FIELD VALUE : 设置 hash field 为指定值,如果 key 不存在,则先创建。 hsetnx KEY FIELD VALUE: 设置 hash field 为指定值,如果 key 不存在,则先创建。如果 field 已经存在,返回 0,nx 是 not exist 的意思。 hmset KEY FIELD1 VALUE1 FIELD2 VALUE2 …: 同时设置 hash 的多个 field. hget KEY FIELD : 获取指定的 hash field。 hmget KEY FIELD1 FIELD2 … : 获取全部指定的 hash filed。 hincr KEY FIELD NUM: 指定的 hash filed 加上给定值。 hexists KEY FIELD: 测试指定 field 是否存在。 hlen KEY: 返回指定 hash 的 field 数量。 hdel KEY FIELD1 FIELD2 …: 删除指定 hash 的 field, 并返回删除field的数量。 hkeys KEY： 返回 hash 的所有 field。 hvals KEY: 返回 hash 的所有 value。 hgetall KEY: 获取某个 hash 中全部的 filed 及 value。 2.3 lists 类型及操作list 是一个链表结构,主要功能是 push、pop、获取一个范围的所有值等等,操作中 key 理 解为链表的名字。 Redis 的 list 类型其实就是一个每个子元素都是 string 类型的双向链表。链表的最大长度是(2 的 32 次方)。我们可以通过 push,pop 操作从链表的头部或者尾部添加删除元素。这使得 list 既可以用作栈,也可以用作队列。 有意思的是 list 的 pop 操作还有阻塞版本的,当我们[lr]pop 一个 list 对象时,如果 list 是空, 或者不存在,会立即返回 nil。但是阻塞版本的 b[lr]pop 可以则可以阻塞,当然可以加超时时 间,超时后也会返回 nil。为什么要阻塞版本的 pop 呢,主要是为了避免轮询。举个简单的 例子如果我们用 list 来实现一个工作队列。执行任务的 thread 可以调用阻塞版本的 pop 去获 取任务这样就可以避免轮询去检查是否有任务存在。当任务来时候工作线程可以立即返回, 也可以避免轮询带来的延迟。 lpush KEY VALUE : 在 key 对应 list 的头部添加字符串元素 rpush KEY VALUE : 在 key 对应 list 的尾部添加字符串元素 linsert KEY before VALUE ADD_VALUE: 在 key 对应 list 的特定位置之前或之后添加字符串元素 lset KEY MAP VALUE : 设置 list 中指定下标的元素值(下标从 0 开始) lrem KEY COUNT VALUE ： 从 key 对应 list 中删除 count 个和 value 相同的元素。count&gt;0 时,按从头到尾的顺序删除,count&lt;0 时,按从尾到头的顺序删除,count=0 时,删除全部. ltrim KEY COUNT_START COUNT_END : 保留指定 key 的值范围内的数据 lpop KEY : 从 list 的头部删除元素,并返回删除元素 rpop KEY : 从 list 的尾部删除元素,并返回删除元素 rpoplpush KEY1 KEY2: 从第一个 list 的尾部移除元素并添加到第二个 list 的头部,最后返回被移除的元素值,整个操 作是原子的.如果第一个 list 是空或者不存在返回 nil lindex KEY MAP: 返回名称为 key 的 list 中 index 位置的元素 llen KEY : 返回 key 对应 list 的长度 2.4 sets 类型及操作set 是集合,和我们数学中的集合概念相似,对集合的操作有添加删除元素,有对多个集合求交并差等操作,操作中 key 理解为集合的名字。 Redis 的 set 是 string 类型的无序集合。set 元素最大可以包含(2 的 32 次方)个元素。 set 的是通过 hash table 实现的,所以添加、删除和查找的复杂度都是 O(1)。hash table 会随 着添加或者删除自动的调整大小。需要注意的是调整 hash table 大小时候需要同步(获取写 锁)会阻塞其他读写操作,可能不久后就会改用跳表(skip list)来实现,跳表已经在 sorted set 中使用了。关于 set 集合类型除了基本的添加删除操作,其他有用的操作还包含集合的 取并集(union),交集(intersection),差集(difference)。通过这些操作可以很容易的实现 sns 中的好友推荐和 blog 的 tag 功能。 smembers KEY : 查看集合元素 sadd KEY VALUE :向名称为 key 的 set 中添加元素 srem KEY VALUE : 删除名称为 key 的 set 中的元素 member spop KEY : 随机返回并删除名称为 key 的 set 中一个元素 sdiff KEY1 KEY2 : 返回所有给定 key 与第一个 key 的差集 sdiffstore KEY KEY1 KEY2 … : 返回所有给定 key 与第一个 key 的差集,并将结果存为另一个 key。注意是通过key1比对后面keyx得出的差值保存到KEY sinter KEY1 KEY2 : 返回所有给定 key 的交集 sinterstore KEY KEY1 KEY2 … : 返回所有给定 key 的交集,并将结果存为另一个 key sunion KEY1 KEY2 : 返回所有给定 key 的并集 sunionstore KEY KEY1 KEY2… : 返回所有给定 key 的并集,并将结果存为另一个 key smove KEY1 KEY2 VALUE : 从第一个 key 对应的 set 中移除 member 并添加到第二个对应 set 中 scard KEY : 返回名称为 key 的 set 的元素个数 sismember KEY VALUE : 测试 member 是否是名称为 key 的 set 的元素 srandmember KEY : 随机返回名称为 key 的 set 的一个元素,但是不删除元素 2.5 sorted sets 类型及操作sorted set 是 set 的一个升级版本,它在 set 的基础上增加了一个顺序属性,这一属性在添加 修改元素的时候可以指定,每次指定后,zset 会自动重新按新的值调整顺序。可以理解为有 两列的 mysql 表,一列存 value,一列存顺序。操作中 key 理解为 zset 的名字。 和 set 一样 sorted set 也是 string 类型元素的集合,不同的是每个元素都会关联一个 double 类型的 score。sorted set 的实现是 skip list 和 hash table 的混合体。 当元素被添加到集合中时,一个元素到 score 的映射被添加到 hash table 中,所以给定一个 元素获取 score 的开销是 O(1),另一个 score 到元素的映射被添加到 skip list,并按照 score 排 序,所以就可以有序的获取集合中的元素。添加,删除操作开销都是 O(log(N))和 skip list 的 开销一致,redis 的 skip list 实现用的是双向链表,这样就可以逆序从尾部取元素。sorted set 最 经常的使用方式应该是作为索引来使用.我们可以把要排序的字段作为 score 存储,对象的 id 当元素存储。下面是 sorted set 相关命令。 zadd KEY SCORE VALUE : 向名称为 key 的 zset 中添加元素 member,score 用于排序。如果该元素已经存在,则根据 score 更新该元素的顺序 zrange KEY SCORE_START SCORE_END [withscores] : 显示zset中指定的元素，当带上withscores参数时传排序值 zrem KEY VALUE : 删除名称为 key 的 zset 中的元素 member zincrby KEY SCORE VALUE : 如果在名称为 key 的 zset 中已经存在元素 member,则该元素的 score 增加 increment;否则 向集合中添加该元素,其 score 的值为 increment zrank KEY VALUE : 返回名称为 key 的 zset 中 member 元素的排名(按 score 从小到大排序)即下标。 zrevrank KEY VALUE : 返回名称为 key 的 zset 中 member 元素的排名(按 score 从大到小排序)即下标 zrevrange KEY START END [withscores] : 返回名称为 key 的 zset(按 score 从大到小排序)中的 index 从 start 到 end 的所有元素 ? zrangebyscore KEY START END [withscores] : 返回集合中 score 在给定区间的元素 ? zcount KEY START END : 返回集合中 score 在给定区间的数量。测试不能为负数。 zcard KEY : 返回集合中元素个数 zscore KEY VALUE : 返回给定元素对应的 score zremrangebyrank KEY START END : 删除集合中排名在给定区间的元素 zremrangebyscore KEY START END ： 删除集合中 score 在给定区间的元素 三、 redis常用命令3.1 键值相关命令 keys : 返回满足给定 pattern 的所有 key exists KEY : 确认一个 key 是否存在 del KEY : 删除一个 key expire KEY TIME: 设置KEY的过期时间 move : 将当前数据库中的 key 转移到其它数据库中 ? persist KEY : 移除给定 key 的过期时间 randomkey : 随机返回 key 空间的一个 key rename KEY NEW_KEY : 重命名 key type KEY : 返回值的类型 3.2 服务器相关命令 ping : 测试连接是否存活 echo VALUE : 在命令行打印一些内容 select ID : 选择数据库。Redis 数据库编号从 0~15,我们可以选择任意一个数据库来进行数据的存取。 quit : 退出连接。 dbsize : 返回当前数据库中 key 的数目。 info : 获取服务器的信息和统计。 monitor : 实时转储收到的请求。 config get VALUE : 获取服务器配置信息, 如 config get dir 获取redis的目录。 flushdb : 删除当前选择数据库中的所有 key。 flushadd : 删除所有数据库中的所有 key。 四、Redis高级使用特性五、PHP中使用redis类php安装redis扩展后即可使用，针对不同的php版本编译的扩展也是不一样的。 5.1 安装redis php 扩展5.2 php常用redis方法参考：https://github.com/ukko/phpredis-phpdoc 六、一些Redis相关工具 phpRedisAdmin : 跟phpmyadmin类似的redis php管理页面]]></content>
  </entry>
  <entry>
    <title><![CDATA[MySQL binlog 日志内容导出规则处理]]></title>
    <url>%2F2016%2F11%2F03%2Fmysql-binlog-export.html</url>
    <content type="text"><![CDATA[由于误删了mysql的数据，通过binlog导出的数据匹配写入的sql，代码如： 12345678910111213141516171819202122$str = file_get_contents('test.log');// $str = &lt;&lt;&lt;EOF// use `dswfnet_anru`/*!*/;// SET TIMESTAMP=1473609850/*!*/;// INSERT INTO `sp_active_info` (`code`,`phone`,`name`,`province`,`city`,`area`,`addr`,`ua`,`ip`,`insert_time`) VALUES ('8225','18778780399','卢秋燕','广西区','钦州市','钦南区','广西钦州市北部湾大道','Mozilla/5.0 (Linux; Android 4.3; R7007 Build/JLS36C) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/37.0.0.0 Mobile MQQBrowser/6.2 TBS/036558 Safari/537.36 MicroMessenger/6.3.23.840 NetType/cmnet Language/zh_CN','117.136.98.157','2016-09-12 00:04:10')// /*!*/;// # at 16267863// EOF;$patten = '#(INSERT INTO `sp_active_info`.+)#i';preg_match_all($patten, $str, $match);echo count($match[1]);foreach($match[1] as $v)&#123; $v = $v.';'."\n"; file_put_contents('test.sql', $v,FILE_APPEND );&#125;]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>binlog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac折腾LNMP]]></title>
    <url>%2F2016%2F09%2F20%2Finstall-lnmp-for-mac.html</url>
    <content type="text"><![CDATA[之前安装mysql一直都是失败，于是使用了mamp，发现很多扩展安装非常麻烦。于是，又开始动手使用homebrew安装 php7 + mysql5.7 +nginx. 一、设置homebrew12345ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"brew update brew tap homebrew/dupes brew tap homebrew/versions brew tap homebrew/homebrew-php 二、安装nginx12# 重启nginx : sudo nginx -s reload|stopsudo nginx -s stop &amp;&amp; sudo nginx 三、安装mysql1234brew edit mysqlwget xxxx-5.7.11.tar.gzmv mysql-5.7.11.el_capitan.bottle.tar.gz /Library/Caches/Homebrew/brew install mysql 四、安装php4.1 安装php5.x使用brew可以安装php的版本有 5.3、5.4、5.5、5.6 如果已经有安装php，需要unlink后再继续。比如我现在有php54，但要安装hp55，则需要这样去执行升级操作： 12brew unlink php54brew install php55 4.2 安装php7.0mac下重启php-fpm后可能使用了旧的版本，需要执行如下命令使得php和php-fpm调用的是7.0的版本：1export PATH="$(brew --prefix php70)/sbin:$PATH" 4.3 PHP常用扩展安装12345678910# swoole: https://github.com/swoole/swoole-src/releases/# redis: 下载：https://github.com/phpredis/phpredis/tree/php7# 以上安装方式都是：./configuremake &amp;&amp; make install# memcachedbrew install memcachedbrew install php70-memcached 4.4 安装php常见问题 memcached 依赖问题1PHP Deprecated: PHP Startup: memcached.sess_lock_wait and memcached.sess_lock_max_wait are deprecated. Please update your configuration to use memcached.sess_lock_wait_min, memcached.sess_lock_wait_max and memcached.sess_lock_retries in Unknown on line 0Deprecated: PHP Startup: memcached.sess_lock_wait and memcached.sess_lock_max_wait are deprecated. Please update your configuration to use memcached.sess_lock_wait_min, memcached.sess_lock_wait_max and memcached.sess_lock_retries in Unknown on line 0PHP Deprecated: PHP Startup: memcached.sess_lock_wait and memcached.sess_lock_max_wait are deprecated. Please update your configuration to use memcached.sess_lock_wait_min, memcached.sess_lock_wait_max and memcached.sess_lock_retries in Unknown on line 0Deprecated: PHP Startup: memcached.sess_lock_wait and memcached.sess_lock_max_wait are deprecated. Please update your configuration to use memcached.sess_lock_wait_min, memcached.sess_lock_wait_max and memcached.sess_lock_retries in Unknown on line 0PHP 7.0.2 (cli) (built: Jan 7 2016 10:40:26) ( NTS )Copyright (c) 1997-2015 The PHP GroupZend Engine v3.0.0, Copyright (c) 1998-2015 Zend Technologies with Xdebug v2.4.0RC3, Copyright (c) 2002-2015, by Derick Rethans 需要注释配置/usr/local/etc/php/7.0/conf.d/ext-memcached.ini如下内容：12;memcached.sess_lock_wait = 150000;memcached.sess_lock_max_wait = 0 参考： http://stackoverflow.com/questions/35130463/php7-memcache-deprecated-error-message]]></content>
      <categories>
        <category>DEV</category>
      </categories>
      <tags>
        <tag>lnmp</tag>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vimeo 视频开发]]></title>
    <url>%2F2016%2F09%2F17%2Fdev-vimeo.html</url>
    <content type="text"><![CDATA[vimeo是国外支持html5的播放器，而且木有广告，是嵌入到企业站或者博客站首选的视频之一，以下为嵌入vimeo视频的代码： 1&lt;iframe src="//player.vimeo.com/video/VIDEO_ID" width="WIDTH" height="HEIGHT" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt; vimeo文档地址]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hexo用法&wordpress迁移]]></title>
    <url>%2F2016%2F09%2F17%2Fwordpress-to-hexo.html</url>
    <content type="text"><![CDATA[今天把wp博客迁移到了hexo，主要原因是以后不用考虑空间问题。下面是迁移的代码： 12345678#使用npm安装插件npm install hexo-migrator-wordpress --save#（先去Wordprdss导出你的XML文件先），在博客目录执行hexo migrate wordpress wordpress.xml#导完之后，插件和xml都可以卸掉了~_~# 另外，由于mac中有报错`&#123; [Error: Cannot find module './build/Release/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' &#125;`， 需执行命令:npm install hexo --no-optional 另外，如果需要在线可视化编辑器，可以安装hexo-admin这个工具：1npm install --save hexo-admin 完成后，访问 localhost:4000/admin就是后台编辑的页面了。 enjoy it！]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[API标准]]></title>
    <url>%2F2015%2F02%2F25%2Fapi-standard.html</url>
    <content type="text"><![CDATA[工作中会遇到许多API的工作，目前最流行的方案是使用RESTful API。 附录1：code对照表参考仅供参考，API接口开发人员可根据实际情况自定义相应结果码或节点 200 ok - 成功状态，对应，GET,PUT,PATCH,DELETE. 500 faild - 失败状态 304 not modified - HTTP缓存有效。 400 bad request - 请求格式错误。可以标识参数错误或参数缺失 401 unauthorized - 未授权。 403 forbidden - 鉴权成功，但是该用户没有权限。 404 not found - 请求的资源或接口不存在 405 method not allowed - 该http方法不被允许。 410 gone - 这个url对应的资源现在不可用。 415 unsupported media type - 请求类型错误。 422 unprocessable entity - 校验错误时用。 429 too many request - 请求过多。 API参考说明参考文档： HTTP API 设计指南 白宫API标准 php实现restful api有什么框架使用方便？ HTTP API响应数据规范整理 A Beginner’s Guide to HTTP and REST RESTful实践总结 PHP RESTful相关项目： Lysine2 ToroPHP RESTFullYii]]></content>
  </entry>
  <entry>
    <title><![CDATA[PhpStorm快捷键(windows)]]></title>
    <url>%2F2015%2F02%2F12%2Fphpstorm-for-window.html</url>
    <content type="text"><![CDATA[CTRL + D 复制当前行或复制选中内容 CTRL + Y 删除当前行或选中内容所涉及的行 CTRL + R 查找替换 ALT + W 选中单词 ALT + 上下箭头 向上向下函数间切换 CTRL + SHIFT + V 显示最近粘贴板中的内容，选择后内容插入到光标位置 CTRL + Q 显示说明文档 CTRL + B 跳转到声明处 CTRL + N 类名查找 CTRL + SHIFT + N 文件名查找 CTRL + SHIFT + ALT + N 函数名查找 ALT + SHIFT + C 快速回顾最近修改的项目 CTRL + SHIFT + I 查看变量初始化的值 CTRL + ALT + T 插入环绕代码 CTRL + ALT + F12 跳转至当前文件所在磁盘上的位置 ALT + 左右键 标签切换 CTRL + F12 在当前类文件中快速查找方法 PHPstorm默认快捷键 CTRL + J 插入活动代码提示 ctrl+alt+t 当前位置插入环绕代码alt+insert 生成代码菜单Shift + Enter 新一行ctrl+q 查看代码注释ctrl+d 复制当前行ctrl+y 删除当前行shift+F6 重命名ctrl+shift+u 字母大小写转换ctrl+f 查找ctrl+r 替换ctrl+shift+I 查看变量或方法定义源ctrl+g 跳转行ctrl+alt+F12 跳转至当前文件在磁盘上的位置alt+down 查看下一个方法alt+up 查看上一个方法ctrl+alt+l 重新格式化代码ctrl+shift+down statement向下移动ctrl+shift+up statement向上移动alt+shift+down line向下移动alt+shift+up line向上移动ctrl+/ 行注释ctrl+shift+/ 块注释 Ctrl + Shift + Z：redo Ctrl + Shift + F：区域查找ctrl+shift+n 打开工程中的文件ctrl+b 跳到变量申明处ctrl+[] 匹配 {}[]ctrl+shift+]/[ 选中块代码 ….ctrl+x 剪切行ctrl+shift+v 复制多个文本alt+left/right 标签切换ctrl+p 显示默认参数 ctrl + ‘-/+’: 可以折叠项目中的任何代码块 =================================================== 2013-12-27 新增 CTRL + SHIFT + R 快速查找该关键字在整个项目中的位置，或者替换整个项目目录中的匹配字符。 这个快捷键找了好久终于发现了 ，哈哈 CTRL + T 更新当前项目的svn 代码。 CTRL + K 提交当前的目录下的svn 代码。 其实在做项目的过程中 最常用的就是 查找文件位置，类，函数，关键字符，行号。 我使用的主题 theme : Darcula 代码区主题 fonts :monospaced (^__^) 欢迎补充……]]></content>
  </entry>
  <entry>
    <title><![CDATA[PHP不同版本报错差异]]></title>
    <url>%2F2015%2F02%2F06%2Fphp%2Fphp-version-diff-errors.html</url>
    <content type="text"><![CDATA[开发和生产环境中经常会在PHP5.2、5.3和5.4版间切换，但各个版本函数和报错情况又不一样，下面发上工作中遇到报表不同后出现的各种坑。 PHP5.2升级后问题汇总Deprecated: Assigning the return value of new by reference is deprecated in XXX出现Deprecated: Assigning the return value of new by reference is deprecated in报错。这是因为5.3以后，不能使用”=&amp;”符号，可以直接用”=”就可以了。 所以当出现这个问题后有两种解决方法： 把php的版本降级到5.3以下，但后退的不是明智的选择。 对程序中”=&amp;”符号全部用”=” 代替。 示例如下：Deprecated: Assigning the return value of new by reference is deprecated in 定位到出错的那一行： $this-&gt;_ole =&amp; new OLERead(); 我本地环境用的是PHP/5.3.8。 下面这段话引用于因思而变 解决办法：php5.3开始后，废除了php中的”=&amp;”符号，所以要想复制，直接用=引用即可。详细如下： 1、PHP5对象复制是采用引用的方式；2、如果不采用引用方式，则需要在复制对象时加关键字 clone;3、如果在复制的过程中，同时要变更某些属性，则增加函数_clone(); PHP新增特性自 PHP5.2 起，直至 PHP5.6 中增加的新特征。 PHP5.2 以前：autoload, PDO 和 MySQLi, 类型约束 PHP5.2：JSON 支持 PHP5.3：弃用的功能，匿名函数，新增魔术方法，命名空间，后期静态绑定，Heredoc 和 Nowdoc, const, 三元运算符，Phar PHP5.4：Short Open Tag, 数组简写形式，Traits, 内置 Web 服务器，细节修改 PHP5.5：yield, list() 用于 foreach, 细节修改 PHP5.6: 常量增强，可变函数参数，命名空间增强 PHP5.2之前1. autoloadphp5.2 之前添加了__autoload()方法，使用一些类库的时候，难免会出现多个 autoload 函数的需要，于是 php5.4 后spl_autoload_register()取而代之了 PHP5.3PHP5.41. Short Open Tag 自 PHP5.4 起总是可用简写方式如&lt;? /* Code... */ ?&gt;或&lt;?= $xxoo;?&gt;.这种简写形式被称为 Short Open Tag, 在 PHP5.3 起被默认开启，在 PHP5.4 起总是可用。使用这种简写形式在 HTML 中嵌入 PHP 变量将会非常方便。 2. 数组简写方式简写形式如$arr = [&quot;key&quot; =&gt; &quot;value&quot;, &quot;key2&quot; =&gt; &quot;value2&quot;];,在php5.4后开启支持 3. Traits所谓Traits就是“构件”，是用来替代继承的一种机制。PHP中无法进行多重继承，但一个类可以包含多个Traits. PHP手册 - Trait 4. 内置 Web 服务器支持写法： php -S localhost:8000 5. 新增动态访问静态方法的方式如：12$func = "funcXXOO";A::&#123;$func&#125;(); 6. 新增在实例化时访问类成员的特征 (new MyClass)-&gt;xxoo(); 7. 新增支持对函数返回数组的成员访问解析这种写法在之前版本是会报错的:print func()[0];, php5.4开始支持 PHP5.51. yield关键字php5.5新增yield关键字，用于当函数需要返回一个迭代器的时候, 逐个返回值。 2. list() 用于 foreach可以用 list() 在 foreach 中解析嵌套的数组 3. 不推荐使用 mysql 函数，推荐使用 PDO 或 MySQLi4. 可用 MyClass::class 取到一个类的完整限定名(包括命名空间)5. empty() 支持表达式作为参数6. try-catch 结构新增 finally 块。PHP5.61. 定义常量时允许使用之前定义的常量进行计算2. 可变函数参数函数中使用$args代理之前的用于代替 func_get_args() 3. 命名空间支持常量和函数12345678910namespace Name\Space &#123; const FOO = 42; function f() &#123; echo __FUNCTION__."\n"; &#125; &#125; namespace &#123; use const Name\Space\FOO; use function Name\Space\f; echo FOO."\n"; f(); &#125; PHP7.0PHP7.1PHP7.2]]></content>
  </entry>
  <entry>
    <title><![CDATA[Git如何永久删除文件(包括历史记录)]]></title>
    <url>%2F2015%2F02%2F05%2Fgit%2Fdelete-file-for-git.html</url>
    <content type="text"><![CDATA[$ 步骤一: 从你的资料库中清除文件 git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch *.gz' --prune-empty --tag-name-filter cat -- --all git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch *.tgz' --prune-empty --tag-name-filter cat -- --all git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch *.zip' --prune-empty --tag-name-filter cat -- --all $ 步骤二: 推送我们修改后的repo,以强制覆盖的方式推送你的repo, 命令如下: git push origin master --force $ 步骤三: 清理和回收空间 $ 虽然上面我们已经删除了文件, 但是我们的repo里面仍然保留了这些objects, 等待垃圾回收(GC), 所以我们要用命令彻底清除它, 并收回空间. rm -rf .git/refs/original/ git reflog expire --expire=now --all git gc --prune=now git gc --aggressive --prune=now 设置完成之后, 你可以使用命令du -s .git查看仓库地址空间大小是否有明显减少了. 参考: https://help.github.com/articles/remove-sensitive-data http://www.cnblogs.com/shines77/p/3460274.html]]></content>
  </entry>
  <entry>
    <title><![CDATA[MySQL基础复习]]></title>
    <url>%2F2015%2F02%2F01%2Fsql%2Fmysql-basic.html</url>
    <content type="text"><![CDATA[@20130611 by boxcore 约定： tabname：表名dbname:数据库名fieldname 或 field+n : 字段名 一、数据库概述 MySQl操作过程：MySQl 服务端,MySQl客户端； 数据库产品分类：关系型数据库 ,非关系型数据库； 数据表的字符集:Client,Conn,Server,DB3.1 my.ini配置默认字符串： dafault-character-set=utf8 # client &amp; Conn charset; character-set-server=utf8 # server &amp; DB charset;3.2 PHP语句设置客户端字符集： mysql_query(“set name utf8”);3.3 创建表时指定字符集方法： 12create table tab(…)engine=MyISAM DEFAULT CHARSET=utf8;create table tabname(…)type=mysiam default character set utf8 collate utf8_general_ci; 数据表组成：表结构文件 (),表数据文件(), 表索引文件 (); 数据库引擎：InnoDB支持事务处理，但不支持全文搜索MyISAM支持全文搜索但不支持事务， MEMORY和MyISAM 一样，只不过它把数据保存在内存而不是磁盘中，这样速度更快。 二、数据库的常用操作： 数据库的连接：mysql -uroot -p123 -h192.168.2.2 退出MySQL:exit|quit|Ctrl+C 中断数据库的操作：\c MySQl服务器的关闭和退出：net stop mysql || net start mysql MySQl中用户的修改：set password=password(&quot;密码 &quot;)创建用户： CREATE USER ‘test1’@’localhost’ IDENTIFIED BY ‘*‘; MySQl中用户授权： 12grant all on . to user1@192.168.190.20 identified by “密码”;GRANT ALL PRIVILEGES ON test1\_% . * TO ‘test1’@‘localhost’; 刷新权限如：flush privileges; 在客户端修改用户权限后需要刷新数据库缓存 查看用户授权 12use mysqlselect user,password,host from user; 10.删除用户 12345— 方法一： drop user user1@“%”;— 方法二：use mysqldelete from user where user=“ 用户名”; 三、数据库的操作 创建数据库 create database dbname 查看数据库 show databases 删除数据库 drop database dbname 切换数据库 use dbname 四、表操作 查看表：show tables ； 创建表：create table tabname (field1 ，field2， fieldn); 删除表：dorp table [if exists] tabname ； 修改表名：rename table oldTabName to newTabName ； 查询表结构：desc tabname； 五、表内容管理 增加数据：insert: insert into user(name) values(&quot;user4&quot;) 2.删除数据：delete 123— 必须加where 条件，如果不加 where全部删除，这个时候应该用 truncate清空数据delete from user where id&gt;=3 and id&lt;=5;delete from user where id between 3 and 5; 3.修改数据：update 12update user set name=‘user5’,age=20 where id=5;— 在mysql 中没有==，只有 =，即包含赋值，又包含比较 4.查询数据：select 六、数据字段类型 数值显示和大小 int : int数值类型的无符号取值范围： 0-42亿 float tinyint : tinyint数值类型的无符号取值范围： 0-255 字符串显示和个数 char ·char(3)的意思是什么： 0-255 varchar ·varchar(3)的意思是什么： 0-65535 enum set 3.日期和时间( 数值) date time datetime year timestamp:在php中把时间加工成时间戳，放到 mysql中的int 列 七、数据字段属性 unsigned zerofill auto_increment null not null # 如表中性别例子 ,如果有一列你设计成not null,那么给 default默认值 default 八.数据表的类型 myisam // 默认就是 myisam innodb // 事务创建表时指定表类型： create table t1(id int) engine=innodb;修改表引擎类型： alter table tablename engine=innodb;查看表类型： show create table tabname; 九.数据表索引设置1.主键索引 primary key 一个表中只能有一个主键索引 添加索引 :1).建表时就加上去2).用alter 命令alter table t2 add primary key(id); // 加主键alter table t2 modify id int unsigned auto_increment; // 加无符号和自增属性 删除索引 :alter table t2 modify id int; // 加无符号和自增属性alter table t2 drop primary key; 2.唯一索引 unique index// 每一列都可以是唯一索引，本列值不能重复值 3.普通索引 index 添加索引 :alter table user add index in_name(name); 删除索引 :alter table user drop index in_name; //每一列都可以是普通索引 4.全文索引 fulltext 八.修改数据表结构 -alter1.修改字段1)change·alter table user change age sex int; 把age 的字段重命名为 sex并设置字段属性为int；【更改字段名，修改字段名】//修改字段名的时候建议带上他原有的 int或者varchar 属性，如果不写属性会报错；2)modify·alter table user modify age tinyint; 2.添加字段·alter table user add age int; //默认加到最后·alter table user add age int first; //加到最前面去·alter table user add age int after id; //加到id 后面 3.删除字段·alter table user drop age; 4.添加索引·alter table tab62 add primary key(id);·alter table tab62 modify id int unsigned auto_incrment;·alter table tab62 add unique un_name(name);·alter table tab62 add index in_pass(pass); 5.删除索引·alter table tab62 modify id int;·alter table tab62 drop primary key;·alter table tab62 drop index in_pass;·alter table tab62 drop unique un_name; 6.更改表名称1)rename table tab62 to tab26; 修改表名，非字段2)alter table user rename to user1; 7.更改auto_increment 属性的初始值alter table user auto_increment=1;//truncate user; 效率快，自增列表自动从 1开始（清空表中所有数据） 8.更改表名称：alter table 旧表名 rename as 新表名 9.删除表：dorp table [if exists] 表名； 结构化查询语言 sql包含四个部分:1.DDL // 数据定义语言 ,create,drop,alter2.DML // 数据操作语言 ,insert,update,delete3.DQL // 数据查询语言 ,select4.DCL // 数据控制语言 ,grant,commit,rollback 操作数据表中的数据记录 (DML)1.inserteg:insert into user(name) values(“user4”); 2.updateupdate user set name=”user4” where id=4;//在mysql 中没有==，只有 =，即包含赋值，又包含比较update user set name=’user5’,age=20 where id=5; 3.delete//必须加where 条件，如果不加 where全部删除，这个时候应该用 truncate清空数据delete from user where id&gt;=3 and id&lt;=5; 等同于 delete from user where id between 3 and 5; 数据查询语言（ DQL）—select 使用1.选择特定的字段select id,name from user;//select * from user; 2.给字段取别名-asselect id,name from user;select id maoxian,name from user;select id as maoxian,name from user; 3.distinct关键字的使用//取出唯一值select distinct age from user; 4.使用where 条件进行查询select * from user where id&gt;=3 and id&lt;=5; 5.查询空值nullselect from user where age is null;select from user where age is not null; 6.between and的使用方法select * from user where id between 3 and 5; 7.in的使用方法select from user where id=1 or id=2 or id=10;select from user where id in(1,2,10); 建议使用这个 8.like的使用方法//模糊查询,text 类型不能加索引% 匹配所有_ 匹配一个字符select * from user where name like “%mysql%”; //% 在前，name这一列的索引会失效 9.使用order by 对查询结果排序//排序，asc 和desc，一个是升序，一个降序select from user order by id asc; // 默认就是升序 ,数字从小到大select from user order by id desc; // 默认就是升序 ,数字从大到小 10.使用limit 限定输出个数 (分页实现)select from user order by id limit 0,2;select from user order by id limit 5; //limit 0,5 前五个 11.concat() 连接函数select concat(id,age) from user; # 输出的值为每一行中指点的列字符串相加。select concat(“aaa”,”bbb”,”cccc”); # 输出连接的字符串： aaabbbccc,如果没有双引号则误认为是字段，报错。 12.rand() 随机数eg: select * from user order by rand() limit 3; 13.使用统计函数：count() 统计个数sum() 求和avg() 平均值max() 最大值min() 最小值eg:select count(id),sum(age),avg(age),max(id),min(id) from user; 14.group by分组聚合的 使用-select结合合计函数，根据一个或多个列对结果集进行分组//分组 聚合//只分组没有意义，必须用函数去聚合 .eg: select banji,sum(score),count(id) from user group by banji; // 从班级表中统计每个班的总分数和总人数 eg2:查找每个客户的总金额（总订单） :O_Id OrderDate OrderPrice Customer1 2008/12/29 1000 Bush2 2008/11/23 1600 Carter3 2008/10/05 700 Bush4 2008/09/28 300 Bush5 2008/08/06 2000 Adams 6 2008/07/21 100 Carter执行语句： SELECT Customer,SUM(OrderPrice) FROM Orders GROUP BY Customer; 结果集类似这样：Customer SUM(OrderPrice)Bush 2000Carter 1700 Adams 2000 数据查询语言（ DQL）2—select 的多表查询假如下面三种方法都能实现一种表，优先选择普通多表查询。 1.普通多表查询1）两表查询mysql&gt; select user.id,user.name,user.score,user.banji,tel.num from user,tel where user.id=tel.uid;2）三表查询mysql&gt; select user.name,tel.num,qq.qq from user,tel,qq where user.id=tel.uid and user.id=qq.uid; 2.嵌套查询| 子查询-inselect * from user where id in(select uid from tel); 3.左链接查询-left join onselect user.id,user.name,tel.num from user left join tel on user.id=tel.uid;//左链接以左边的表为主导，先输出左边表的所有数据，按条件输出右边表的内容，没有相对应的内容就为 null *普通多表查询的三种方法，分别有什么区别：普通多表查询，查多个表，并且可以输出多个表的内容嵌套查询，查多个表，但只能输出一个表的内容左链接查询，查多个表，先把左边的表全部输出，右边的表按条件输出，否者输出 null 复习 —最常用的语法： DDL 数据定义语言: create, drop, alter 12create database {database};create table {table}(); DML 数据操作语言: insert, update, delete insert into 表名 [(字段 1,字段2, 字段n)] values (‘值 1’,’值2’,’ 值n’); update 表名 set 字段名 =表达式[, 字段n=表达式 n] [where 条件] [order by 字段] [limit 行数 ]; delete from 表名 [where 条件 ] [order by 字段] [limit 行数]; DQL 数据查询语言: select 1select [all|distinct] {|table.|[table.]field[as alias1][,[table.]field2[as alias2][,…]]} from tableexpression[,…][in externaldatabase] [where…] [group by…] [having…] [order by…] [limit count]; DCL 数据控制语言: grant, commit, rollback1）grant 权限 on 数据库 .数据表 to 用户@登录主机 indentified by “密码”]]></content>
  </entry>
  <entry>
    <title><![CDATA[jetbrains系统注册码]]></title>
    <url>%2F2014%2F07%2F18%2Fjetbrains-software-keygen.html</url>
    <content type="text"><![CDATA[系列软件的用户名都是BOXCORE phpStorm注册码： ===== LICENSE BEGIN =====63272-1204201000000l7V1XdVStPUJJBsHFRDdsUbGGVbeOn!V1m62NqILGensvhsX5”r1PWSRdlBkcl2sw3SDjP8azf4jw90TVuVZB===== LICENSE END ===== &nbsp; rubymini注册码 ===== LICENSE BEGIN =====36121-12042010000026ZaA8”l8ewDF”62XGOG4oeKCMQfyjQCh4OkEdFXYoYBX”PnUChnMrLKCfF”7RgedAhh78zfNSlNEc996jZJpV===== LICENSE END ===== &nbsp; WebStorm ===== LICENSE BEGIN =====31168-1204201000000FTsQvvg2Wsc5xjT0AVDwzU4zZD87W3vfAv8hY””LXngYd1cHyAL9srjhC70dya142m5uvhirGmWPcd”p8rMMf===== LICENSE END ===== &nbsp; PyCharm ===== LICENSE BEGIN =====98736-1204201000001LIgH92VW6”X5OOrf4Vpt3t!g9yuMZhvqcdcftrxPjQQvRiMCP8YsM0K!BSir5BuHTtOvYAsh6Xt8weGoPp8it===== LICENSE END ===== &nbsp; &nbsp; &nbsp;]]></content>
      <categories>
        <category>App</category>
      </categories>
      <tags>
        <tag>jetbrains</tag>
        <tag>phpstorm</tag>
        <tag>pycharm</tag>
        <tag>rubymine</tag>
        <tag>webstorm</tag>
        <tag>激活码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[订阅器收集]]></title>
    <url>%2F2014%2F06%2F26%2Frss-list.html</url>
    <content type="text"><![CDATA[自从google reader关闭后就转投国内的鲜果用了1年多了, 不过终于在今天用了feedly. 故记录下一些用feed订阅的地址: feedly订阅: http://www.feedly.com/home#subscription/feed/%s 更新2018-01-16： https://feedly.com/i/subscription/feed/%s 鲜果订阅: http://xianguo.com/subscribe?url=%s]]></content>
      <categories>
        <category>App</category>
      </categories>
      <tags>
        <tag>RSS</tag>
        <tag>订阅工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux下载工具(axel、wget、curl)使用]]></title>
    <url>%2F2014%2F06%2F26%2Flinux%2Flinux-download-tools.html</url>
    <content type="text"><![CDATA[linux下常用的下载工具是wget，其他常用的有axel和curl 一、wget应用场景批量下载或递归下载网页中的所有文件： wget -r http://site.com/content_dir指定下载编码后再重命名: wget --restrict-file-names=ascii -m www.xxx.com/ 下载为ascii的文件名, 可以使用软件RenamePro8.0在“高级文件名变”更里面有一个“文件名编码与解码”，“ANSI编码URL字符串转换为文字” 参考 http://moper.me/wget-download-the-file-name-garbled.html http://rubyer.me/blog/111/ 二、axelaxel tools是多线程下载工具 1234567891011121314$ 编译安装wget http://mirrors.boxcore.org/lnmp/axel-1.0b.tar.gztar zxvf axel-1.0b.tar.gzcd axel-1.0b./configuremake &amp;&amp; make installcd ../$ CentOS rpm包安装wget -c http://pkgs.repoforge.org/axel/axel-2.4-1.el5.rf.i386.rpm # 64bit:http://pkgs.repoforge.org/axel/axel-2.4-1.el5.rf.x86_64.rpmrpm -ivh axel-2.4-1.el5.rf.i386.rpm$ ubuntuapt-get install axel Axel命令使用方法axel 参数 文件下载地址可选参数： -n 指定线程数 -o 指定另存为目录 -s 指定每秒的最大比特数 -q 静默模式 如从Diahosting下载lnmp安装包指定10个线程，存到/tmp/：axel -n 10 -o /tmp/ http://soft.vpser.net/lnmp/lnmp0.7-full.tar.gz 如果下载过程中下载中断可以再执行下载命令即可恢复上次的下载进度。]]></content>
  </entry>
  <entry>
    <title><![CDATA[人生选择]]></title>
    <url>%2F2014%2F05%2F27%2Fnote-20140527-life-choice.html</url>
    <content type="text"><![CDATA[小学升初中 120多的分，不关心上学初三自己真正努力，但只是勉强考到了3中高二升高三 尖子班落选高考考差了，去了一个不是自己选择学校和专业第一份工作大桥化工实习宾伦手表辞职，瞎逛，自己折腾去北京学习就I进入7808工作 许多年去了，挚友只有2个。 很好的朋友4个。 我个人性格孤僻，自以为是，自傲。 偶尔抑郁症。 喜欢英文歌和轻音乐 追美剧和A威教育。 发自我的手机]]></content>
      <categories>
        <category>未分类</category>
      </categories>
      <tags>
        <tag>日记</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学编程的原因]]></title>
    <url>%2F2014%2F04%2F30%2Fnote-reason-for-learn-coding.html</url>
    <content type="text"><![CDATA[以前在学校的时候学习编程是因为网页好玩，我感兴趣，但那时候还没有真正规划好自己的学习路线，也没有考虑以后人生计划。我当时学的化工，那会只有一个简单的想法就是出来后我肯定不做化工，不做化工那么做什么我也没有好好想。于是，在大三实训了1年后果断的就辞职上了广州一个做二手钢琴朋友那里。在他那边的时候我帮他完成了一个二手钢琴的网站，但那时候网站基础什么的都很薄弱，当然做出的网站也是比较粗糙的，现在回去看这网站我也是无法直视的。就在他那边白住了一个月，但不能在他那边白住人家那么长时间，在11年八月低的时候恰逢我朋友国亮也上广州了急需找个住，于是我们伙着一起在新市墟找了个单间住。那是我第一次租房，环境很糟，一楼住，阴寒潮湿，墙两边绕水渠，晚上还有很多老鼠在那边叫，屋里蟑螂一堆。就在那边瞎折腾了一个月，整天在那里漫无目的的上网。。一个月后通过百姓网找到了我的第一份工作。 发自我的手机]]></content>
      <categories>
        <category>Journal</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JAVA学习计划]]></title>
    <url>%2F2014%2F04%2F26%2Fjava-learning-plans.html</url>
    <content type="text"><![CDATA[高调在这里发布我的java学习计划正式开始了！本人的java基础为零，大计划是从最基础的javaSE学起，掌握基本语法后做个小项目巩固知识。在深思熟虑之下，考虑还是用java作为自学的第三个语言。其主要动机来源于要学习lucense项目开发搜索引擎。说干就干，下面给出近期快速突破java基础知识的计划： 4月26日：一整天卡java基础语法，并能用基础语法写简单的小试验。 &nbsp; 同时网上也有网友提出的如何自学java的问题可以参考： http://www.zhihu.com/question/19945685 &nbsp; 参考视频教程： http://edu.51cto.com/course/course_id-429.html &nbsp; 课程目录参考： http://java.itcast.cn/java/course/base.shtml &nbsp; 于2014年4月26日 凌晨]]></content>
      <categories>
        <category>Journal</category>
      </categories>
      <tags>
        <tag>日记</tag>
        <tag>计划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[无题]]></title>
    <url>%2F2014%2F04%2F18%2Fwuti-20140418.html</url>
    <content type="text"><![CDATA[晚上12点下大雨了，坚持看书中！]]></content>
      <categories>
        <category>Journal</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sublime Text插件：DocBlockr自动补全注释]]></title>
    <url>%2F2014%2F04%2F10%2Fsublime-text-plugin-docblockr.html</url>
    <content type="text"><![CDATA[Github项目地址：https://github.com/spadgos/sublime-jsdocs 下载后把目录名修改为“DocBlockr ”方可使用 &nbsp; 常用配置： 用户设置： { “jsdocs_extra_tags”: [“”, “@author ${1:author name}”, “@date 1397096007000“, “@version ${1:[version]}”]}&nbsp; 完成，然后就可以使用咯，enjoy it！]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Sublime Text</tag>
        <tag>sublime插件</tag>
        <tag>DocBlockr</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[phpmyadmin免输入密码直接登陆mysql]]></title>
    <url>%2F2014%2F04%2F10%2Fphpmyadmin-config-setting.html</url>
    <content type="text"><![CDATA[设置说明:config.sample.inc.php 修改为 config.inc.php 添加如下代码：。 $i++;/ Authentication type /$cfg[‘Servers’][$i][‘auth_type’] = ‘config’;/ Server parameters /$cfg[‘Servers’][$i][‘host’] = ‘localhost’;$cfg[‘Servers’][$i][‘connect_type’] = ‘tcp’;$cfg[‘Servers’][$i][‘compress’] = false;/ Select mysqli if your server has it /// $cfg[‘Servers’][$i][‘extension’] = ‘mysql’;$cfg[‘Servers’][$i][‘user’] = ‘root’;$cfg[‘Servers’][$i][‘password’] = ‘’;$cfg[‘Servers’][$i][‘AllowRoot’] = true;$cfg[‘Servers’][$i][‘AllowNoPassword’] = true; $i++;$cfg[‘Servers’][$i][‘auth_type’] = ‘config’;$cfg[‘Servers’][$i][‘host’] = ‘192.168.15.2’;$cfg[‘Servers’][$i][‘connect_type’] = ‘tcp’;$cfg[‘Servers’][$i][‘compress’] = false;// $cfg[‘Servers’][$i][‘extension’] = ‘mysql’;$cfg[‘Servers’][$i][‘user’] = ‘root’;$cfg[‘Servers’][$i][‘password’] = ‘123456’;$cfg[‘Servers’][$i][‘AllowRoot’] = true;$cfg[‘Servers’][$i][‘AllowNoPassword’] = true;&nbsp; 注意修改用户名和密码，可以设置多个，需要在$i++后添加。 &nbsp;]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>phpmyadmin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LNMP编译：nginx的安装]]></title>
    <url>%2F2014%2F04%2F09%2Finstall-nginx-for-lnmp.html</url>
    <content type="text"><![CDATA[编译nginx前依赖包安装： # install pcre for nginxif [ -s pcre-8.34.tar.gz ]; then echo “pcre-8.34.tar.gz [found]”else echo “Error: pcre-8.34.tar.gz not found!!!download now……” wget -c http://mirrors.boxcore.org/lnmp/pcre-8.34.tar.gzfitar zxvf pcre-8.34.tar.gzcd pcre-8.34/./configuremake &amp;&amp; make installcd ../ldconfig&nbsp; 开始编译nginx： 下载解压： tar zxvf nginx-1.4.4.tar.gzcd nginx-1.4.4/&nbsp; configure配置项： 如果你的nginx依赖件已经用yum先安装好，可以使用下面命令： ./configure –user=$LNMP_USER –group=$LNMP_USER –prefix=/usr/local/nginx –with-http_stub_status_module –with-http_ssl_module –with-http_gzip_static_module –with-ipv6 –with-pcre如果nginx依赖包是编译的，需要指定目录： ./configure –user=www –group=www –prefix=/usr/local/nginx –with-http_stub_status_module –with-http_ssl_module –with-http_gzip_static_module –with-ipv6 –with-openssl=/usr/include/openssl –with-pcre&nbsp; 如果报错 error:openssl/include/openssl/ssl.h] Error 2需要确定openssl是否安装好，如果是yum安装openssl-devel后，configure时的参数去掉–with-openssl=/lib64/ –with-zlib=/usr/lib64/ –with-md5=/usr/lib64即可编译通过 &nbsp;]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>lnmp</tag>
        <tag>Nginx</tag>
        <tag>编译nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sublime Text插件：Package Control安装包管理]]></title>
    <url>%2F2014%2F04%2F07%2Fsublime-text-plugin-package-control.html</url>
    <content type="text"><![CDATA[Package Control 能让你很方便地管理sublime text插件，下面讲解sublime如何安装package control包： 官方原版教材：https://sublime.wbond.net/installation 如果e文不好，就看看我的操作吧： 1. 快捷键“Ctrl+`”或菜单里“View &gt; Show Console”来调用控制器； 2. 在底部的控制器中粘贴如下代码： sublime text 3： import urllib.request,os,hashlib; h = ‘7183a2d3e96f11eeadd761d777e62404’ + ‘e330c659d4bb41d3bdf022e94cab3cd0’; pf = ‘Package Control.sublime-package’; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( ‘http://sublime.wbond.net/‘ + pf.replace(‘ ‘, ‘%20’)).read(); dh = hashlib.sha256(by).hexdigest(); print(‘Error validating download (got %s instead of %s), please try manual install’ % (dh, h)) if dh != h else open(os.path.join( ipp, pf), ‘wb’ ).write(by)&nbsp; sublime text 2： import urllib2,os,hashlib; h = ‘7183a2d3e96f11eeadd761d777e62404’ + ‘e330c659d4bb41d3bdf022e94cab3cd0’; pf = ‘Package Control.sublime-package’; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( ‘http://sublime.wbond.net/‘ + pf.replace(‘ ‘, ‘%20’)).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), ‘wb’ ).write(by) if dh == h else None; print(‘Error validating download (got %s instead of %s), please try manual install’ % (dh, h) if dh != h else ‘Please restart Sublime Text to finish installation’)&nbsp; 回车后就完成了package control的安装了！ &nbsp; 使用方法，选择菜单“Preferences &gt; Browse Packages”里面就有 快捷键：“Ctrl+Shift+P”调用]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Sublime Text</tag>
        <tag>sublime插件</tag>
        <tag>Package Control</tag>
        <tag>Packges</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sublime Text插件：CTags安装和使用]]></title>
    <url>%2F2014%2F04%2F06%2Fsublime-text-plugin-ctags.html</url>
    <content type="text"><![CDATA[CTags简介：略 &nbsp; CTags安装： 跟其他插件安装一样，放到packags目录中 sublime text CTags项目地址：https://github.com/SublimeText/CTags 百度网盘下载地址：http://pan.baidu.com/s/1nt9GOpN &nbsp; 安装好ctags后并不能直接使用，还需要安装配套的ctags58才行。 ctag58安装文件： 下载一：百度网盘 http://pan.baidu.com/s/1hqfyQNE（建议安装到D:Program Filesctags58，并添加到系统变量中） 下载二：官方 http://ctags.sourceforge.net &nbsp; 解压下载好的ctags58.zip，我这里放在了D:Program files配置环境变量： 讲D:Program filesctags58 地址配置到环境变量path中在cmd 中 输入 ctags –help 出现帮助信息则表示安装配置成功ctags安装配置好之后 在sublime text 打开 Package Control 输入install 选择 install package安装扩展接下来输入ctags，找到ctags扩展包 回车安装最后在打开的项目中 在sublimetext 目录栏中 find-&gt;CTags-&gt;build Tags 后 会在项目的根目录下生成.tags文件 &nbsp; Sublime下CTags使用： ctrl+shift+鼠标左键 就可以定位到相应的函数或变量了 &nbsp; 其他参考：http://blog.csdn.net/thunderclaus/article/details/11556159]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Sublime Text</tag>
        <tag>CTags</tag>
        <tag>sublime插件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sublime Text插件：Emmet]]></title>
    <url>%2F2014%2F04%2F06%2Fsublime-text-plugin-emmet.html</url>
    <content type="text"><![CDATA[Emmet以前叫Zen Coding，ST上面安装emmet这个插件可以节省很多编码时间，不够你信不信方正我信了哈。ST下安装Emmet是非常简单的，如果有Package Control直接输入安装命令，找emmet即可全自动安装。但本人实现的方法是直接从github项目地址下载的压缩包文件，直接用github上面压缩的文件安装会遇到下面常见的问题，下面给出我个人在用压缩包安装这个插件时候遇到的问题。 1. 首先去到Emmet的Github项目地址：https://github.com/sergeche/emmet-sublime，下载最新master版本后把文件目录拷贝到ST的安装目录中：{Sublime Text 目录}DataPackages 下。拷贝好后需要修改目录名为“Emmet”，不然st不买账。注：博主以前安装的时候就是遇到这个问题，后来在“Package Control”中选择“Emmet”的设置发现都是空的，还好哥集聪明与智慧一身，视觉敏锐的我立马发现了配置文件路径跟我安装的路径完全不一样，修改成“Emmet”后整个世界都舒畅了。。。 2. 安装好emmet后需要重启下st，重新打开后，底部会提醒正在下载PyV8引擎，等安好pyv8后测试在一个html文件中输入“!+Tab键”看他能不能扩展代码，不能的话需要看看在安装目录下PyV8是否已经自动安装好了（大部分情况是下载地址被强，需要上去拷贝到你本地）。假如PyV8已经安装好了，但还是不工作，那就要看看你的emmet目录名字是不是“Emmet”不然改改吧。 吹了这么多现在来分享下我的Emmet包和PyV8把： 2个文件直接解压到Sublime Text 的Packges目录就好了 下载地址： Emmet：http://pan.baidu.com/s/1mg7GXJE 密码：dp4z PyV8：http://pan.baidu.com/s/1jGqQewQ 密码：303v]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Sublime Text</tag>
        <tag>sublime插件</tag>
        <tag>Packges</tag>
        <tag>Emmet</tag>
        <tag>PyV8</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[黑苹果折腾记：笔记本硬件信息]]></title>
    <url>%2F2014%2F04%2F06%2Fmy-asus-notebook-hardware-information.html</url>
    <content type="text"><![CDATA[想体验下xcode下编码工具，又不想心疼1w块新买个imac，遂决心安装黑苹果之。借此记下我的笔记本配置：电脑型号 华硕 X55VDR 笔记本电脑 操作系统 Windows 8.1 专业版 64位 ( DirectX 11 ) 处理器 英特尔 第二代酷睿 i3-2370M @ 2.40GHz 双核 主板 华硕 X55VDR (英特尔 HM76 Express 芯片组) 内存 4 GB ( DDR3 1333MHz ) 主硬盘 日立 HTS545050A7E380 ( 500 GB / 5400 转/分 ) 显卡 Nvidia GeForce 610M ( 1 GB / 华硕 ) 显示器 LG LGD02DC ( 15.3 英寸 ) 光驱 建兴 DVD A DS8A9SH DVD刻录机 声卡 威盛 VIA @ 英特尔 Panther Point High Definition Audio Controller 网卡 鈺硕 AR8161/8165 PCI-E Gigabit Ethernet Controller / 华硕&nbsp; &nbsp; 硬盘健康：硬盘已使用 共 1462 次，累计 4378 小时主板BIOS日期 华硕 2012 年 11 月 09 日显示器固件日期 LG 2010 年系统安装日期 Windows 8.1 / 2014 年 04 月 05 日 电池损耗 10.18%当前容量 42681 mWh设计容量 47520 mWh &nbsp; 处理器信息：处理器 英特尔 第二代酷睿 i3-2370M @ 2.40GHz 双核速度 2.40 GHz (100 MHz x 24.0)处理器数量 核心数: 2 / 线程数: 4核心代号 Sandy Bridge NB生产工艺 32 纳米插槽/插座 Socket G2 (PGA 988 / BGA 1023)一级数据缓存 2 x 32 KB, 8-Way, 64 byte lines一级代码缓存 2 x 32 KB, 8-Way, 64 byte lines二级缓存 2 x 256 KB, 8-Way, 64 byte lines三级缓存 3 MB, 12-Way, 64 byte lines特征 MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, HTT, EM64T, EIST &nbsp; 主板信息：主板型号 华硕 X55VDR芯片组 英特尔 HM76 Express 芯片组序列号 BSN12345678901234567板载设备 VGA / 视频设备 (启用)板载设备 GLAN / 网卡 (启用)板载设备 WLAN / 网卡 (启用)BIOS American Megatrends Inc. X55VDR.405制造日期 11/09/2012 &nbsp; 内存信息：ChannelA-DIMM0 DDR3 1333MHz 4GB序列号: 00000000 &nbsp; 硬盘信息：产品 日立 HTS545050A7E380大小 500 GB转速 5400 转/分缓存 8 MB硬盘已使用 共 1462 次，累计 4378 小时固件 GG2OA6C0接口 SATA II数据传输率 300 MB/秒特征 S.M.A.R.T, APM, 48-bit LBA, NCQ &nbsp; 显卡信息：显卡 英特尔 HD Graphics Family显存 1893 MB制造商 华硕驱动版本 9.18.13.3260驱动日期 20140202 主显卡 Nvidia GeForce 610M显存 1 GB制造商 华硕 &nbsp; 显示器信息：产品 LG LGD02DC固件日期 2010 年屏幕尺寸 15.3 英寸 (34 厘米 x 19 厘米)显示比例 宽屏 16 : 9分辨率 1366 x 768 32 位真彩色最大分辨率 1366 x 768 &nbsp; 网卡信息：网卡 鈺硕 AR8161/8165 PCI-E Gigabit Ethernet Controller制造商 华硕 无线网卡 雷凌 RT5390 802.11b/g/n WiFi Adapter制造商 富士康 &nbsp; 声卡信息：声卡 威盛 VIA @ 英特尔 Panther Point High Definition Audio Controller &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; that is my config of notepad.]]></content>
      <categories>
        <category>Apple</category>
      </categories>
      <tags>
        <tag>黑苹果</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sublime Text 3 安装使用心得]]></title>
    <url>%2F2014%2F04%2F05%2Fsublime-text-3-install-and-usage.html</url>
    <content type="text"><![CDATA[最近又喜欢上用sublime了，最重要使我又转投sublime阵营的原因是，phpstorm用得越来越慢了，经常拖垮机器，所以不得已又转会了sublime阵营。下面给出我个人学习安装sublime text的历程(注:下面涉及到Sublime Text都简称为ST)。 晚上已经有一大堆的ST安装教程，如果e文好的话直接去ST官网看教程使用吧！为了研究ST的软件工作原理我个人采用了绿色包安装，我采用的是“Sublime Text Build 3059”的x86版本，其实本人的机器是x64的，但为了在公司的xp平台也能同步使用故直接弄x86了，同时也方便分享给其他同学使用。 &nbsp; 我的常用ST插件清单，点击可看博主的安装方法和常遇到问题的解决： Emmet IMESupport Clipboard-History Goto-CSS-Declaration CTags：https://github.com/SublimeText/CTags&nbsp; 我的常用ST配置： &nbsp;]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Sublime Text</tag>
        <tag>编辑器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计划：VIM使用]]></title>
    <url>%2F2014%2F03%2F15%2Fvim-editor-plan.html</url>
    <content type="text"><![CDATA[VIM的配置VIM中空格代替tab修改文件: vi /etc/vim/vimrc 123set expandtab " 使用空格代替tab. set tabstop=4 " 空格数量是4。 set shiftwidth=4 " 自动缩进的宽度。]]></content>
      <categories>
        <category>Journal</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[webbench模拟并发连接测试网站的负载能力]]></title>
    <url>%2F2014%2F02%2F26%2Flinux%2Fwebbench-usage.html</url>
    <content type="text"><![CDATA[Webbench能测试处在相同硬件上，不同服务的性能以及不同硬件上同一个服务的运行状况。webbench的标准测试可以向我们展示服务器的两项内容：每秒钟相应请求数和每秒钟传输数据量。webbench不但能具有便准静态页面的测试能力，还能对动态页面（ASP,PHP,JAVA,CGI）进 行测试的能力。还有就是他支持对含有SSL的安全网站例如电子商务网站进行静态或动态的性能测试。Webbench最多可以模拟3万个并发连接去测试网站的负载能力。个人感觉要比Apache自带的ab压力测试工具好，安装使用也特别方便。 适用系统：Linux 编译安装编译安装webbench 1234567yum -y install ctagsmkdir -pv /usr/local/man/man1wget -c http://mirrors.boxcore.org/webbench-1.5.tar.gztar -zxf webbench-1.5.tar.gzcd webbench-1.5makemake install webbench使用参数说明：-c表示并发数，-t表示时间(秒) /usr/local/bin/webbench -c 500 -t 30 http://127.0.0.1/test.jpg 结果示例： 123456Webbench - Simple Web Benchmark 1.5Copyright (c) Radim Kolar 1997-2004, GPL Open Source Software.Benchmarking: GET http://127.0.0.1/test.jpg500 clients, running 30 sec.Speed=3230 pages/min, 11614212 bytes/sec.Requests: 1615 susceed, 0 failed. 错误解决1234567891011121314151617[root@localhost webbench-1.5]# make installinstall -s webbench /usr/local/bininstall -m 644 webbench.1 /usr/local/man/man1install: cannot create regular file `/usr/local/man/man1&apos;: No such file or directorymake: *** [install] Error 1[root@localhost webbench-1.5]# ls /usr/local/man/man1ls: /usr/local/man/man1: No such file or directory[root@localhost webbench-1.5]# mkdir /usr/local/man/man1mkdir: cannot create directory `/usr/local/man/man1&apos;: No such file or directory[root@localhost webbench-1.5]# mkdir /usr/local/man/[root@localhost webbench-1.5]# mkdir /usr/local/man/man1[root@localhost webbench-1.5]# make installinstall -s webbench /usr/local/bininstall -m 644 webbench.1 /usr/local/man/man1install -d /usr/local/share/doc/webbenchinstall -m 644 debian/copyright /usr/local/share/doc/webbenchinstall -m 644 debian/changelog /usr/local/share/doc/webbench 参考 http://www.cnblogs.com/xiaocen/p/3704192.html http://blog.csdn.net/zzz_781111/article/details/7027472 http://home.tiscali.cz/~cz210552/webbench.html http://www.ha97.com/4623.html]]></content>
  </entry>
  <entry>
    <title><![CDATA[0.1到0.2]]></title>
    <url>%2F2014%2F01%2F10%2Fstatue-0-1-to-0-2.html</url>
    <content type="text"><![CDATA[上个月更新了个人的qq签名0.1，是为了表达一个意思，我在寻找一个很重要的东西。 这周日，将临来0.2，又是一个转折点！ PS： 这2天都会去转移我的qq空间资料来这里！]]></content>
      <categories>
        <category>Journal</category>
        <category>Roll</category>
      </categories>
      <tags>
        <tag>roll</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何安装和使用零售密钥激活Windows 8.1 专业版]]></title>
    <url>%2F2013%2F12%2F25%2Fhow-to-install-windows-8-1-pro.html</url>
    <content type="text"><![CDATA[步骤一：下载windows 8.1 Pro ISO镜像步骤二：刻录ISO光盘或使用“UltraISO软碟通”等软件创建一个启动U盘进行安装步骤三：将刻录的ISO光盘或启动U盘插入电脑步骤四：引导DVD光盘/启动U盘进入WinPE进行系统的安装步骤五：安装时根据自己的系统版本输入密钥（请勿输入你自己的密钥）Windows 8.1核心版334NH-RXG76-64THK-C7CKG-D3VPTWindows 8.1专业版XHQ8N-C3MCJ-RQXB6-WCHYG-C9WKB步骤六：当系统安装完成回到桌面时你会发现系统没有激活；右键单击左下角的“开始”按钮，选择“命令提示符（管理员）”选项dsadasdgasdgasdasd步骤七：将你的WiFi/路由器/所有网络断开，然后输入slmgr.vbs -XXXXX-XXXXX-XXXXX-XXXXX-XXXXX（更换正确的秘钥）dsadasdgasdgasdasd步骤八：更换成功后，在命令提示符窗口输入 SLUI 4 按回车步骤九：点击“通过电话进行激活”步骤十：选择“英国”步骤十一：使用Skype免费拨打激活窗口上面的电话号码步骤十二：拨打成功提示你选择按键的时候按1键步骤十三：然后输入你窗口上面A-H机器码步骤十四：当被问及有多少台电脑安装的时候按1键步骤十五：然后仔细聆听并记下所报数字并输入至激活窗口步骤十六：输入完成后单击“激活”窗口步骤十七：重新启动计算机激活完成 如何添加Windows Media Center的Windows 8.1专业版 1、激活激活Windows 8.1 Pro含WMC2、进入控制面板系统和安全系统，点击获取更多的功能，添加Windows Media Center3、单击“我已经有一个产品密钥”4、输入你以前Windows 8免费获取的WMC产品密钥5、勾选接受许可条款6、Windows会包括WMC功能，将自动重新启动7、重新启动Windows后，如果你的Windows没有被激活，则需要重新输入密钥一次，然后你会看到你的Windows 8 Pro与WMC将被激活（这通常是由于你的硬件变化，你需要重新输入WMC键后重新启动Windows）8、进入控制面板系统和安全系统，点击激活[在线激活]9、联网激活后，恭喜你永久获得了Windows 8 Pro与WMC，马上享用吧 Windows 8 PRO/ENT离线激活 [MAK] 秘钥slmgr.vbs -ipk 63VNX-R64MK-28K4H-Y6K4T-YG67Cslmgr.vbs -ipk JXNBF-VG8TP-PBDBW-TB2K2-P9T7Cslmgr.vbs -ipk 3XKNP-T864P-3WDQQ-H9FF3-2WCK2slmgr.vbs -ipk N9MRJ-6JRM9-M6XJC-6D6JD-QRPK2slmgr.vbs -ipk 73KKN-DHK63-WMGY2-6MC68-JFDHCslmgr.vbs -ipk NGKGG-W2V3K-G9X9Q-M7TXB-KD4DPslmgr.vbs -ipk J68BC-XTNWY-M3XQP-8TTR4-8B2K2slmgr.vbs -ipk HX388-XXNXX-WGWTG-KYTH8-RX492slmgr.vbs -ipk NY4RW-GMCHB-D3P9F-RJDP9-YDR92slmgr.vbs -ipk 3NKP9-K2XW9-FQHWH-MDMCQ-TCKVCslmgr.vbs -ipk 6CNK2-RTVRV-TXYQK-86DBM-B4DHCslmgr.vbs -ipk F2V7V-8WN76-77BPV-MKY36-MKH3Pslmgr.vbs -ipk MR2WF-NWPQ9-WCRWV-6GVFR-HQR92slmgr.vbs -ipk BNYHR-XDRK6-HV96V-CFRJ9-H49VCslmgr.vbs -ipk MWNDT-WDBDY-TCJFF-KCK2V-4CWX2slmgr.vbs -ipk Y7NHY-DRGCX-KHWM2-P2DPY-YWMQPslmgr.vbs -ipk CYM8B-NH6WD-DJ7Q9-TYXJP-P9T7Cslmgr.vbs -ipk 82WNH-WWCBT-Y843F-F7F7X-M9492slmgr.vbs -ipk RQGQD-DQNGY-TQHDF-CB2YR-WFDHCslmgr.vbs -ipk N3BDF-YMFJ3-P4VKX-C88VY-YWMQPslmgr.vbs -ipk 2C9ND-V2GFR-RR4YD-QB4DR-JHRDPslmgr.vbs -ipk MQJNQ-G2TKM-YJP7W-CCXVY-VQR92slmgr.vbs -ipk YT4KP-4TNXX-9MKRP-BYJC9-JW8X2slmgr.vbs -ipk Q74NW-797VJ-G8QM6-MYXDP-VFPK2 Windows 8.1 &amp; Windows 8 Pro / Pro WMC 离线激活零售版秘钥:slmgr.vbs -ipk CGWVF-N3VMK-CVG7W-MBB9Y-MY2KVslmgr.vbs -ipk D46QW-N3M4H-RY93J-DPMPY-43G67slmgr.vbs -ipk D66NY-H99YQ-9MPFY-G2YF3-973G7slmgr.vbs -ipk DBTMW-N29V3-V6XJ7-4RQXD-4F9T7slmgr.vbs -ipk DJD4R-TQNCX-B6HY8-J2KDC-3YFDHslmgr.vbs -ipk FFMKY-NXGJ7-3G897-KTB4C-W2KT7slmgr.vbs -ipk FGM9N-R4G2V-XVH3M-4F6JX-HCBQHslmgr.vbs -ipk FX2FN-VVPY7-M7QG7-XG7X4-X2BQHslmgr.vbs -ipk HV8NK-MCCM2-J7CDF-B46H7-46V3Hslmgr.vbs -ipk J4N6G-WB9KM-WHC3V-Q4KX2-8W8XVslmgr.vbs -ipk JC2BC-NQXKF-W8M7G-H7DRR-3C73Hslmgr.vbs -ipk JCDXN-2Q4FQ-G44BQ-GHGBK-H49T7slmgr.vbs -ipk K42R4-7RN34-992JQ-YBQWT-GMQG7 以前的秘钥但是依然可以使用：slmgr.vbs -ipk Q8R9N-Q6H9H-TXCXB-FT4GW-DGJXVslmgr.vbs -ipk QFTCN-2MC4B-TQ97K-F449X-GJCKVslmgr.vbs -ipk R7NVT-9HY8T-7Y43F-YHQHF-JHRDHslmgr.vbs -ipk RT6NW-B7TB9-BR9HC-F3RX7-XD4DHslmgr.vbs -ipk V4PNP-K6GRJ-76942-8JCFM-RCWXVslmgr.vbs -ipk VHDVP-HNVGT-7K3CK-R28KW-D9H3Hslmgr.vbs -ipk VJ2NT-B7364-88QPB-8VKVY-88CKVslmgr.vbs -ipk VNF76-VJQ6D-MYDB3-QVQBW-29T67slmgr.vbs -ipk 4C8N3-FYTFH-BHXBR-B2DY9-KP73Hslmgr.vbs -ipk 4BRRQ-NQFXF-BPW46-R7BCH-DRPKVslmgr.vbs -ipk VQKQN-C9V6X-VPGQ6-YFW8G-J2KT7 slmgr.vbs -ipk WFRQM-BPNKV-TC3WX-XF2DQ-6273HWindows 8.1 &amp; Windows 8 RTM Pro WMC 离线激活零售秘钥[电话激活]slmgr.vbs -ipk CQ2PJ-C7MJC-T3RBP-NMWJH-2RYRQslmgr.vbs -ipk JRMHB-9F327-NDT76-4T9KR-DJXWDslmgr.vbs -ipk 4PQWW-PPNY7-XJ8RJ-V6C4T-FVRFQslmgr.vbs -ipk 9DDD3-84PXF-QNPXF-3PV8Q-G8XWDslmgr.vbs -ipk TWHQX-8CH4Y-39DN9-VD7MG-WW8Y3slmgr.vbs -ipk GY8MV-86KDB-4XGNP-X3Y76-72WY3slmgr.vbs -ipk JC9DV-2P37N-DKD3W-MKKV4-6Q4FQslmgr.vbs -ipk PGB97-GJMN2-XB3CX-T86FB-88CM3slmgr.vbs -ipk B783Q-MB34J-NG6K3-WH82J-82KWDslmgr.vbs -ipk 66HJB-X2N4J-Y42JB-T6GDB-RCWY3 &nbsp; 以前的秘钥但是依然可以使用：slmgr.vbs -ipk 2DJ24-4XRYY-XNJBK-PQHX9-RM2M3slmgr.vbs -ipk 8KGQW-XMFY7-XNJYK-WYMB3-Y4DJDslmgr.vbs -ipk BCFR8-B7VGJ-X2Y94-NT982-CJ8Y3slmgr.vbs -ipk CG6QH-J68KC-RKNQW-PJ9PH-3JXWDslmgr.vbs -ipk D7DVD-WTR9C-8T93X-NFF2D-G8XWDslmgr.vbs -ipk HYFF2-CMF47-9NMB9-TQR3G-8TV4Qslmgr.vbs -ipk JKXK4-THDKN-GB6PH-4FCBW-29T8Dslmgr.vbs -ipk JWX33-VPXC7-RHBP7-N4HH7-QPBRQslmgr.vbs -ipk KQ9CV-HBJDC-CYGMN-YQ2DB-6VGB3slmgr.vbs -ipk RFQQB-CB3N9-KGKDR-HW7JT-6FYRQslmgr.vbs -ipk V398T-PFFN7-BK4WM-XY3PR-KBQJDslmgr.vbs -ipk WDYHJ-3JKQN-XFJQ6-42RTF-4X6B3slmgr.vbs -ipk P79C8-3F4NR-WP8KM-WR8QY-PRYRQ]]></content>
      <categories>
        <category>Soft</category>
      </categories>
      <tags>
        <tag>win8</tag>
        <tag>windows</tag>
        <tag>激活</tag>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[XXOO MVC 开发过程中常用到函数和测试函数]]></title>
    <url>%2F2013%2F12%2F18%2Fxxoo-mvc-usage.html</url>
    <content type="text"><![CDATA[测试函数： 1echo ‘&lt;!–’;print_r($data[‘cat_data’]);echo ‘–&gt;’;]]></content>
      <categories>
        <category>Work</category>
      </categories>
      <tags>
        <tag>工作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[note:2013-12-18]]></title>
    <url>%2F2013%2F12%2F18%2Fjournal-20131218.html</url>
    <content type="text"><![CDATA[很久没有写过生活日记了，想法很多，但坚持不下去，要弄的东西感觉很多，会忙不过来的样子。生活得没重点。 日记很久没写，也变生疏了。代码也很久没认真写了，纯码农一枚。 本来文采就不好，文化水平又不高，又好高骛远。 我是个虚伪的人，本来有骨气，渐渐的也为生活所迫低腰。 朋友关心处理不好，妞没泡到，主要还是钱的问题。 希望渐渐渺茫，boxcore博客将承当更多更大的发牢骚任务。]]></content>
      <categories>
        <category>Journal</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mysql学习笔记]]></title>
    <url>%2F2013%2F12%2F13%2Fmysql-note.html</url>
    <content type="text"><![CDATA[PHP NOTE 9 mysql 复习@20130611 by boxcore约定：tabname：表名dbname:数据库名fieldname 或 field+n : 字段名oldTabName:旧表名newTabName:新表名——————–一、数据库概述——————–1.MySQl操作过程：MySQl 服务端,MySQl客户端；2.数据库产品分类：关系型数据库 ,非关系型数据库；3.数据表的字符集:Client,Conn,Server,DB 1 ）my.ini配置默认字符串： dafault-character-set=utf8 # client &amp; Conn charset; character-set-server=utf8 # server &amp; DB charset; 2 ）PHP语句设置客户端字符集： mysql_query(“set name utf8”); 3 ）创建表时指定字符集方法： create table tab(…)engine=MyISAM DEFAULT CHARSET=utf8; （简写） create table tabname(…)type=mysiam default character set utf8 collate utf8_generalci;4.数据表组成：表结构文件 (),表数据文件(), 表索引文件 ();5.数据库引擎：InnoDB支持事务处理，但不支持全文搜索， MyISAM支持全文搜索但不支持事务， MEMORY和MyISAM 一样，只不过它把数据保存在内存而不是磁盘中，这样速度更快。———————-二、数据库的常用操作：———————-1.数据库的连接：mysql -uroot -p123 -h192.168.2.22.退出MySQL:exit|quit|Ctrl+C3.中断数据库的操作：c4.MySQl服务器的关闭和退出：net stop mysql || net start mysql5.MySQl中用户的修改：set password=password(“密码 “)； 创建用户： CREATE USER ‘test1’@’localhost’ IDENTIFIED BY ‘**’;6.MySQl中用户授权：grant all on .* to user1@192.168.190.20 identified by “密码”; GRANT ALL PRIVILEGES ON `test1%` . TO ‘test1’@’localhost’;7.刷新权限如：flush privileges; 在客户端修改用户权限后需要刷新数据库缓存8.查看用户授权 use mysql select user,password,host from user;10.删除用户 方法一： drop user user1@”%”; 方法二： use mysql delete from user where user=” 用户名”;—————–三、数据库的操作—————–1.创建数据库 create database dbname ；2.查看数据库 show databases;3.删除数据库 drop database dbname ；4.切换数据库 use dbname ；———–四、表操作———–1.查看表：show tables ；2.创建表：create table tabname (field1 ，field2， fieldn);3.删除表：dorp table [if exists] tabname ；4.修改表名：rename table oldTabName to newTabName ；5.查询表结构：desc tabname；——————–五、表内容管理——————–1.增加数据：insertinsert into user(name) values(“user4”);2.删除数据：delete//必须加where 条件，如果不加 where全部删除，这个时候应该用 truncate清空数据delete from user where id&gt;=3 and id&lt;=5;delete from user where id between 3 and 5;3.修改数据：updateupdate user set name=’user5’,age=20 where id=5;//在mysql 中没有==，只有 =，即包含赋值，又包含比较4.查询数据：select———————–六、数据字段类型———————–1.数值 // 显示和大小int|float|tinyint ·tinyint数值类型的无符号取值范围： 0-255 ·int数值类型的无符号取值范围： 0-42亿2.字符串 // 显示和个数char|varchar|enum|set ·char(3)的意思是什么： 0-255 ·varchar(3)的意思是什么： 0-655353.日期和时间( 数值)date|time|datetime|year|timestamp 在php中把时间加工成时间戳，放到 mysql中的int 列——————-七、数据字段属性——————-1.unsigned2.zerofill3.auto_increment4.null5.not null # 如表中性别例子 ,如果有一列你设计成not null,那么给 default默认值6.default—————–八**.**数据表的类型—————–1.myisam // 默认就是 myisam2.innodb // 事务 创建表时指定表类型： create table t1(id int) engine=innodb; 修改表引擎类型： alter table tablename engine=innodb; 查看表类型： show create table tabname;——————-九**.**数据表索引设置——————-1.主键索引 primary key 一个表中只能有一个主键索引添加索引 :1).建表时就加上去2).用alter 命令 alter table t2 add primary key(id); // 加主键 alter table t2 modify id int unsigned auto_increment; // 加无符号和自增属性删除索引 : alter table t2 modify id int; // 加无符号和自增属性 alter table t2 drop primary key;2.唯一索引 unique index // 每一列都可以是唯一索引，本列值不能重复值3.普通索引 index 添加索引 :alter table user add index in_name(name); 删除索引 :alter table user drop index in_name;//每一列都可以是普通索引4.全文索引 fulltext————————八**.**修改数据表结构 -alter————————1.修改字段1)change·alter table user change age sex int;#把age 的字段重命名为 sex并设置字段属性为int；【更改字段名，修改字段名】//修改字段名的时候建议带上他原有的 int或者varchar 属性，如果不写属性会报错；2)modify·alter table user modify age tinyint;2.添加字段 ·alter table user add age int; //默认加到最后 ·alter table user add age int first; //加到最前面去 ·alter table user add age int after id; //加到id 后面3.删除字段 ·alter table user drop age;4.添加索引 ·alter table tab62 add primary key(id); ·alter table tab62 modify id int unsigned auto_incrment; ·alter table tab62 add unique un_name(name); ·alter table tab62 add index in_pass(pass);5.删除索引 ·alter table tab62 modify id int; ·alter table tab62 drop primary key; ·alter table tab62 drop index in_pass; ·alter table tab62 drop unique un_name;6.更改表名称 1)rename table tab62 to tab26; 修改表名，非字段 2)alter table user rename to user1;7.更改auto_increment 属性的初始值alter table user autoincrement=1;//truncate user; 效率快，自增列表自动从 1开始（清空表中所有数据）8.更改表名称：alter table 旧表名 rename as 新表名9.删除表：dorp table [if exists] 表名；———————————–结构化查询语言 sql**包含四个部分**:———————————–1.DDL // 数据定义语言 ,create,drop,alter2.DML // 数据操作语言 ,insert,update,delete3.DQL // 数据查询语言 ,select4.DCL // 数据控制语言 ,grant,commit,rollback—————————-操作数据表中的数据记录 (DML)—————————-1.inserteg:insert into user(name) values(“user4”);2.updateupdate user set name=”user4” where id=4;//在mysql 中没有==，只有 =，即包含赋值，又包含比较update user set name=’user5’,age=20 where id=5;3.delete//必须加where 条件，如果不加 where全部删除，这个时候应该用 truncate清空数据delete from user where id&gt;=3 and id&lt;=5; 等同于 delete from user where id between 3 and 5;———————————数据查询语言（ DQL**）**–select 使用———————————1.选择特定的字段select id,name from user;//select from user;2.给字段取别名-asselect id,name from user;select id maoxian,name from user;select id as maoxian,name from user;3.distinct关键字的使用//取出唯一值select distinct age from user;4.使用where 条件进行查询select from user where id&gt;=3 and id&lt;=5;5.查询空值nullselect from user where age is null;select from user where age is not null;6.between and的使用方法select from user where id between 3 and 5;7.in的使用方法select from user where id=1 or id=2 or id=10;select * from user where id in(1,2,10); 建议使用这个8.like的使用方法//模糊查询,text 类型不能加索引% 匹配所有 匹配一个字符select from user where name like “%mysql%”; //% 在前，name这一列的索引会失效9.使用order by 对查询结果排序//排序，asc 和desc，一个是升序，一个降序select from user order by id asc; // 默认就是升序 ,数字从小到大select from user order by id desc; // 默认就是升序 ,数字从大到小10.使用limit 限定输出个数 (分页实现)select from user order by id limit 0,2;select from user order by id limit 5; //limit 0,5 前五个11.concat() 连接函数select concat(id,age) from user; # 输出的值为每一行中指点的列字符串相加。select concat(“aaa”,”bbb”,”cccc”); # 输出连接的字符串： aaabbbccc,如果没有双引号则误认为是字段，报错。12.rand() 随机数eg: select from user order by rand() limit 3;13.使用统计函数：count() 统计个数sum() 求和avg() 平均值max() 最大值min() 最小值eg:select count(id),sum(age),avg(age),max(id),min(id) from user;14.group by分组聚合的 使用-select结合合计函数，根据一个或多个列对结果集进行分组//分组 聚合//只分组没有意义，必须用函数去聚合 .eg: select banji,sum(score),count(id) from user group by banji; // 从班级表中统计每个班的总分数和总人数eg2:查找每个客户的总金额（总订单） :————————————O_Id OrderDate OrderPrice Customer1 2008/12/29 1000 Bush2 2008/11/23 1600 Carter3 2008/10/05 700 Bush4 2008/09/28 300 Bush5 2008/08/06 2000 Adams6 2008/07/21 100 Carter————————————执行语句： SELECT Customer,SUM(OrderPrice) FROM Orders GROUP BY Customer;结果集类似这样：————————-Customer SUM(OrderPrice)Bush 2000Carter 1700Adams 2000————————–—————————————数据查询语言（ DQL**）**2–select 的多表查询—————————————假如下面三种方法都能实现一种表，优先选择普通多表查询。1.普通多表查询1）两表查询mysql&gt; select user.id,user.name,user.score,user.banji,tel.num from user,tel where user.id=tel.uid;2）三表查询mysql&gt; select user.name,tel.num,qq.qq from user,tel,qq where user.id=tel.uid and user.id=qq.uid;2.嵌套查询| 子查询-inselect from user where id in(select uid from tel);3.左链接查询-left join onselect user.id,user.name,tel.num from user left join tel on user.id=tel.uid;//左链接以左边的表为主导，先输出左边表的所有数据，按条件输出右边表的内容，没有相对应的内容就为 null普通多表查询的三种方法，分别有什么区别：普通多表查询，查多个表，并且可以输出多个表的内容嵌套查询，查多个表，但只能输出一个表的内容左链接查询，查多个表，先把左边的表全部输出，右边的表按条件输出，否者输出 null==========================================复习 –**最常用的语法：*———————————–1.DDL 数据定义语言,create,drop,alter1)create database {database}2)create table {table}();2.DML 数据操作语言,insert,update,delete1）insert into 表名 [(字段 1,字段2, 字段n)] values (‘值 1’,’值2’,’ 值n’);2）update 表名 set 字段名 =表达式[, 字段n=表达式 n] [where 条件] [order by 字段] [limit 行数 ];3）delete from 表名 [where 条件 ] [order by 字段] [limit 行数];3.DQL 数据查询语言,selectselect [all|distinct] {|table.*|[table.]field[as alias1][,[table.]field2[as alias2][,…]]} from tableexpression[,…][in externaldatabase] [where…] [group by…] [having…] [order by…] [limit count];4.DCL 数据控制语言,grant,commit,rollback1）grant 权限 on 数据库 .数据表 to 用户@登录主机 indentified by “密码”]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[30天学习JS计划]]></title>
    <url>%2F2013%2F12%2F12%2Fjs-plan-for-30-days.html</url>
    <content type="text"><![CDATA[主要涉及学习内容: javascript原生API 1. 通读js原生态DOM，BOM，事件 2. 使用原生态JS写类库，弹窗类、级联类、slide轮播类 3. 原生js写ajax通信 jQuery框架使用 1. 通读jquery手册 2. 使用jquery UI 3. 使用jquery slide 4. 使用jq dialog 5. 更细的计划 计划可以有很多，在保证工作任务在按时按质量的情况下完成下，这一个月的主要空余时间就是用来温习和巩固js相关的知识。 test]]></content>
      <categories>
        <category>Journal</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[PHP对象类总结]]></title>
    <url>%2F2013%2F12%2F11%2Fphp-object-class-summary.html</url>
    <content type="text"><![CDATA[使用类的过程中遇到的N多总结下如下： 1、Fatal error: Cannot redeclare class的解决办法 从字面来看也很好理解，说明是重复定义了类，找了一下自己的代码，是因为存在同名的类导致的，修改了类名就好了。 判断代码： if (!class_exists(‘pageModule’)){ require_once(PATH_site.'fileadmin/scripts/class.page.php'); }]]></content>
      <categories>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Learn131210 Ajax小练习]]></title>
    <url>%2F2013%2F12%2F10%2Flearn131210-ajax-little-practice.html</url>
    <content type="text"><![CDATA[首先，在PHP端必须得知道的是需要用到的json_decode和json_encode. &nbsp;]]></content>
      <categories>
        <category>JavaScript</category>
        <category>jQuery</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[解决ECshop下jQuery冲突问题及其可能出现的问题]]></title>
    <url>%2F2013%2F12%2F08%2Ffixed-ecshop-jquery-compatibility-problems.html</url>
    <content type="text"><![CDATA[终于，今天把ecshop下的jquery问题彻底解决了。下面附上方法，建议都新建一群文件名为 *_jq.js的文件，如transpor.js我都改成transpor_jq.js,用来识别这是用js的json写的！ 1. 在transpor.js中去掉ec中重写json的方法： 约在450 到 735行间，看到注释有 “json.js 2007-03-06” 的地方就干掉他，如果发现有 *.prototype.toJSONString 类似的函数，总之在这段代码区间，发现prototype重写方法就干掉！ 2. 引入jquery文件： {insert_scripts files=’jquery.js,jquery.json-1.3.js’} 必须保证这段代码是在其他js前调用的！ 3. 替换ecshop原来用到转json数据的代码： 替换 .toJSONString() 为 $.toJSON()替换 .parseJSON() 为 $.evalJSON() 解决范例：a.在商品浏览页，用户评论这里：Ajax.call(‘comment.php’, ‘cmt=’ + cmt.toJSONString(), commentResponse, ‘POST’, ‘JSON’);替换为Ajax.call(‘comment.php’, ‘cmt=’ + $.toJSON(cmt), commentResponse, ‘POST’, ‘JSON’); b.index.js 里var res = result.parseJSON();替换为var res = $.evalJSON(result); &nbsp; 可能遇到的问题： 1. 如果遇到 transport.js/run() undified 弹窗报错，那么你需要在页面中加入这个代码： &lt;script type=”text/javascript”&gt; var process_request = “{$lang.process_request}”;&lt;/script&gt;&nbsp; 附件下载]]></content>
      <categories>
        <category>ECshop</category>
      </categories>
      <tags>
        <tag>ecshop</tag>
        <tag>jquery冲突</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Dev131208 百度API开发 - 多自定义坐标调用]]></title>
    <url>%2F2013%2F12%2F08%2Fdev-think-baidu-api-for-map.html</url>
    <content type="text"><![CDATA[任务背景：开发一个线下商城地图，由于客户没有在百度标记过商家地图，故添加标记的同时必须有自定义信息的标记。同时，一个城市列表中需要展现多个坐标。 任务分析： 1. 选择省份、城市会出现多个标记的点 2. 标记的点可以展现自定义信息。 &nbsp; 思路： &nbsp;]]></content>
      <categories>
        <category>Journal</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Ecshop数据导入时遇到问题 USING BTREE 错误解决办法]]></title>
    <url>%2F2013%2F12%2F08%2Fecshop-mysql-using-btree-error.html</url>
    <content type="text"><![CDATA[如果你优化过Mysql的数据结构或者版本不一致，那么极有可能遇到此类问题。 报USING BTREE 错误： You have an error in your SQL syntax; check themanual that corresponds to your MySQL server version for the right syntax to usenear ‘USING BTREE,UNIQUE KEY user_name (suppliers_name) USING BTREE ,&nbsp; 其实解决这个问题很简单。 打开要导入的文件在里面搜索 BTREE 找到如下内容 UNIQUE KEY user_name (suppliers_name) USING BTREE ，修改为 UNIQUE KEY user_name USING BTREE (suppliers_name) ， 即把USING BTREE 放到索引字段前面即可. 再次导入顺利通过了 &nbsp; 查找 USING BTREE mysql，你会看到很多这样的例子，mysql 5.14版本之前不认识 USING BTREE。解决办法有两个： 1、直接删除 USING BTREE 2、导出脚本时开启兼容性 mysqldump –compatible=mysql40 &nbsp; 批量找出USING BTREE，然后修改吧少年。。。 &nbsp; 以下几个关于USING BTREE 的链接： USING BTREE mysql http://stackoverflow.com/questions/3767753/mysql-error-using-btree 关于USING BTREE Bug http://bugs.mysql.com/bug.php?id=25162]]></content>
      <categories>
        <category>ECshop</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>ecshop</tag>
        <tag>USING BTREE</tag>
        <tag>数据库错误</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[研究开源系统]]></title>
    <url>%2F2013%2F12%2F05%2Fshare-open-code.html</url>
    <content type="text"><![CDATA[1. 调查问卷系统LimeSurvey 2. 博客 3. crm 4. cms 5. todo]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>php源码</tag>
        <tag>开源系统</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用Ecshop全局调用函数]]></title>
    <url>%2F2013%2F12%2F05%2Fecshop-global-function.html</url>
    <content type="text"><![CDATA[Ecshop的全局调用函数一般在后台商品设置中修改，另外如果需要添加自己定义的全局函数，就需要在后台的shop_configs表中添加新的内容，后台相对应的设置就会出现，下面暂只讨论ecshop系统默认的一些全局函数。 1.商店设置 {$shop_name} //店铺名字2012-08-17 13:11{$copyright} //版权信息{$shop_address} //商铺地址{$shop_postcode} //邮编{$service_phone} //电话{$service_email} //邮件 {foreach from=$qq item=im}{$im} {/foreach} //qq客服{foreach from=$ww item=im} {$im} {/foreach}//阿里旺旺客服{foreach from=$msn item=im}{$im} {/foreach} //MSN{$TemplatePath} //模版的路径 ：在lib库文件下才作用{$icp_number} //备案号{$stats_code} // 统计代码&nbsp; &nbsp; 产品或分类: {$goods.cat_name} //产品分类名字{$goods.goods_style_name} //产品属性{$goods.goods_brand} //产品品牌{$goods.goods_sn} //产品货号{$goods.shop_price_formated} //产品零售价{}dfd]]></content>
      <categories>
        <category>ECshop</category>
      </categories>
      <tags>
        <tag>ecshop</tag>
        <tag>常用全局函数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ecshop商品列表多种排序]]></title>
    <url>%2F2013%2F12%2F02%2Fecshop-goods-list-sort.html</url>
    <content type="text"><![CDATA[ecshop商品列表页面的按上架时间、价格、更新时间是默认的，现在需要添加的是按销量排行，但是在商品表里面没有销量的字段,最模板搜集整理提供如下办法：1：在表“ecs_goods”添加字段：salesnum2：打开根目录下文件：flow.php找到下面的代码： / 插入订单商品 /$sql = “INSERT INTO “ . $ecs-&gt;table(‘order_goods’) . “( “ .“order_id, goods_id, goods_name, goods_sn, product_id, goods_number, market_price, “.“goods_price, goods_attr, is_real, extension_code, parent_id, is_gift, goods_attr_id) “.“ SELECT ‘$new_order_id’, goods_id, goods_name, goods_sn, product_id, goods_number, market_price, “.“goods_price, goods_attr, is_real, extension_code, parent_id, is_gift, goods_attr_id”.“ FROM “ .$ecs-&gt;table(‘cart’) .“ WHERE session_id = ‘“.SESS_ID.”‘ AND rec_type = ‘$flow_type’”;$db-&gt;query($sql);在这段代码的下面，添加如下代码： / 插入商品表的salesnum 字段，统计销量排行 /$sql = “update “ .$GLOBALS[‘ecs’]-&gt;table(‘goods’) . “ AS a, “.$GLOBALS[‘ecs’]-&gt;table(‘cart’) . “ AS b “.“ set a.salesnum= a.salesnum + b.goods_number”.“ WHERE a.goods_id=b.goods_id AND b.session_id = ‘“.SESS_ID.”‘ AND b.rec_type = ‘$flow_type’”;$db-&gt;query($sql);打开文件：defaultlibrarygoods_list.lbi，找到下面的代码： &lt;a href=”category.php?category={$category}&amp;display={$pager.display}&amp;brand={$brand_id}&amp;price_min={$price_min}&amp;price_max={$price_max}&amp;filter_attr={$filter_attr}&amp;page={$pager.page}&amp;sort=last_update&amp;order=&lt;!– {if $pager.sort == ‘last_update’ &amp;&amp; $pager.order == ‘DESC’} –&gt;ASC&lt;!– {else} –&gt;DESC&lt;!– {/if} –&gt;#goods_list”&gt;&lt;img src=”images/lastupdate&lt;!– {if $pager.sort == ‘last_update’} –&gt;{$pager.order}&lt;!– {else} –&gt;default&lt;!– {/if} –&gt;.gif” alt=”{$lang.sort.last_update}”&gt;&lt;/a&gt;&nbsp; 下面添加 &lt;a href=”category.php?category={$category}&amp;display={$pager.display}&amp;brand={$brand_id}&amp;price_min={$price_min}&amp;price_max={$price_max}&amp;filter_attr={$filter_attr}&amp;page={$pager.page}&amp;sort=salesnum&amp;order=&lt;!– {if $pager.sort == ’salesnum’ &amp;&amp; $pager.order == ‘DESC’} –&gt;ASC&lt;!– {else} –&gt;DESC&lt;!– {/if} –&gt;#goodslist”&gt;&lt;img src=”images/sales&lt;!– {if $pager.sort == ’salesnum’} –&gt;{$pager.order}&lt;!– {else} –&gt;default&lt;!– {/if} –&gt;.gif” alt=”按销量排行”&gt;&lt;/a&gt;打开文件：category.php，找到如下代码： $sort = (isset($_REQUEST[‘sort’]) &amp;&amp; in_array(trim(strtolower($_REQUEST[‘sort’])), array(’goods_id’, ’shop_price’, ‘last_update’)))&nbsp; 修改为： $sort = (isset($_REQUEST[‘sort’]) &amp;&amp; in_array(trim(strtolower($_REQUEST[‘sort’])), array(’goods_id’, ’shop_price’, ‘last_update’,’salesnum’)))&nbsp; &nbsp; 参考网站: http://www.siqiji.com/show-39.html http://blog.csdn.net/huangqiaoling/article/details/8076453 http://www.yoozhan.com/ecshop/ecshop-66.html http://www.soucms.com/CMSjiaocheng/Ecshop/102.html]]></content>
      <categories>
        <category>ECshop</category>
      </categories>
      <tags>
        <tag>ecshop</tag>
        <tag>商品排序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[技术牛人资料]]></title>
    <url>%2F2013%2F11%2F29%2Fnote-awesome-gay.html</url>
    <content type="text"><![CDATA[链接: http://www.csto.com/u/qq1057789374/profile 简介：2009 /2–2013：爱丽国际科技(北京)有限公司（500-1000人）所属行业： 互联网/电子商务技术总监 (CTO)1.女性门户网站系统架构，平台核心代码的研发，PHP代码优化,Oracle、MYSQL数据库DBA结构优化,SQL语句执行效率优化，Linux系统调优，安全策略，高并发调优,数据库集群及调优,Nginx负载均衡及调优，其有关运维一系列应用软件的架设与调优。2.架设爱丽女性网运维监控体系，做到几十台机器的系统监控、平衡负载、调优、安全策略、文件同步、附件共享存储、图片缓存、数据库集群等稳定。负责爱丽女性网计算机IDC的规划与建设工作，研发团队的管理以及日常工作；3.团队建设及管理，下属的绩效制定与考核，设计与规划整个爱丽女性网平台的性能评估与性能测试整体工作，通过整体对于业务系统的模拟，操作系统层，数据库层，代码层的监控，高效的保证爱丽女性网平台各项业务发布的稳定与成功。汇报上级：总经理(CEO)直接下属：25-30人项目经验：爱丽女性网 http://www.aili.com本站访问量日PV两千万,日IP一百五十万,世界综合排名1386位。网站研发有CMS管理系统，高清图库系统，采集系统，投稿系统，论坛系统，过滤系统，问答系统，化妆品系统,商城系统，团购系统，会员通行证系统，流量统计系统等。2006 /11–2008 /12：康盛创想（北京）科技有限公司（500-1000人） [ 2年1个月]所属行业： 互联网/电子商务项目部 项目主管1.项目系统架构，PHP核心代码开发，PHP代码优化，Oracle、Mysql数据库DBA优化,项目调试环境配置,SVN版本控制管理,运维架设配置及调优。2.带领项目团队共同完成云南信息港的开发与运维架构,红孩子商城的开发与运维架构。3.团队建设与管理,下属绩效制定与考核，项目性能评估与性能测试整体工作，客户与团队协调与沟通，项目功能开发需求档撰写。汇报上级：项目部经理直接下属：8人离职原因：换个空间环境.项目经验：云南信息港 http://www.yninfo.com本站访问量日PV一千四百万,日IP一百一十万,世界综合排名1979位。网站研发有CMS管理系统，博客系统，空间系统，相册系统，旅游系统，娱乐系统，寻医问药系统，商城系统，团购系统，黄页系统，汽车系统，房产系统，求职招聘系统，邮件系统,货币交易系统，会员通行证系统，流量统计系统。2004 /9–2006 /9：联搜国际广告(北京)有限公司（150-500人） [ 2年]所属行业： 互联网/电子商务技术部 PHP研发工程师1.会员系统，资讯发布系统，广告发布系统的研发及升级维护。2.公司局域网管理与监控。汇报上级：技术部经理离职原因：换个发展空间项目经验：就要创业门户 http://www.91cy.cn本站访问量日PV五百万，日IP三十万,世界综合排名3789位。网站研发有广告发布系统，资讯发布系统，留言管理系统，模板系统，评论系统，会员系统统，流量统计系统。教育经历 2000 /9–2004 /7 鄂州大学 计算机科学与技术 本科毕业设计:开发一套图书管理系统其他信息 自我评价：1.计算机本科毕业，专业知识扎实，技术扎实2.在专业LAMP开发及管理八年，对团队建设与管理有一定的能力3.精通LAMP/LNMP系统架构，熟悉Erlang程序开发4.Linux系统管理、调优、安全策略、集群及一系列服务的优化及管理5.精通LAMP/LNMP高并发优化、Mysql结构及SQL语句优化、PHP代码优化、Apache优化、Nginx优化,Memcached，Redis分布式内存缓存技术，MongoDB分布式文件存储的数据库。6.精通各种集群均衡负载LVS、Haproxy、Nginx，各类图片代理缓存squid,varnish，各类服务器监控Cacti,Nagios架构及调优。 不谦虚的说一句： 在LAMP/LNMP PHP研发与架构等领域，是一名完全合格的资深系统架构师。]]></content>
      <categories>
        <category>hello</category>
      </categories>
      <tags>
        <tag>人脉</tag>
        <tag>技术圈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[知乎问答：和不太熟悉的女生吃饭时（有追求她的意愿），女方提出AA制，该不该接受？]]></title>
    <url>%2F2013%2F11%2F29%2Fshare-zhihu-collect.html</url>
    <content type="text"><![CDATA[【和不太熟悉的女生吃饭时（有追求她的意愿），女方提出AA制，该不该接受？】吴伟：兄弟啊，追姑娘是个集智力、情商、逻辑判断、观察能力、经济能力、体力和表达能力与一体综合性运动，针对于你的问题，我假设你经济没问题的基础上进行回… http://zhi.hu/IGq0 （分享自知乎网）]]></content>
      <categories>
        <category>未分类</category>
      </categories>
      <tags>
        <tag>约会</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux常用修改]]></title>
    <url>%2F2013%2F11%2F28%2Flinux-setting.html</url>
    <content type="text"><![CDATA[1. CentOS修改语言: 方法一: /etc/sysconfig/i18n 里面的LANG=”zh_CN.UTF-8” 修改为 LANG=”en_US.UTF-8” 方法二: 把/etc/sysconfig/i18n复制到要更改用户的主目录下 如: $ cp /etc/sysconfig/i18n ~home/.i18n, 再修改 方法三: 终端临时更改 export LANG=”zh_CN.GBK” //中文显示export LANG=”en_US.UTF-8” //英文显示&nbsp; &nbsp; &nbsp; &nbsp;]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[杂志网站相关研究]]></title>
    <url>%2F2013%2F11%2F27%2Fshare-magzine-website.html</url>
    <content type="text"><![CDATA[1.http://weecai.com/journal.htm]]></content>
      <categories>
        <category>Research</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[协作开发用的应用]]></title>
    <url>%2F2013%2F11%2F27%2Fshare-teamwork-software.html</url>
    <content type="text"><![CDATA[一. 代码管理软件 http://www.sourcetreeapp.com/ &nbsp; &nbsp; 二. 网页协作管理工具 国内: https://tower.im/ &nbsp; 国外: https://trello.com/]]></content>
      <categories>
        <category>App</category>
      </categories>
      <tags>
        <tag>协同开发</tag>
        <tag>应用</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL删除重复记录]]></title>
    <url>%2F2013%2F11%2F26%2Fmysql-delete-duplicate-records.html</url>
    <content type="text"><![CDATA[网上查了很多关于删mysql中重复记录的方法,很多都是copy且没有经过大脑思考的文章,太浪费时间了,故经过自己测试,给出下面一些语句 DELETE books AS a FROM books AS a,(SELECT *FROM booksGROUP BY book_nameHAVING count(1) &gt;1order by null) AS bWHERE a.book_name = b.book_name AND a.id &gt; b.id;&nbsp; 参考文档 http://stackoverflow.com/questions/16035495/you-cant-specify-target-table-for-update-in-from-clause http://www.cnblogs.com/sunss/archive/2011/01/29/1947469.html http://www.cnblogs.com/lorgine/archive/2011/01/14/1935447.html]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>删除重复语句</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS lnmp环境搭建SVN服务]]></title>
    <url>%2F2013%2F11%2F24%2Flinux-centos-svn.html</url>
    <content type="text"><![CDATA[安装svn相关基础环境说明：环境：CentOS 6.3原有服务环境：lnmpa 1.0 full 安装svn的版本： subversion 1.8.3由于lnmpa编译的时候没有安上–enable-dav 故svn使用不了httpd的服务，我们只用svn协议来访问同步好后再执行钩子程序同步到虚拟空间下做网站服务。 安装步骤： 各个安装包说明：1.self 1.2.1 推荐版本，1.3.0后面会出现报错。Subversion 1.8中http客户端基于neon已经被移除如果要支持http方式需要在安装svn前安装serf，安装serf推荐用serf-1.2.12.apr、apr-unit安装apr、apr-unit # cd /root/lamp/source wget http://archive.apache.org/dist/apr/apr-1.4.8.tar.gz #LAMP中已经下载wget http://archive.apache.org/dist/apr/apr-util-1.5.2.tar.gztar xzf apr-1.4.8.tar.gzcd apr-1.4.8./configure –prefix=/usr/local/apachemake &amp;&amp; make installcd ../tar xzf apr-util-1.5.2.tar.gzcd apr-util-1.5.2./configure –prefix=/usr/local/apachemake &amp;&amp; make installcd ../2.安装serf-1.2.1 （需要httpd服务才安装，下面只是参考，将不进行安装） # yum -y install expat-devel wget http://serf.googlecode.com/files/serf-1.2.1.tar.bz2 #serf-1.2.1.zip是win版有问题tar xjf serf-1.2.1.tar.bz2cd serf-1.2.1./configure –prefix=/usr/local/serf –with-apr=/usr/local/apache –with-apr-util=/usr/local/apachemake &amp;&amp; make installcd ..&nbsp; 3.安装svn # wget http://mirror.bit.edu.cn/apache/subversion/subversion-1.8.3.tar.gz tar xzf subversion-1.8.3.tar.gzcd subversion-1.8.1./get-deps.sh //此步骤会等比较久，是配置svn服务库的脚步，完成后会出现如下提醒 If you require mod_dav_svn, the recommended version of httpd is:http://archive.apache.org/dist/httpd/httpd-2.4.6.tar.bz2 If you require apr-iconv, its recommended version is:http://archive.apache.org/dist/apr/apr-iconv-1.2.1.tar.bz2 ./configure –prefix=/usr/local/subversion –with-apxs=/usr/local/apache/bin/apxs –with-apr=/usr/local/apache –with-apr-util=/usr/local/apache –with-zlib –with-openssl –enable-maintainer-mode –with-serf=/usr/local/serf –enable-mod-activationmake &amp;&amp; make installcd ..&nbsp; 4. 检测svn是否安装成功 # vim /usr/local/apache/conf/httpd.conf LoadModule dav_svn_module /usr/local/subversion/libexec/mod_dav_svn.soLoadModule authz_svn_module /usr/local/subversion/libexec/mod_authz_svn.so&nbsp; 5.把svn相关的命令添加到环境变量中 / 方法一 / ln -s /usr/local/subversion/bin/svn /usr/local/bin//这样在ssh中直接输入 svn –version就可以看到svn的版本等信息了/ 方法二 (未测试) / echo “export PATH=$PATH:/usr/local/subversion/bin/“ &gt;&gt; /etc/profilesource /etc/profile* svn项目配置 建立仓库 # mkdir -p /opt/svn/ mkdir -p /opt/svn/svntest/svnadmin create /opt/svn/svntest/或 /usr/local/subversion/bin/svnadmin create /opt/svn/mall/ /修改配置文件/ cd /opt/svn/svntest/conf/vi svnserve.conf [general]anon-access = noneauth-access = writepassword-db = passwd authz-db = authzvim authz //给svntest仓库添加一个用户，权限为可写。 [svntest:/] testuser = rwvi passwd//由于是测试，密码设置为123456testuser = 123456//设置好后启用svn服务 svnserve -d -r /opt/svn/或 /usr/local/subversion/bin/svnserve -d -r /opt/svn///添加到开机启动 vim /etc/rc.d/rc.local然后写入上面的代码 //查看是否启用了 netstat -tunlp | grep svnps -aux|grep svn//杀死进程 kill -9 node* SVN钩子程序设置 说明：首先要在网站目录下检出文件 svn checkout svn://42.51.133.35/zoy/ /home/wwwroot/zoy.ch.boxcore.org/svn update /home/wwwroot/zoy.ch.boxcore.org/vim /opt/svn/zoy/hooks/post-commit #!/bin/shSVN=/usr/local/subversion/bin/svnWEB=/home/wwwroot/zoy.ch.boxcore.org$SVN update $WEB –username 用户名 –password 密码 chown -R www:www $WEBchmod 777 /opt/svn/zoy/hooks/post-commit&nbsp; 参考文档:http://blog.csdn.net/xiaodanpeng/article/details/8898794http://lookdfw.blog.163.com/blog/static/58249742201010652235834/http://chenxiao18.blog.51cto.com/1144683/1196264 《对apache做./configure 增加参数支持svnhttp://freeloda.blog.51cto.com/2033581/1189145 《SVN 安装与配置 http://www.open.collab.net/scdocs/ddUsingSVN_command-line.html.zh-cn 《linux下svn命令]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>centos</tag>
        <tag>svn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx下重写规则]]></title>
    <url>%2F2013%2F11%2F22%2Fnginx-rewrite-rule.html</url>
    <content type="text"><![CDATA[推荐使用自动转换工具: http://www.anilcetin.com/convert-apache-htaccess-to-nginx/ http://winginx.com/htaccess &nbsp; Nginx Rewrite规则相关指令Nginx Rewrite规则相关指令有if、rewrite、set、return、break等，其中rewrite是最关键的指令。一个简单的Nginx Rewrite规则语法如下： rewrite ^/b/(.*).html /play.php?video=$1 break; 如果加上if语句，示例如下： if (!-f $request_filename) rewrite ^/img/(.*)$ /site/$host/images/$1 last; Nginx与Apache的Rewrite规则实例对比 简单的Nginx和Apache 重写规则区别不大，基本上能够完全兼容。例如： Apache Rewrite 规则： RewriteRule ^/(mianshi|xianjing)/$ /zl/index.php?name=$1 [L] RewriteRule ^/ceshi/$ /zl/ceshi.php [L] RewriteRule ^/(mianshi)([a-zA-Z]+)/$ /zl/index.php?name=$1$2 [L] RewriteRule ^/pingce([0-9]*)/$ /zl/pingce.php?id=$1 [L] Nginx Rewrite 规则： rewrite ^/(mianshi|xianjing)/$ /zl/index.php?name=$1 last; rewrite ^/ceshi/$ /zl/ceshi.php last; rewrite ^/(mianshi)([a-zA-Z]+)/$ /zl/index.php?name=$1$2 last; rewrite ^/pingce([0-9]*)/$ /zl/pingce.php?id=$1 last; 由以上示例可以看出，Apache的Rewrite规则改为Nginx的Rewrite规则，其实很简单：Apache的RewriteRule指令换成Nginx的rewrite指令，Apache的[L]标记换成Nginx的last标记，中间的内容不变。 如果Apache的Rewrite规则改为Nginx的Rewrite规则后，使用nginx -t命令检查发现nginx.conf配置文件有语法错误，那么可以尝试给条件加上引号。例如一下的Nginx Rewrite规则会报语法错误： rewrite ^/([0-9]{5}).html$ /x.jsp?id=$1 last; 加上引号就正确了：rewrite “^/([0-9]{5}).html$” /x.jsp?id=$1 last; Apache与Nginx的Rewrite规则在URL跳转时有细微的区别： Apache Rewrite 规则：RewriteRule ^/html/tagindex/([a-zA-Z]+)/.*$ /$1/ [R=301,L] Nginx Rewrite 规则：rewrite ^/html/tagindex/([a-zA-Z]+)/.*$ http://$host/$1/ permanent; 以上示例中，我们注意到，Nginx Rewrite 规则的置换串中增加了“http://$host”，这是在Nginx中要求的。 另外，Apache与Nginx的Rewrite规则在变量名称方面也有区别，例如： Apache Rewrite 规则：RewriteRule ^/user/login/$ /user/login.php?login=1&amp;forward=http://%{HTTP_HOST} [L] Nginx Rewrite 规则：rewrite ^/user/login/$ /user/login.php?login=1&amp;forward=http://$host last; Apache与Nginx Rewrite 规则的一些功能相同或类似的指令、标记对应关系： Apache的RewriteCond指令对应Nginx的if指令；Apache的RewriteRule指令对应Nginx的rewrite指令；Apache的[R]标记对应Nginx的redirect标记；Apache的[P]标记对应Nginx的last标记；Apache的[R,L]标记对应Nginx的redirect标记；Apache的[P,L]标记对应Nginx的last标记；Apache的[PT,L]标记对应Nginx的last标记； 允许指定的域名访问本站，其他域名一律跳转到http://www.aaa.com Apache Rewrite 规则：RewriteCond %{HTTP_HOST} ^(.*?).domain.com$RewriteCond %{HTTP_HOST} !^qita.domain.com$RewriteCond %{DOCUMENT_ROOT}/market/%1/index.htm -fRewriteRule ^/wu/$ /market/%1/index.htm [L] Nginx的if指令不支持嵌套，也不支持AND、OR等多条件匹配，相比于Apache的RewriteCond，显得麻烦一些，但是，我们可以通过下一页的Nginx配置写法来实现这个示例： Nginx Rewrite 规则：if ($host ~ ^(.?).domain.com$) set $var_wupin_city $1;set $var_wupin ‘1′; if ($host ~* ^qita.domain.com$) set $var_wupin ‘0′; if (!-f $document_root/market/$var_wupin_city/index.htm) set $var_wupin ‘0′; if ($var_wupin ~ ‘1′) rewrite ^/wu/$ /market/$var_wupin_city/index.htm last;} &nbsp; rewrite 的语法 &nbsp; 语法: rewrite regex replacement flag 默认: none 作用域: server, location, if This directive changes URI in accordance with the regular expression and the replacement string. Directives are carried out in order of appearance in the configuration file. 这个指令根据表达式来更改URI，或者修改字符串。指令根据配置文件中的顺序来执行。 Be aware that the rewrite regex only matches the relative path instead of the absolute URL. If you want to match the hostname, you should use an if condition, like so: 注意重写表达式只对相对路径有效。如果你想配对主机名，你应该使用if语句。 rewrite只是会改写路径部分的东东，不会改动用户的输入参数，因此这里的if规则里面，你无需关心用户在浏览器里输入的参数，rewrite后会自动添加的，因此，我们只是加上了一个？号和后面我们想要的一个小小的参数 *https=1就可以了。 nginx的rewrite规则参考： ~ 为区分大小写匹配~ 为不区分大小写匹配!~和!~分别为区分大小写不匹配及不区分大小写不匹-f和!-f用来判断是否存在文件-d和!-d用来判断是否存在目录-e和!-e用来判断是否存在文件或目录-x和!-x用来判断文件是否可执行last 相当于Apache里的[L]标记，表示完成rewrite，呵呵这应该是最常用的break 终止匹配, 不再匹配后面的规则redirect 返回302临时重定向 地址栏会显示跳转后的地址permanent 返回301永久重定向 地址栏会显示跳转后的地址$args$content_length$content_type$document_root$document_uri$host$http_user_agent$http_cookie$limit_rate$request_body_file$request_method$remote_addr$remote_port$remote_user$request_filename$request_uri$query_string$scheme$server_protocol$server_addr$server_name$server_port$uri结合QeePHP的例子 if (!-d $request_filename) {rewrite ^/([a-z-A-Z]+)/([a-z-A-Z]+)/?(.*)$ /index.php?namespace=user&amp;amp;controller=$1&amp;amp;action=$2&amp;amp;$3 last;rewrite ^/([a-z-A-Z]+)/?$ /index.php?namespace=user&amp;amp;controller=$1 last;break;多目录转成参数abc.domian.com/sort/2 =&gt; abc.domian.com/index.php?act=sort&amp;name=abc&amp;id=2 if ($host ~ (.).domain.com) {set $sub_name $1;rewrite ^/sort/(d+)/?$ /index.php?act=sort&amp;cid=$sub_name&amp;id=$1 last;}目录对换/123456/xxxx -&gt; /xxxx?id=123456 rewrite ^/(d+)/(.+)/ /$2?id=$1 last;例如下面设定nginx在用户使用ie的使用重定向到/nginx-ie目录下： if ($http_user_agent ~ MSIE) {rewrite ^(.*)$ /nginx-ie/$1 break;}目录自动加“/” if (-d $request_filename){rewrite ^/(.*)([^/])$ http://$host/$1$2/ permanent;}禁止htaccess location ~/.ht {deny all;}禁止多个目录 location ~ ^/(cron|templates)/ {deny all;break;}禁止以/data开头的文件可以禁止/data/下多级目录下.log.txt等请求; location ~ ^/data {deny all;}禁止单个目录不能禁止.log.txt能请求 location /searchword/cron/ {deny all;}禁止单个文件 location ~ /data/sql/data.sql {deny all;}给favicon.ico和robots.txt设置过期时间;这里为favicon.ico为99天,robots.txt为7天并不记录404错误日志 location ~(favicon.ico) {log_not_found off;expires 99d;break;} location ~(robots.txt) {log_not_found off;expires 7d;break;}设定某个文件的过期时间;这里为600秒，并不记录访问日志 location ^~ /html/scripts/loadhead_1.js {access_log off;root /opt/lampp/htdocs/web;expires 600;break;}文件反盗链并设置过期时间这里的return 412 为自定义的http状态码，默认为403，方便找出正确的盗链的请求“rewrite ^/ http://leech.divmy.com/leech.gif;”显示一张防盗链图片“access_log off;”不记录访问日志，减轻压力“expires 3d”所有文件3天的浏览器缓存 location ~ ^.+.(jpg|jpeg|gif|png|swf|rar|zip|css|js)$ {valid_referers none blocked .c1gstudio.com *.c1gstudio.net localhost 208.97.167.194;if ($invalid_referer) {rewrite ^/ http://leech.divmy.com/leech.gif;return 412;break;}access_log off;root /opt/lampp/htdocs/web;expires 3d;break;}只充许固定ip访问网站，并加上密码 root /opt/htdocs/www;allow 208.97.167.194;allow 222.33.1.2;allow 231.152.49.4;deny all;auth_basic “C1G_ADMIN”;auth_basic_user_file htpasswd;将多级目录下的文件转成一个文件，增强seo效果/job-123-456-789.html 指向/job/123/456/789.html rewrite ^/job-([0-9]+)-([0-9]+)-([0-9]+).html$ /job/$1/$2/jobshow_$3.html last;将根目录下某个文件夹指向2级目录如/shanghaijob/ 指向 /area/shanghai/如果你将last改成permanent，那么浏览器地址栏显是/location/shanghai/ rewrite ^/([0-9a-z]+)job/(.*)$ /area/$1/$2 last;上面例子有个问题是访问/shanghai 时将不会匹配 rewrite ^/([0-9a-z]+)job$ /area/$1/ last;rewrite ^/([0-9a-z]+)job/(.*)$ /area/$1/$2 last;这样/shanghai 也可以访问了，但页面中的相对链接无法使用，如./list_1.html真实地址是/area/shanghia/list_1.html会变成/list_1.html,导至无法访问。 那我加上自动跳转也是不行咯(-d $request_filename)它有个条件是必需为真实目录，而我的rewrite不是的，所以没有效果 if (-d $request_filename){rewrite ^/(.*)([^/])$ http://$host/$1$2/ permanent;}知道原因后就好办了，让我手动跳转吧 rewrite ^/([0-9a-z]+)job$ /$1job/ permanent;rewrite ^/([0-9a-z]+)job/(.*)$ /area/$1/$2 last;文件和目录不存在的时候重定向： if (!-e $request_filename) {proxy_pass http://127.0.0.1;}域名跳转 server{listen 80;server_name jump.88dgw.com;index index.html index.htm index.php;root /opt/lampp/htdocs/www;rewrite ^/ http://www.88dgw.com/;access_log off;}多域名转向 server_name www.7oom.com/ www.divmy.com/;index index.html index.htm index.php;root /opt/lampp/htdocs;if ($host ~ “c1gstudio.net”) {rewrite ^(.*) http://www.7oom.com$1/ permanent;}三级域名跳转 if ($http_host ~ “^(.).i.c1gstudio.com$”) {rewrite ^(.*) http://top.88dgw.com$1/;break;}域名镜向 server{listen 80;server_name mirror.c1gstudio.com;index index.html index.htm index.php;root /opt/lampp/htdocs/www;rewrite ^/(.*) http://www.divmy.com/$1 last;access_log off;}某个子目录作镜向 location ^~ /zhaopinhui {rewrite ^.+ http://zph.divmy.com/ last;break;}discuz ucenter home (uchome) rewrite rewrite ^/(space|network)-(.+).html$ /$1.php?rewrite=$2 last;rewrite ^/(space|network).html$ /$1.php last;rewrite ^/([0-9]+)$ /space.php?uid=$1 last;discuz 7 rewrite rewrite ^(.)/archiver/((fid|tid)-[w-]+.html)$ $1/archiver/index.php?$2 last;rewrite ^(.)/forum-([0-9]+)-([0-9]+).html$ $1/forumdisplay.php?fid=$2&amp;page=$3 last;rewrite ^(.)/thread-([0-9]+)-([0-9]+)-([0-9]+).html$ $1/viewthread.php?tid=$2&amp;extra=page%3D$4&amp;page=$3 last;rewrite ^(.)/profile-(username|uid)-(.+).html$ $1/viewpro.php?$2=$3 last;rewrite ^(.)/space-(username|uid)-(.+).html$ $1/space.php?$2=$3 last;rewrite ^(.)/tag-(.+).html$ $1/tag.php?name=$2 last;给discuz某版块单独配置域名 server_name bbs.c1gstudio.com news.c1gstudio.com; location = / {if ($http_host ~ news.divmy.com$) {rewrite ^.+ http://news.divmy.com/forum-831-1.html last;break;}}discuz ucenter 头像 rewrite 优化 location ^~ /ucenter {location ~ .*.php?${ #fastcgi_pass unix:/tmp/php-cgi.sock;fastcgi_pass 127.0.0.1:9000;fastcgi_index index.php;include fcgi.conf;} location /ucenter/data/avatar {log_not_found off;access_log off;location ~ /(.)_big.jpg$ {error_page 404 /ucenter/images/noavatar_big.gif;}location ~ /(.)_middle.jpg$ {error_page 404 /ucenter/images/noavatar_middle.gif;}location ~ /(.*)_small.jpg$ {error_page 404 /ucenter/images/noavatar_small.gif;}expires 300;break;}}jspace rewrite location ~ .*.php?${ #fastcgi_pass unix:/tmp/php-cgi.sock;fastcgi_pass 127.0.0.1:9000;fastcgi_index index.php;include fcgi.conf;} location ~ ^/index.php/{rewrite ^/index.php/(.) /index.php?$1 break;fastcgi_pass 127.0.0.1:9000;fastcgi_index index.php;include fcgi.conf;}另外这里还有一个工具可以直接把apache规则转化为nginx规则 http://www.anilcetin.com/convert-apache-htaccess-to-nginx/ 参考： http://wiki.nginx.org/NginxChsHttpRewriteModule http://blog.csdn.net/cnbird2008/archive/2009/08/04/4409620.aspx http://www.divmy.com/]]></content>
      <categories>
        <category>RexExp</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>rewrite</tag>
        <tag>重写</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ecshop模板smarty foreach详解]]></title>
    <url>%2F2013%2F11%2F22%2Fecshop-smarty-foreach-usage.html</url>
    <content type="text"><![CDATA[&nbsp; &nbsp; Smarty目录:/libs Smarty的功能类目录/tempalates 模板文件目录/templates_c 模板缓存文件目录/configs 配置文件目录/cache 缓存文件目录载入Smarty功能类：require(’路径/Smarty.class.php’);$smarty = new Smarty;自定义Smarty工作目录:$smarty-&gt;template_dir = ‘路径/templates/’;$smarty-&gt;compile_dir = ‘路径/templates_c/’;$smarty-&gt;config_dir = ‘路径/configs/’;$smarty-&gt;cache_dir = ‘路径/cache/’;常用语法:$smarty-&gt;assign(’模板中的变量名’, 值); //给模板中的变量赋值(可以是数组或对象)$smarty-&gt;display(’模板文件名’); //输出模板常用标签语法：所有的smarty模板标签都被加上了定界符, 默认情况下是 { 和 }注释：{ 注释内容 }函数：{函数名称[ 参数名1=值1[ 参数名2=值2]]}变量: {$变量名}数组: {$数组名.元素名} 或 {$数组名.[元素索引]}对象：{$对象名-&gt;属性名}从配置文件引用的变量:配置文件名为: .conf在模板中引入：{config_load file=”配置文件名.conf”}在模板中的变理标签：变量调节器:{$变量名|调节器名} //用于变量{”字符串”|调节器名} //用于字符串{函数名|调节器名 函数的参数名=值} //用于函数{$变量名|调节器名1[|调节器名2|…]} //使用多个调节器‘{’字符: {ldelim}‘}’字符: {rdelim}原文输出：{literal}{/literal} 里面的文本内容将不会被模板引擎解析,原样输出在模板中直接写PHP语句: {php}php语句;{/php}条件:为了简单，条件表达式与PHP中相同即可.{if 条件表达式1}内容1[{elseif 条件表达式2}内容2{else}内容3]{/if}循环:{foreach from=$数组名 item=当前处理元素的变量名称[ key=当前处理元素的键名][ name=用于嵌套中的名称必须唯一]}循环体…{$当前处理元素的变量名称} { //遍历数组时元素的引用 *}{/foreach}缓存:$smarty = new Smarty;$smarty-&gt;caching = 2; //缓存设置,值为: 0,关闭缓存(默认) 1,开启缓存(缓存默认时间为3600秒) 2,指定缓存的时间$smarty-&gt;cache_lifetime = 3600; //设置缓存时间,单位秒。$smarty-&gt;display(’index.tpl’); ecshop模板smarty foreach详解{foreach},{foreachelse}{foreach} 用于像循环访问一个数字索引数组一样循环访问一个关联数组，与仅能访问数字索引数组的{section}不同，{foreach}的语法比 {section}的语法简单得多，但是作为一个折衷方案也仅能用于单个数组。每个{foreach}标记必须与关闭标记{/foreach}成对出现。属性1、from 类型：array数组 必要性：Yes必要 默认值：n/a 描述：循环访问的数组2、item 类型：string字符串 必要性：Yes必要 默认值：n/a 描述：当前元素的变量名3、key 类型：string字符串 必要性：No可选 默认值：n/a 描述：当前键名的变量名4、name 类型：string字符串 必要性：No可选 默认值：n/a 描述：用于访问foreach属性的foreach循环的名称from和item是必要属性{foreach}循环的name可以是任何字母，数组，下划线的组合，参考PHP变量。{foreach}循环可以嵌套，嵌套的{foreach}的名称应当互不相同。from属性通常是值数组，被用于判断{foreach}的循环次数。在from变量中没有值时，将执行{foreachelse}。{foreach}循环也有自身属性的变量，可以通过{$smarty.foreach.name.property}访问，其中”name”是name属性。注意：name属性仅在需要访问{foreach}属性时有效，与{section}不同。访问未定义name的{foreach}属性不会抛出一个错误，但将导致不可预知的结果。{foreach}属性有index, iteration, first, last, show, total.示例：例一. item属性&lt;?php$arr = array(1000, 1001, 1002);$smarty-&gt;assign(‘myArray’, $arr);?&gt;用模板以无序列表输出$myArray&lt;ul&gt;{foreach from=$myArray item=foo}&lt;li&gt;{$foo}&lt;/li&gt;{/foreach}&lt;/ul&gt;上例将输出：&lt;ul&gt;&lt;li&gt;1000&lt;/li&gt;&lt;li&gt;1001&lt;/li&gt;&lt;li&gt;1002&lt;/li&gt;&lt;/ul&gt;例二. 演示item和key属性&lt;?php$arr = array(9 =&gt; ‘Tennis’, 3 =&gt; ‘Swimming’, 8 =&gt; ‘Coding’);$smarty-&gt;assign(‘myArray’, $arr);?&gt;用模板按键名/键值对的形式输出$myArray, 类似于PHP的foreach。&lt;ul&gt;{foreach from=$myArray key=k item=v}&lt;li&gt;{$k}: {$v}&lt;/li&gt;{/foreach}&lt;/ul&gt;上例将输出：&lt;ul&gt;&lt;li&gt;9: Tennis&lt;/li&gt;&lt;li&gt;3: Swimming&lt;/li&gt;&lt;li&gt;8: Coding&lt;/li&gt;&lt;/ul&gt;例三. {foreach}的item属性是关联数组&lt;?php$items_list = array(23 =&gt; array(‘no’ =&gt; 2456, ‘label’ =&gt; ‘Salad’),96 =&gt; array(‘no’ =&gt; 4889, ‘label’ =&gt; ‘Cream’));$smarty-&gt;assign(‘items’, $items_list);?&gt;模板中，url通过$myId输出$items&lt;ul&gt;{foreach from=$items key=myId item=i}&lt;li&gt;&lt;a href=”item.php?id={$myId}”&gt;{$i.no}: {$i.label}&lt;/li&gt;{/foreach}&lt;/ul&gt;上例将输出：&lt;ul&gt;&lt;li&gt;&lt;a href=”item.php?id=23”&gt;2456: Salad&lt;/li&gt;&lt;li&gt;&lt;a href=”item.php?id=96”&gt;4889: Cream&lt;/li&gt;&lt;/ul&gt;例四. {foreach}使用嵌套的item和key向Smarty设置一个数组，对于每个键名对应的每个循环值都包括键。&lt;?php$smarty-&gt;assign(‘contacts’, array(array(‘phone’ =&gt; ‘1’,‘fax’ =&gt; ‘2’,‘cell’ =&gt; ‘3’),array(‘phone’ =&gt; ‘555-4444’,‘fax’ =&gt; ‘555-3333’,‘cell’ =&gt; ‘760-1234’)));?&gt;用于输出$contact的模板。{foreach name=outer item=contact from=$contacts}&lt;hr /&gt;{foreach key=key item=item from=$contact}{$key}: {$item}&lt;br /&gt;{/foreach}{/foreach}上例将输出：&lt;hr /&gt;phone: 1&lt;br /&gt;fax: 2&lt;br /&gt;cell: 3&lt;br /&gt;&lt;hr /&gt;phone: 555-4444&lt;br /&gt;fax: 555-3333&lt;br /&gt;cell: 760-1234&lt;br /&gt;例五. 使用{foreachelse}的数据库示例一个数据库（例如PEAR或ADODB）的搜索脚本示例，&lt;?php$search_condition = “where name like ‘$foo%’ “;$sql = ‘select contact_id, name, nick from contacts ‘.$search_condition.’ order by name’;$smarty-&gt;assign(‘results’, $db-&gt;getAssoc($sql) );?&gt;借助{foreachelse}标记在没有结果时模板输出”None found”字样。{foreach key=cid item=con from=$results}&lt;a href=”contact.php?contact_id={$cid}”&gt;{$con.name} - {$con.nick}&lt;/a&gt;&lt;br /&gt;{foreachelse}No items were found in the search{/foreach}.index包含当前数组索引，从零开始。例六. index示例{ 每五行输出一次头部区块 }&lt;table&gt;{foreach from=$items key=myId item=i name=foo}{if $smarty.foreach.foo.index % 5 == 0}&lt;tr&gt;&lt;th&gt;Title&lt;/th&gt;&lt;/tr&gt;{/if}&lt;tr&gt;&lt;td&gt;{$i.label}&lt;/td&gt;&lt;/tr&gt;{/foreach}&lt;/table&gt;iteration包含当前循环次数，与index不同，从1开始，每次循环增长1。例七. iteration和index示例{ this will output 0|1, 1|2, 2|3, … etc }{ 该例将输出0|1, 1|2, 2|3, … 等等 }{foreach from=$myArray item=i name=foo}{$smarty.foreach.foo.index}|{$smarty.foreach.foo.iteration},{/foreach}first在当前{foreach}循环处于初始位置时值为TRUE。例八. first属性示例{ 对于第一个条目显示LATEST而不是id }&lt;table&gt;{foreach from=$items key=myId item=i name=foo}&lt;tr&gt;&lt;td&gt;{if $smarty.foreach.foo.first}LATEST{else}{$myId}{/if}&lt;/td&gt;&lt;td&gt;{$i.label}&lt;/td&gt;&lt;/tr&gt;{/foreach}&lt;/table&gt;last在当前{foreach}循环处于最终位置是值为TRUE。例九. last属性示例{ 在列表结束时增加一个水平标记 }){foreach from=$items key=part_id item=prod name=products}&lt;a href=”#{$part_id}”&gt;{$prod}&lt;/a&gt;{if $smarty.foreach.products.last}&lt;hr&gt;{else},{/if}{foreachelse}… content …{/foreach}show是{foreach}的参数. show是一个布尔值。如果值为FALSE，{foreach}将不被显示。如果有对应的{foreachelse}，将被显示。total包括{foreach}将循环的次数，既可以在{foreach}中使用，也可以在之后使用。例十. total属性示例{ 在结束位置显示行数 }{foreach from=$items key=part_id item=prod name=foo}{$prod.name&gt;&lt;hr/&gt;{if $smarty.foreach.foo.last}&lt;div id=”total”&gt;{$smarty.foreach.foo.total} items&lt;/div&gt;{/if}{foreachelse}… something else ecshop模板smarty foreach详解{/foreach}问题{foreach from=$custid item=curr_id key=num}{if num is odd}干啥{else}干其他的{/if}{/foreach}与以下的代码的区别，odd和enen的意义？{foreach from=$custid item=curr_id key=num}{if num%2==0}干啥{else}干其他的{/if}{/foreach} 使用ecshop比较核心的其实就是变量的使用，因为这些就是数据的根本，想从数据库里获取数据并显示在界面就必须使用smarty来展示，下面是关于smarty的介绍和使用。Smarty是一个php模板引擎,它分开了逻辑程序和外在的内容,提供了一种易于管理的方法.Smarty要求web服务器运行php4.0.6和以上版本.smarty安装需要smarty库文件。可以去官方网站http://smarty.php.net下载。网上讲了很多安装的教程，但是我都没有成功，所以直接把整个目录名改为smarty直接复制到了网站所在的目录下，然后打开http://网站路径/smarty/demo/index.php，显示正常，应该算是安装成功了。基本语法所有的smarty标签都被加上了定界符.在smarty里,所有定界符以外的内容都是静态的,当smarty遇到了模板标签,将尝试解释他们,然后再以恰当的方式输出.默认情况下是 {和},但它们是可定制的.定制方法是：$smarty-&gt;left_delimiter = ‘&lt;!–{‘;$smarty-&gt;right_delimiter = ‘}–&gt;’;1.注释模板注释被号包围,例如 { this is a comment *}smarty注释将不被输出.它是模板内在的注释.2.变量模板变量以$开头，可以包含数字，字母和下划线。config_file变量是例外要用#变量名#的方法引用3.函数smarty标签输出一个变量或者调用某种函数.在定界符内函数和其属性将被处理和输出.例如:{funcname attr1=”val” attr2=”val”}.funcname为函数的名称比如：include等，attr1，attr2为属性名，val为属性相应的值。在模板里无论是内建函数还是自定义函数都有相同的语法.内建函数将在smarty内部工作,例如 {if}, {section} 和{strip}.他们不能被修改.自定义函数通过插件机制起作用,它们是附加函数,可以随意修改，自行添加.例如 {html_options} and {html_select_date}4.属性静态数值不需要加引号,布尔值(真或假)也不需要引号,可以是true,on,yes或者false,off,no. 但是字符串例外.变量同样被用到了,它们也不能加引号.5.在字符串中插入变量只能识别数字，字母，下划线和[]的组合，如果为复杂的形式需要用`将变量隔起来。比如{func var=&quot;test $foo.bar test&quot;} 中只能识别变量$foo,要识别$foo.bar,需要写成{func var=&quot;test$foo.bartest&quot;}的格式。 6.一些保留字的显示方法 在模板中如果要将smarty的一些保留字作为语言的内容显示出来，比如显示分隔符，默认为{}的方法是： {ldelim},{rdelim} 或者{$smarty.ldelim},{$smarty.rdelim} 或者可以把{}放在{literal} .. {/literal} 中间输出。 smarty的保留变量 {$smarty}保留变量可以被用于访问一些特殊的模板变量. 以下是全部. 页面请求变量 以下是访问页面请求变量诸如get,post,cookies,server,enviroment和session变量的例子. 例如{$smarty.server.SERVER_NAME}取得服务器变量，{$smarty.env.PATH}取得系统环境变量path, {$smarty.request.username}取得get/post/cookies/server/env的复合变量。 {$smarty.now}变量用于访问当前时间戳. 可以用 date_format调节器格式化输出. 例如{$smarty.now|date_format:&quot;%Y-%m-%d %H:%M:%S&quot;} {$smarty.const} 你可以直接访问PHP常量. 例如{$smarty.const._MY_CONST_VAL} {$smarty.capture} 可以通过 {capture}..{/capture}结构 截取的输出可以使用{$smarty} 变量访问. {$smarty.config} {$smarty}变量 可以访问已经加载的config变量. 例如 {$smarty.config.foo}就可以表示 . {$smarty.section}, {$smarty.foreach} {$smarty} 变量可以访问&#39;section&#39;和&#39;foreach&#39;循环的属性. {$smarty.template} 显示当前被处理的模板的名字. {$smarty.version} 显示smarty模板的版本 {$smarty.ldelim} 显示左分隔符 {$smarty.rdelim} 显示右分隔符 变量调节器 变量调节器用于变量,自定义函数和字符串. 可以使用&#39;|&#39;符号和调节器名称应用调节器. 变量调节器由赋予的参数值决定其行为. 参数由&#39;:&#39;符号分开. 如果你用变量调节器调节数组变量,结果是数组的每个值都被调节.如果你想要调节器调节整个数组,你必须在调节器名字前加上@符号. 例如: {$articleTitle|@count}(这将会在输出 $articleTitle 数组里的数目) capitalize 将变量里的所有单词首字大写. 参数值boolean型决定带数字的词是否首字大写。默认不大写 count_characters 计算变量值里的字符数.参数值boolean型决定是否计算空格数。默认不计算空格 cat 将cat里的参数值连接到给定的变量后面.默认为空。 count_paragraphs 计算变量里的段落数量 count_sentences 计算变量里句子的数量 count_words 计算变量里的词数 date_format 日期格式 第一个参数控制日期格式. 如果传给date_format的数据是空的,将使用第二个参数作为默认时间 %a - 星期几的简写 %A - 星期几的全写 %b - 月份的简写 %B - 月份的全写 %c - 日期时间06/12/05 11:15:10 %C - 世纪时间 %d - 一个月的第几号(从 01 到 31) %D - 同 %m/%d/%y %e - 一个月的第几号，号为单数则前面加一空格 (从 1 到 31) %g - 世纪 %G - 世纪 [0000,9999] %h - 同%b %H - 24小时形式的小时(从00到23) %I - 12小时形式的小时(从01到 12) %j - 一年中的第几天(从 001 到 366) %k - 24小时形式的小时，单数字前面加空格. (从 0 到 23) %l - 12小时形式的小时，单数字前面加空格.(range 1 to 12) %m - 月份 (range 01 to 12) %M - 分 %n - 换行符 %p - 显示早上还是下午am’ 或 `pm’%r - a.m. 或 p.m.形式的时间%R - 24小时形式的时间%S - 秒%t - tab符号%T - 同%H:%M:%S%u - 用 [1,7],表示星期几%U - 计算是该年的第几个星期，从该年的第一个星期天开始计算%V - 计算是该年的第几个星期, 从 01 到 53, 第一个星期必须至少有4天在这一年, 星期天作为这个星期的第一天 &nbsp; 参考网站: http://www.zxlive.net/detailed-template-smarty-foreach-ecshop.html http://hi.baidu.com/wupinghou/item/3a6e4ff955f4c41984d2788b http://blog.csdn.net/21aspnet/article/details/7590422]]></content>
      <categories>
        <category>ECshop</category>
      </categories>
      <tags>
        <tag>ecshop</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ecshop 后台添加图片上传]]></title>
    <url>%2F2013%2F11%2F22%2Fecshop-upload-images.html</url>
    <content type="text"><![CDATA[1.后台模版文件添加: &lt;tr&gt; &lt;td class=”label”&gt;文章图标1&lt;/td&gt; &lt;td&gt; &lt;input type=”file” name=”article_icon_1” size=”35” /&gt; {if $article.article_icon_1} &lt;a href=”article.php?act=show_image&amp;img_url={$article.article_icon_1}” target=”_blank”&gt;&lt;img src=”images/yes.gif” border=”0” /&gt;&lt;/a&gt; {else} &lt;img src=”images/no.gif” /&gt; {/if} &lt;/td&gt;&lt;/tr&gt;&nbsp; 2.后台程序修改: insert区域: / 文章图标处理 begin / $article_icon_1 = ‘’; $article_icon_2 = ‘’; $save_path = ‘icon/‘.date(‘Ym’,time()); if ( ($_FILES[‘article_icon_1’][‘tmp_name’] != ‘’ &amp;&amp; $_FILES[‘article_icon_1’][‘tmp_name’] != ‘none’) ){ $original_article_icon_1 = $image-&gt;upload_image($_FILES[‘article_icon_1’], $save_path); // 原始图片 if ($original_article_icon_1 === false) { sys_msg($image-&gt;error_msg(), 1, array(), false); } $article_icon_1 = $original_article_icon_1; // 商品图片 } if ( ($_FILES[‘article_icon_2’][‘tmp_name’] != ‘’ &amp;&amp; $_FILES[‘article_icon_2’][‘tmp_name’] != ‘none’) ){ $original_article_icon_2 = $image-&gt;upload_image($_FILES[‘article_icon_2’], $save_path); // 原始图片 if ($original_article_icon_2 === false) { sys_msg($image-&gt;error_msg(), 1, array(), false); } $article_icon_2 = $original_article_icon_2; // 商品图片 }&nbsp; &nbsp; update区域: &nbsp; delete区域: &nbsp; &nbsp;]]></content>
      <categories>
        <category>ECshop</category>
      </categories>
      <tags>
        <tag>ecshop</tag>
        <tag>图片上传</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最新解决Ecshop2.73与Jquery的冲突]]></title>
    <url>%2F2013%2F11%2F21%2Fecshop-conflict-for-jquery.html</url>
    <content type="text"><![CDATA[早些年就有人在ecshop论坛反映，为何ecshop不兼容jquery？可是ecshop官网却一直未解决这个问题。由插件联盟网亲自测试并验证过的解决jquery冲突的方法如下：1.复制一份 transport.js 改名为 transport.org.js 提供给后台使用 2.注释掉js/transport.js里的toJSON功能 行数为497-737行之间。其中将 legalParams = “JSON=” + $.toJSON(params); 替换为result = $.evalJSON(result); 3.修改js/index.js里的第44行，将其改为：var res = $.evalJSON(result); 4.修改js/改common.js,将第34行改为：Ajax.call(‘flow.php?step=add_to_cart’, ‘goods=’ + $.toJSON(goods), addToCartResponse, ‘POST’, ‘JSON’);然后将850行改为:Ajax.call(‘flow.php?step=add_package_to_cart’, ‘package_info=’ + $.toJSON(package_info), addPackageToCartResponse, ‘POST’, ‘JSON’);最后将1056行改为：Ajax.call(‘flow.php?step=add_to_cart’, ‘goods=’ + $.toJSON(goods), addToCartResponse, ‘POST’, ‘JSON’); 5.修改compare.js文件第49行改为:this.data = $.evalJSON(cookieValue);第67行改为:var obj = $.evalJSON(cookieValue);第133行改为:document.setCookie(“compareItems”, $.toJSON(this.data)); 6.修改js/global.js文件,其中将第16行改函数名 :function $e()。然后第114和126行都改为: var element = $e(element); 7.修改后台头部引入transport.js路径 admin/templates/pageheader.htm 第9行改为: {insert_scripts files=”../js/transport.org.js,common.js”} 8.修改themes/default/library/page_header.lbi文件在{insert_scripts files=’transport.js,utils.js’}上面加上如下代码{insert_scripts files=’jquery.js,jquery.json.js’} 9.修改你的模板下的library/comment_list.lbi。将第188行 替换为：Ajax.call(‘comment.php’, ‘cmt=’ + $.toJSON(cmt), commentResponse, ‘POST’, ‘JSON’); 10.修改模板compare.dwt。将第20行 改为：var obj = $.evalJSON(document.getCookie(“compareItems”));然后第24行 替换为：document.setCookie(“compareItems”, $.toJSON(obj)); 11.修改模板flow.dwt，将第138行 替换为：Ajax.call(‘flow.php?step=add_to_cart’, ‘goods=’ + $.toJSON(goods), collect_to_flow_response, ‘POST’, ‘JSON’);然后将第199行 改为：Ajax.call(‘flow.php?step=add_to_cart’, ‘goods=’ + $.toJSON(goods), fittings_to_flow_response, ‘POST’, ‘JSON’); 12.over]]></content>
      <categories>
        <category>ECshop</category>
      </categories>
      <tags>
        <tag>ecshop</tag>
        <tag>jquery</tag>
        <tag>jquery冲突</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ECshop插件功能汇总]]></title>
    <url>%2F2013%2F11%2F21%2Fecshop-plugin-website.html</url>
    <content type="text"><![CDATA[1. ecshop功能 2. 3. 参考网站http://www.topchajian.com]]></content>
      <categories>
        <category>ECshop</category>
      </categories>
      <tags>
        <tag>ecshop</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ecshop原生态js实现登录和注册弹窗]]></title>
    <url>%2F2013%2F11%2F21%2Fecshop-js-for-login-and-register.html</url>
    <content type="text"><![CDATA[&nbsp; 详细教程如下：1.打开你的模版下library/member_info.lbi 文件，在里面添加如下的代码。 &lt;script type=”text/javascript”&gt; function login_module(){//点击登录时，调用的函数 var mengban=document.getElementById(“mengban”); mengban.className=”mengban”; var divs=document.getElementById(“login_module”); divs.style.display=”block”; } function close_login(){//关闭弹窗时，调用的函数 var mengban=document.getElementById(“mengban”); mengban.className=” “; document.getElementById(“login_module”).style.display = “none”; document.getElementById(“register_module”).style.display = “none”; } function register_module(){//注册时，调用的函数 var mengban=document.getElementById(“mengban”); mengban.className=”mengban”; var divs=document.getElementById(“register_module”); divs.style.display=”block”; }&lt;/script&gt;大家看注释都明白，上面的函数分别定义了，点击登录，注册等链接时，所调用的函数。 &nbsp; 2.打开你的模版下library/page_header.lbi 文件，在里面添一个div层，如下： &lt;div class=”” id=”mengban”&gt;&lt;/div&gt;&nbsp; 3.打开你的模版下style.css，在最后面添加这样一行： .mengban {position:absolute; top:0; background-color: rgba(227,227,227,.9); background: #E3E3E3; *background-color: #E3E3E3; filter: alpha(opacity=70); opacity:0.7; left:0; width:100%; height:9000px; z-index:10000;}&nbsp; 该行定义了div 层mengban的样式，即弹窗弹出后的背景色样式。4.接下来定义一个div，用来展示弹出窗的内容，例如：用户登录信息。将该div放在page_footer.lbi的最下面。该div内容如下：（这里只贴出ecshop用户登录信息，注册的与之类似）。 &lt;div id=”login_module” style=”display:none;height:300px;width:430px;margin:0 auto;border:7px solid #808080;position:absolute;left:30%;top:130px;z-index:100001;background-color:#ffffff”&gt;&lt;div style=”text-align:right;margin:4px”&gt;&lt;a href=”javascript:void(0);” onclick=”close_login()”&gt;&lt;img src=”images/closelabel.gif”/&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=”margin-top:20px;margin-left:80px;height:30px; background:url(images/ur_bg.gif) no-repeat 0px 0px;”&gt;&lt;/div&gt;&lt;form name=”formLogin” action=”user.php” method=”post” **ubmit=”return userLogin()”&gt;&lt;table width=”100%” border=”0” align=”center”&gt; &lt;tr&gt; &lt;td width=”30%” align=”right”&gt;email：&lt;/td&gt; &lt;td width=”70%”&gt;&lt;input name=”username” type=”text” size=”30” id=”username” /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td align=”right”&gt;assword：&lt;/td&gt; &lt;td&gt;&lt;input name=”password” type=”password” size=”30” id=”password” /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;!– {if $enabled_captcha} 判断是否启用验证码 –&gt; &lt;tr&gt; &lt;th align=”right”&gt;{$lang.comment_captcha}：&lt;/th&gt; &lt;td&gt; &lt;input type=”text” size=”8” name=”captcha” /&gt; &lt;img src=”captcha.php?is_login=1&amp;{$rand}” onClick=”this.src=’captcha.php?is_login=1&amp;’+Math.random()” alt=”captcha” style=”cursor:pointer;” /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;!– {/if} –&gt; &lt;tr&gt; &lt;td colspan=”2” align=”center”&gt; &lt;input type=”submit” name=”login” value=”Enter” /&gt; &lt;input type=”button” name=”register” value=”Submit” onclick=”window.location.href=’user.php?act=register’”/&gt; &lt;input type=”hidden” name=”act” value=”act_login” /&gt; &lt;input type=”hidden” name=”back_act” value=”{$back_act}” /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=”2” align=”center”&gt; &lt;a href=”user.php?act=get_password”&gt;{$lang.get_password_by_mail}&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/form&gt;&lt;center&gt; &lt;a href=”javascript:void(0);” onclick=”fbLogin()”&gt;&lt;img src=””/&gt;&lt;/a&gt;&lt;/center&gt;&lt;/div&gt;&nbsp;总结下，上面代码整个流程如下：用户点击ecshop登录，接着调用login_module()函数，该函数立即弹窗一个弹窗，弹窗div的ID即为login_module，而弹窗的背景色即为我们所定义的mengban div 层。当点击弹窗关闭之后，立即调用close_login()函数，该函数作用：把登录弹窗隐藏掉，背景色恢复。 &nbsp; &nbsp; 参考网站: ecshop纯js实现会员注册与登录弹窗 http://www.topchajian.com/?p=420 &nbsp;]]></content>
      <categories>
        <category>ECshop</category>
      </categories>
      <tags>
        <tag>ecshop</tag>
        <tag>弹窗</tag>
        <tag>登陆注册</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jquery插件研究列表]]></title>
    <url>%2F2013%2F11%2F21%2Fjquery-plugin-research.html</url>
    <content type="text"><![CDATA[1. Fancybox官网: http://fancybox.net 测试时间: 现实中的例子: 一个简单的实现: 参考万网会员对商品评论的登陆区域. &nbsp; 2. cloudzoom 图片相册放大插件 http://www.starplugins.com/cloudzoom http://www.professorcloud.com/mainsite/index.htm]]></content>
      <categories>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>jquery</tag>
        <tag>fancybox</tag>
      </tags>
  </entry>
</search>